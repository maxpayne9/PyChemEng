/* Generated by Cython 3.0.12 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "include_dirs": [
            "."
        ], 
        "language": "c++", 
        "name": "chemeng.cementdata", 
        "sources": [
            "src/chemeng/cementdata.pyx"
        ]
    }, 
    "module_name": "chemeng.cementdata"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_12" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000CF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__chemeng__cementdata
#define __PYX_HAVE_API__chemeng__cementdata
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "src/chemeng/cementdata.pyx",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(__Pyx_PyLong_IsNonNeg(x)) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static int __Pyx_PyFloat_BoolNeObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_BoolNeObjC(op1, op2, floatval, inplace, zerodivision_check)\
    __Pyx_PyObject_IsTrueAndDecref(PyObject_RichCompare(op1, op2, Py_NE))
    #endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* ImportDottedModuleRelFirst.proto */
static PyObject *__Pyx_ImportDottedModuleRelFirst(PyObject *name, PyObject *parts_tuple);

/* Py3UpdateBases.proto */
static PyObject* __Pyx_PEP560_update_bases(PyObject *bases);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyBytes_AS_STRING(obj);
    size = PyBytes_GET_SIZE(obj);
#else
    if (PyBytes_AsStringAndSize(obj, &as_c_string, &size) < 0) {
        return (double)-1;
    }
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyByteArray_AS_STRING(obj);
    size = PyByteArray_GET_SIZE(obj);
#else
    as_c_string = PyByteArray_AsString(obj);
    if (as_c_string == NULL) {
        return (double)-1;
    }
    size = PyByteArray_Size(obj);
#endif
    return __Pyx__PyBytes_AsDouble(obj, as_c_string, size);
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY && CYTHON_ASSUME_SAFE_MACROS
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pynumber_float.proto */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj);
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : __Pyx__PyNumber_Float(x))

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?  PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyLong_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CStringEquals.proto */
static CYTHON_INLINE int __Pyx_StrEq(const char *, const char *);

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "chemeng.cementdata" */
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "chemeng.cementdata"
extern int __pyx_module_is_main_chemeng__cementdata;
int __pyx_module_is_main_chemeng__cementdata = 0;

/* Implementation of "chemeng.cementdata" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_filter;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_range;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "!";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_37[] = "37";
static const char __pyx_k_Al[] = "Al";
static const char __pyx_k_Ca[] = "Ca";
static const char __pyx_k_Cl[] = "Cl";
static const char __pyx_k_Cp[] = "Cp";
static const char __pyx_k_Fe[] = "Fe";
static const char __pyx_k_Li[] = "Li";
static const char __pyx_k_Mg[] = "Mg";
static const char __pyx_k_NA[] = "NA";
static const char __pyx_k_Na[] = "Na";
static const char __pyx_k_S0[] = "S0";
static const char __pyx_k_Si[] = "Si";
static const char __pyx_k_Ti[] = "Ti";
static const char __pyx_k_V0[] = "V0";
static const char __pyx_k_Zn[] = "Zn";
static const char __pyx_k__2[] = "";
static const char __pyx_k__3[] = ", ";
static const char __pyx_k__5[] = "]}";
static const char __pyx_k__6[] = " ";
static const char __pyx_k__7[] = " @ ";
static const char __pyx_k__8[] = "*";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_rb[] = "rb";
static const char __pyx_k_Cp0[] = "Cp0";
static const char __pyx_k_Gfe[] = "Gfe";
static const char __pyx_k_H2O[] = "H2O";
static const char __pyx_k_Hf0[] = "Hf0";
static const char __pyx_k_Hfe[] = "Hfe";
static const char __pyx_k_Htr[] = "Htr";
static const char __pyx_k__22[] = ",";
static const char __pyx_k__23[] = "\"";
static const char __pyx_k__64[] = "?";
static const char __pyx_k_a_2[] = "', a=[";
static const char __pyx_k_csv[] = "csv";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_row[] = "row";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_Exit[] = "Exit";
static const char __pyx_k_Gfox[] = "Gfox";
static const char __pyx_k_H298[] = "H298";
static const char __pyx_k_Hfox[] = "Hfox";
static const char __pyx_k_HmHr[] = "HmHr";
static const char __pyx_k_K_of[] = "K of ";
static const char __pyx_k_S0_2[] = "S0:";
static const char __pyx_k_S298[] = "S298";
static const char __pyx_k_TiS2[] = "TiS2";
static const char __pyx_k_Tmax[] = "Tmax";
static const char __pyx_k_Tmin[] = "Tmin";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_fabs[] = "fabs";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_FeCl3[] = "FeCl3";
static const char __pyx_k_GmHoT[] = "GmHoT";
static const char __pyx_k_Hf0_2[] = " Hf0:";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_notes[] = "notes";
static const char __pyx_k_phase[] = "phase";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_Acmite[] = "Acmite";
static const char __pyx_k_Albite[] = "Albite";
static const char __pyx_k_CaB2O4[] = "CaB2O4";
static const char __pyx_k_CaB4O7[] = "CaB4O7";
static const char __pyx_k_CaSiO3[] = "CaSiO3";
static const char __pyx_k_CaTiO3[] = "CaTiO3";
static const char __pyx_k_FeTiO3[] = "FeTiO3";
static const char __pyx_k_Gibbs0[] = "Gibbs0";
static const char __pyx_k_Liquid[] = "Liquid";
static const char __pyx_k_Tmax_2[] = ", Tmax=";
static const char __pyx_k_config[] = "config";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_lambda[] = "<lambda>";
static const char __pyx_k_logkfe[] = "logkfe";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_phases[] = "phases";
static const char __pyx_k_reader[] = "reader";
static const char __pyx_k_retval[] = "retval";
static const char __pyx_k_Al2SiO5[] = "Al2SiO5";
static const char __pyx_k_Al2TiO5[] = "Al2TiO5";
static const char __pyx_k_Ca2B2O5[] = "Ca2B2O5";
static const char __pyx_k_Ca2SiO4[] = "Ca2SiO4";
static const char __pyx_k_Ca3B2O6[] = "Ca3B2O6";
static const char __pyx_k_Ca3SiO5[] = "Ca3SiO5";
static const char __pyx_k_CaAl2O4[] = "CaAl2O4";
static const char __pyx_k_CaAl4O7[] = "CaAl4O7";
static const char __pyx_k_CaFe2O4[] = "CaFe2O4";
static const char __pyx_k_Crystal[] = "Crystal";
static const char __pyx_k_Fe2SiO4[] = "Fe2SiO4";
static const char __pyx_k_Fe2TiO4[] = "Fe2TiO4";
static const char __pyx_k_HT_H298[] = " HT-H298:";
static const char __pyx_k_HTmH298[] = "HTmH298";
static const char __pyx_k_Jadeite[] = "Jadeite";
static const char __pyx_k_Li2TiO3[] = "Li2TiO3";
static const char __pyx_k_Mg2SiO4[] = "Mg2SiO4";
static const char __pyx_k_MgFe2O4[] = "MgFe2O4";
static const char __pyx_k_Mullite[] = "Mullite";
static const char __pyx_k_Na2TiO3[] = "Na2TiO3";
static const char __pyx_k_STmS298[] = "STmS298";
static const char __pyx_k_Testrow[] = "Testrow";
static const char __pyx_k_Zn2TiO4[] = "Zn2TiO4";
static const char __pyx_k_chemeng[] = "chemeng";
static const char __pyx_k_datadir[] = "datadir";
static const char __pyx_k_logkfox[] = "logkfox";
static const char __pyx_k_notes_2[] = ", notes='";
static const char __pyx_k_percent[] = " percent";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_species[] = "species";
static const char __pyx_k_Ca2Fe2O5[] = "Ca2Fe2O5";
static const char __pyx_k_Ca3Al2O6[] = "Ca3Al2O6";
static const char __pyx_k_Ca3Si2O7[] = "Ca3Si2O7";
static const char __pyx_k_CaMgC2O6[] = "CaMgC2O6";
static const char __pyx_k_CaTiSiO5[] = "CaTiSiO5";
static const char __pyx_k_Diopside[] = "Diopside";
static const char __pyx_k_Dolomite[] = "Dolomite";
static const char __pyx_k_Fayalite[] = "Fayalite";
static const char __pyx_k_Fe2Si2O6[] = "Fe2Si2O6";
static const char __pyx_k_KAlSi3O8[] = "KAlSi3O8";
static const char __pyx_k_Mg2Si2O6[] = "Mg2Si2O6";
static const char __pyx_k_NASAdata[] = "NASAdata";
static const char __pyx_k_Sanidine[] = "Sanidine";
static const char __pyx_k_Spurrite[] = "Spurrite";
static const char __pyx_k_Testfile[] = "Testfile";
static const char __pyx_k_comments[] = "comments";
static const char __pyx_k_datafile[] = "datafile";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_Al6Si2O13[] = "Al6Si2O13";
static const char __pyx_k_CaAl2SiO6[] = "CaAl2SiO6";
static const char __pyx_k_CaMgSi2O6[] = "CaMgSi2O6";
static const char __pyx_k_Enstatite[] = "Enstatite";
static const char __pyx_k_NaAlSi2O6[] = "NaAlSi2O6";
static const char __pyx_k_NaAlSi3O8[] = "NaAlSi3O8";
static const char __pyx_k_NaFeSi2O6[] = "NaFeSi2O6";
static const char __pyx_k_Tilleyite[] = "Tilleyite";
static const char __pyx_k_constants[] = "constants";
static const char __pyx_k_delimiter[] = "delimiter";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_quotechar[] = "quotechar";
static const char __pyx_k_Ca2Al2SiO7[] = "Ca2Al2SiO7";
static const char __pyx_k_Ca5Si2CO11[] = "Ca5Si2CO11";
static const char __pyx_k_CaAl2Si2O8[] = "CaAl2Si2O8";
static const char __pyx_k_Cement_csv[] = "Cement.csv";
static const char __pyx_k_Components[] = "Components";
static const char __pyx_k_Error_in_S[] = "\nError in S ";
static const char __pyx_k_Testreader[] = "Testreader";
static const char __pyx_k_highAlbite[] = "highAlbite";
static const char __pyx_k_Ca12Al14O33[] = "Ca12Al14O33";
static const char __pyx_k_Ca5Si2C2O13[] = "Ca5Si2C2O13";
static const char __pyx_k_Error_in_Cp[] = "\nError in Cp ";
static const char __pyx_k_Ferrosilite[] = "Ferrosilite";
static const char __pyx_k_mro_entries[] = "__mro_entries__";
static const char __pyx_k_speciesData[] = "speciesData";
static const char __pyx_k_Ca3Al2Si3O12[] = "Ca3Al2Si3O12";
static const char __pyx_k_HPThermoData[] = "HPThermoData";
static const char __pyx_k_NistData_csv[] = "NistData.csv";
static const char __pyx_k_Validate_Cem[] = "Validate_Cem";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_Al2Si2O5_OH_4[] = "Al2Si2O5(OH)4";
static const char __pyx_k_CemThermoData[] = "CemThermoData";
static const char __pyx_k_Error_in_H_Hr[] = "\nError in H-Hr ";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_percent_error[] = "percent_error";
static const char __pyx_k_registerPhase[] = "registerPhase";
static const char __pyx_k_Al2Si4O10_OH_2[] = "Al2Si4O10(OH)2";
static const char __pyx_k_Error_for_H_at[] = "Error for H at ";
static const char __pyx_k_chemeng_config[] = "chemeng.config";
static const char __pyx_k_Ca2Al3Si3O12_OH[] = "Ca2Al3Si3O12(OH)";
static const char __pyx_k_HPThermoData_S0[] = "HPThermoData.S0";
static const char __pyx_k_registerSpecies[] = "registerSpecies";
static const char __pyx_k_CaAl4Si2O10_OH_2[] = "CaAl4Si2O10(OH)2";
static const char __pyx_k_CemThermoData_S0[] = "CemThermoData.S0";
static const char __pyx_k_CementThermoData[] = "CementThermoData";
static const char __pyx_k_Error_in_G_Htr_T[] = "\nError in G-Htr/T ";
static const char __pyx_k_HPThermoData_Cp0[] = "HPThermoData.Cp0";
static const char __pyx_k_HPThermoData_Hf0[] = "HPThermoData.Hf0";
static const char __pyx_k_chemeng_NASAdata[] = "chemeng.NASAdata";
static const char __pyx_k_Ca2Al2Si3O10_OH_2[] = "Ca2Al2Si3O10(OH)2";
static const char __pyx_k_CemThermoData_Cp0[] = "CemThermoData.Cp0";
static const char __pyx_k_CemThermoData_Hf0[] = "CemThermoData.Hf0";
static const char __pyx_k_MulliteThermoData[] = "MulliteThermoData";
static const char __pyx_k_HPThermoData___str[] = "HPThermoData.__str__";
static const char __pyx_k_Validate_NIST_Data[] = "Validate_NIST_Data";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_chemeng_cementdata[] = "chemeng.cementdata";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_CemThermoData___str[] = "CemThermoData.__str__";
static const char __pyx_k_CementThermoData_S0[] = "CementThermoData.S0";
static const char __pyx_k_HPThermoData___init[] = "HPThermoData.__init__";
static const char __pyx_k_HPThermoData___repr[] = "HPThermoData.__repr__";
static const char __pyx_k_K3Fe0_5Al4Si19_5O47[] = "K3Fe0.5Al4Si19.5O47";
static const char __pyx_k_K3Mg0_5Al4Si19_5O47[] = "K3Mg0.5Al4Si19.5O47";
static const char __pyx_k_ThermoConstantsType[] = "ThermoConstantsType";
static const char __pyx_k_registerPhaseCoeffs[] = "registerPhaseCoeffs";
static const char __pyx_k_CemThermoData___init[] = "CemThermoData.__init__";
static const char __pyx_k_CemThermoData___repr[] = "CemThermoData.__repr__";
static const char __pyx_k_CementThermoData_Cp0[] = "CementThermoData.Cp0";
static const char __pyx_k_CementThermoData_Hf0[] = "CementThermoData.Hf0";
static const char __pyx_k_Cement_New_Tests_csv[] = "Cement_New_Tests.csv";
static const char __pyx_k_MulliteThermoData_S0[] = "MulliteThermoData.S0";
static const char __pyx_k_CementPolynomial_Tmin[] = "CementPolynomial{Tmin=";
static const char __pyx_k_Cement_Therm_New2_csv[] = "Cement_Therm_New2.csv";
static const char __pyx_k_MulliteThermoData_Cp0[] = "MulliteThermoData.Cp0";
static const char __pyx_k_MulliteThermoData_Hf0[] = "MulliteThermoData.Hf0";
static const char __pyx_k_CementThermoData___str[] = "CementThermoData.__str__";
static const char __pyx_k_CementThermoData___init[] = "CementThermoData.__init__";
static const char __pyx_k_CementThermoData___repr[] = "CementThermoData.__repr__";
static const char __pyx_k_MulliteThermoData___str[] = "MulliteThermoData.__str__";
static const char __pyx_k_MulliteThermoData___init[] = "MulliteThermoData.__init__";
static const char __pyx_k_MulliteThermoData___repr[] = "MulliteThermoData.__repr__";
static const char __pyx_k_src_chemeng_cementdata_pyx[] = "src/chemeng/cementdata.pyx";
/* #### Code section: decls ### */
static PyObject *__pyx_lambda_funcdef_7chemeng_10cementdata_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row); /* proto */
static PyObject *__pyx_lambda_funcdef_7chemeng_10cementdata_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row); /* proto */
static PyObject *__pyx_lambda_funcdef_7chemeng_10cementdata_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row); /* proto */
static PyObject *__pyx_lambda_funcdef_7chemeng_10cementdata_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tmin, PyObject *__pyx_v_Tmax, PyObject *__pyx_v_a, PyObject *__pyx_v_notes); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_2Cp0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_4Hf0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_6S0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_8__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_10__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_Validate_NIST_Data(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_species, PyObject *__pyx_v_phase, PyObject *__pyx_v_T, PyObject *__pyx_v_Cp, PyObject *__pyx_v_S, PyObject *__pyx_v_HmHr, PyObject *__pyx_v_GmHoT, PyObject *__pyx_v_Htr, PyObject *__pyx_v_percent_error); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tmin, PyObject *__pyx_v_Tmax, PyObject *__pyx_v_a, PyObject *__pyx_v_notes); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_2Cp0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_4Hf0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_6S0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_8__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_10__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_2Validate_Cem(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_species, PyObject *__pyx_v_phase, PyObject *__pyx_v_a, PyObject *__pyx_v_H298, PyObject *__pyx_v_S298, PyObject *__pyx_v_T, PyObject *__pyx_v_error, PyObject *__pyx_v_HTmH298, PyObject *__pyx_v_STmS298); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tmin, PyObject *__pyx_v_Tmax, PyObject *__pyx_v_a, PyObject *__pyx_v_notes); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_2Cp0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_4Hf0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_6S0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_8__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_10__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tmin, PyObject *__pyx_v_Tmax, PyObject *__pyx_v_notes); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_2Cp0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_4Hf0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_6S0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_8__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_10__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_kp_s_;
  PyObject *__pyx_kp_s_37;
  PyObject *__pyx_n_s_Acmite;
  PyObject *__pyx_n_s_Al;
  PyObject *__pyx_kp_s_Al2Si2O5_OH_4;
  PyObject *__pyx_kp_s_Al2Si4O10_OH_2;
  PyObject *__pyx_n_s_Al2SiO5;
  PyObject *__pyx_n_s_Al2TiO5;
  PyObject *__pyx_n_s_Al6Si2O13;
  PyObject *__pyx_n_s_Albite;
  PyObject *__pyx_n_s_B;
  PyObject *__pyx_n_s_C;
  PyObject *__pyx_n_s_Ca;
  PyObject *__pyx_n_s_Ca12Al14O33;
  PyObject *__pyx_kp_s_Ca2Al2Si3O10_OH_2;
  PyObject *__pyx_n_s_Ca2Al2SiO7;
  PyObject *__pyx_kp_s_Ca2Al3Si3O12_OH;
  PyObject *__pyx_n_s_Ca2B2O5;
  PyObject *__pyx_n_s_Ca2Fe2O5;
  PyObject *__pyx_n_s_Ca2SiO4;
  PyObject *__pyx_n_s_Ca3Al2O6;
  PyObject *__pyx_n_s_Ca3Al2Si3O12;
  PyObject *__pyx_n_s_Ca3B2O6;
  PyObject *__pyx_n_s_Ca3Si2O7;
  PyObject *__pyx_n_s_Ca3SiO5;
  PyObject *__pyx_n_s_Ca5Si2C2O13;
  PyObject *__pyx_n_s_Ca5Si2CO11;
  PyObject *__pyx_n_s_CaAl2O4;
  PyObject *__pyx_n_s_CaAl2Si2O8;
  PyObject *__pyx_n_s_CaAl2SiO6;
  PyObject *__pyx_n_s_CaAl4O7;
  PyObject *__pyx_kp_s_CaAl4Si2O10_OH_2;
  PyObject *__pyx_n_s_CaB2O4;
  PyObject *__pyx_n_s_CaB4O7;
  PyObject *__pyx_n_s_CaFe2O4;
  PyObject *__pyx_n_s_CaMgC2O6;
  PyObject *__pyx_n_s_CaMgSi2O6;
  PyObject *__pyx_n_s_CaSiO3;
  PyObject *__pyx_n_s_CaTiO3;
  PyObject *__pyx_n_s_CaTiSiO5;
  PyObject *__pyx_n_s_CemThermoData;
  PyObject *__pyx_n_s_CemThermoData_Cp0;
  PyObject *__pyx_n_s_CemThermoData_Hf0;
  PyObject *__pyx_n_s_CemThermoData_S0;
  PyObject *__pyx_n_s_CemThermoData___init;
  PyObject *__pyx_n_s_CemThermoData___repr;
  PyObject *__pyx_n_s_CemThermoData___str;
  PyObject *__pyx_kp_s_CementPolynomial_Tmin;
  PyObject *__pyx_n_s_CementThermoData;
  PyObject *__pyx_n_s_CementThermoData_Cp0;
  PyObject *__pyx_n_s_CementThermoData_Hf0;
  PyObject *__pyx_n_s_CementThermoData_S0;
  PyObject *__pyx_n_s_CementThermoData___init;
  PyObject *__pyx_n_s_CementThermoData___repr;
  PyObject *__pyx_n_s_CementThermoData___str;
  PyObject *__pyx_kp_s_Cement_New_Tests_csv;
  PyObject *__pyx_kp_s_Cement_Therm_New2_csv;
  PyObject *__pyx_kp_s_Cement_csv;
  PyObject *__pyx_n_s_Cl;
  PyObject *__pyx_n_s_Components;
  PyObject *__pyx_n_s_Cp;
  PyObject *__pyx_n_s_Cp0;
  PyObject *__pyx_n_s_Crystal;
  PyObject *__pyx_n_s_Diopside;
  PyObject *__pyx_n_s_Dolomite;
  PyObject *__pyx_n_s_Enstatite;
  PyObject *__pyx_kp_s_Error_for_H_at;
  PyObject *__pyx_kp_s_Error_in_Cp;
  PyObject *__pyx_kp_s_Error_in_G_Htr_T;
  PyObject *__pyx_kp_s_Error_in_H_Hr;
  PyObject *__pyx_kp_s_Error_in_S;
  PyObject *__pyx_n_s_Exit;
  PyObject *__pyx_n_s_Fayalite;
  PyObject *__pyx_n_s_Fe;
  PyObject *__pyx_n_s_Fe2Si2O6;
  PyObject *__pyx_n_s_Fe2SiO4;
  PyObject *__pyx_n_s_Fe2TiO4;
  PyObject *__pyx_n_s_FeCl3;
  PyObject *__pyx_n_s_FeTiO3;
  PyObject *__pyx_n_s_Ferrosilite;
  PyObject *__pyx_n_s_Gfe;
  PyObject *__pyx_n_s_Gfox;
  PyObject *__pyx_n_s_Gibbs0;
  PyObject *__pyx_n_s_GmHoT;
  PyObject *__pyx_n_s_H;
  PyObject *__pyx_n_s_H298;
  PyObject *__pyx_n_s_H2O;
  PyObject *__pyx_n_s_HPThermoData;
  PyObject *__pyx_n_s_HPThermoData_Cp0;
  PyObject *__pyx_n_s_HPThermoData_Hf0;
  PyObject *__pyx_n_s_HPThermoData_S0;
  PyObject *__pyx_n_s_HPThermoData___init;
  PyObject *__pyx_n_s_HPThermoData___repr;
  PyObject *__pyx_n_s_HPThermoData___str;
  PyObject *__pyx_kp_s_HT_H298;
  PyObject *__pyx_n_s_HTmH298;
  PyObject *__pyx_n_s_Hf0;
  PyObject *__pyx_kp_s_Hf0_2;
  PyObject *__pyx_n_s_Hfe;
  PyObject *__pyx_n_s_Hfox;
  PyObject *__pyx_n_s_HmHr;
  PyObject *__pyx_n_s_Htr;
  PyObject *__pyx_n_s_Jadeite;
  PyObject *__pyx_n_s_K;
  PyObject *__pyx_kp_s_K3Fe0_5Al4Si19_5O47;
  PyObject *__pyx_kp_s_K3Mg0_5Al4Si19_5O47;
  PyObject *__pyx_n_s_KAlSi3O8;
  PyObject *__pyx_kp_s_K_of;
  PyObject *__pyx_n_s_Li;
  PyObject *__pyx_n_s_Li2TiO3;
  PyObject *__pyx_n_s_Liquid;
  PyObject *__pyx_n_s_Mg;
  PyObject *__pyx_n_s_Mg2Si2O6;
  PyObject *__pyx_n_s_Mg2SiO4;
  PyObject *__pyx_n_s_MgFe2O4;
  PyObject *__pyx_n_s_Mullite;
  PyObject *__pyx_n_s_MulliteThermoData;
  PyObject *__pyx_n_s_MulliteThermoData_Cp0;
  PyObject *__pyx_n_s_MulliteThermoData_Hf0;
  PyObject *__pyx_n_s_MulliteThermoData_S0;
  PyObject *__pyx_n_s_MulliteThermoData___init;
  PyObject *__pyx_n_s_MulliteThermoData___repr;
  PyObject *__pyx_n_s_MulliteThermoData___str;
  PyObject *__pyx_n_s_NA;
  PyObject *__pyx_n_s_NASAdata;
  PyObject *__pyx_n_s_Na;
  PyObject *__pyx_n_s_Na2TiO3;
  PyObject *__pyx_n_s_NaAlSi2O6;
  PyObject *__pyx_n_s_NaAlSi3O8;
  PyObject *__pyx_n_s_NaFeSi2O6;
  PyObject *__pyx_kp_s_NistData_csv;
  PyObject *__pyx_n_s_O;
  PyObject *__pyx_n_s_S;
  PyObject *__pyx_n_s_S0;
  PyObject *__pyx_kp_s_S0_2;
  PyObject *__pyx_n_s_S298;
  PyObject *__pyx_n_s_STmS298;
  PyObject *__pyx_n_s_Sanidine;
  PyObject *__pyx_n_s_Si;
  PyObject *__pyx_n_s_Spurrite;
  PyObject *__pyx_n_s_T;
  PyObject *__pyx_n_s_Testfile;
  PyObject *__pyx_n_s_Testreader;
  PyObject *__pyx_n_s_Testrow;
  PyObject *__pyx_n_s_ThermoConstantsType;
  PyObject *__pyx_n_s_Ti;
  PyObject *__pyx_n_s_TiS2;
  PyObject *__pyx_n_s_Tilleyite;
  PyObject *__pyx_n_s_Tmax;
  PyObject *__pyx_kp_s_Tmax_2;
  PyObject *__pyx_n_s_Tmin;
  PyObject *__pyx_n_s_V0;
  PyObject *__pyx_n_s_Validate_Cem;
  PyObject *__pyx_n_s_Validate_NIST_Data;
  PyObject *__pyx_n_s_Zn;
  PyObject *__pyx_n_s_Zn2TiO4;
  PyObject *__pyx_kp_s__2;
  PyObject *__pyx_kp_s__22;
  PyObject *__pyx_kp_s__23;
  PyObject *__pyx_kp_s__3;
  PyObject *__pyx_kp_s__5;
  PyObject *__pyx_kp_s__6;
  PyObject *__pyx_n_s__64;
  PyObject *__pyx_kp_s__7;
  PyObject *__pyx_n_s__8;
  PyObject *__pyx_n_s_a;
  PyObject *__pyx_kp_s_a_2;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_s_chemeng;
  PyObject *__pyx_n_s_chemeng_NASAdata;
  PyObject *__pyx_n_s_chemeng_cementdata;
  PyObject *__pyx_n_s_chemeng_config;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_comments;
  PyObject *__pyx_n_s_config;
  PyObject *__pyx_n_s_constants;
  PyObject *__pyx_n_s_csv;
  PyObject *__pyx_n_s_d;
  PyObject *__pyx_n_s_datadir;
  PyObject *__pyx_n_s_datafile;
  PyObject *__pyx_n_s_delimiter;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_e;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_s_enter;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_exit;
  PyObject *__pyx_n_s_fabs;
  PyObject *__pyx_n_s_file;
  PyObject *__pyx_n_s_filter;
  PyObject *__pyx_n_s_highAlbite;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_join;
  PyObject *__pyx_n_s_lambda;
  PyObject *__pyx_n_s_log;
  PyObject *__pyx_n_s_logkfe;
  PyObject *__pyx_n_s_logkfox;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_map;
  PyObject *__pyx_n_s_math;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_mro_entries;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_next;
  PyObject *__pyx_n_s_notes;
  PyObject *__pyx_kp_s_notes_2;
  PyObject *__pyx_n_s_open;
  PyObject *__pyx_n_s_os;
  PyObject *__pyx_n_s_path;
  PyObject *__pyx_kp_s_percent;
  PyObject *__pyx_n_s_percent_error;
  PyObject *__pyx_n_s_phase;
  PyObject *__pyx_n_s_phases;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_quotechar;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_rb;
  PyObject *__pyx_n_s_reader;
  PyObject *__pyx_n_s_registerPhase;
  PyObject *__pyx_n_s_registerPhaseCoeffs;
  PyObject *__pyx_n_s_registerSpecies;
  PyObject *__pyx_n_s_repr;
  PyObject *__pyx_n_s_retval;
  PyObject *__pyx_n_s_row;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_species;
  PyObject *__pyx_n_s_speciesData;
  PyObject *__pyx_kp_s_src_chemeng_cementdata_pyx;
  PyObject *__pyx_n_s_str;
  PyObject *__pyx_n_s_strip;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_5;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_2_0;
  PyObject *__pyx_float_3_0;
  PyObject *__pyx_float_4_0;
  PyObject *__pyx_float_0_03;
  PyObject *__pyx_float_19_5;
  PyObject *__pyx_float_100_0;
  PyObject *__pyx_float_201_1;
  PyObject *__pyx_float_237_6;
  PyObject *__pyx_float_239_7;
  PyObject *__pyx_float_267_9;
  PyObject *__pyx_float_298_0;
  PyObject *__pyx_float_301_1;
  PyObject *__pyx_float_307_1;
  PyObject *__pyx_float_314_5;
  PyObject *__pyx_float_345_3;
  PyObject *__pyx_float_354_9;
  PyObject *__pyx_float_356_2;
  PyObject *__pyx_float_358_5;
  PyObject *__pyx_float_358_9;
  PyObject *__pyx_float_367_3;
  PyObject *__pyx_float_398_7;
  PyObject *__pyx_float_417_5;
  PyObject *__pyx_float_448_8;
  PyObject *__pyx_float_452_0;
  PyObject *__pyx_float_614_1;
  PyObject *__pyx_float_741_7;
  PyObject *__pyx_float_2000_0;
  PyObject *__pyx_float_2375_0;
  PyObject *__pyx_float_2386_0;
  PyObject *__pyx_float_298_15;
  PyObject *__pyx_float_0_01733;
  PyObject *__pyx_float_0_000041;
  PyObject *__pyx_float_0_010143;
  PyObject *__pyx_float_0_016758;
  PyObject *__pyx_float_1290100_0;
  PyObject *__pyx_float_1_30438133eneg_01;
  PyObject *__pyx_float_3_77248082e_02;
  PyObject *__pyx_float_neg_0_5;
  PyObject *__pyx_float_neg_900_9;
  PyObject *__pyx_float_neg_2020_1;
  PyObject *__pyx_float_neg_2055_1;
  PyObject *__pyx_float_neg_2125_8;
  PyObject *__pyx_float_neg_3185_3;
  PyObject *__pyx_float_neg_3456_2;
  PyObject *__pyx_float_neg_3953_6;
  PyObject *__pyx_float_neg_3973_1;
  PyObject *__pyx_float_neg_4058_0;
  PyObject *__pyx_float_neg_4168_0;
  PyObject *__pyx_float_neg_5878_5;
  PyObject *__pyx_float_neg_0_002990;
  PyObject *__pyx_float_neg_0_003508;
  PyObject *__pyx_float_neg_0_004905;
  PyObject *__pyx_float_neg_0_005345;
  PyObject *__pyx_float_neg_0_006579;
  PyObject *__pyx_float_neg_0_010075;
  PyObject *__pyx_float_neg_0_013364;
  PyObject *__pyx_float_neg_596900_0;
  PyObject *__pyx_float_neg_1007300_0;
  PyObject *__pyx_float_neg_1275900_0;
  PyObject *__pyx_float_neg_1685500_0;
  PyObject *__pyx_float_neg_1960600_0;
  PyObject *__pyx_float_neg_2239300_0;
  PyObject *__pyx_float_neg_2493100_0;
  PyObject *__pyx_float_neg_5897053_0;
  PyObject *__pyx_float_neg_23819995_9;
  PyObject *__pyx_float_neg_2576200_44;
  PyObject *__pyx_float_neg_1506736_555;
  PyObject *__pyx_float_neg_2242104_385;
  PyObject *__pyx_float_neg_23632876_25;
  PyObject *__pyx_float_neg_3191463_435;
  PyObject *__pyx_float_neg_3312281_195;
  PyObject *__pyx_float_neg_4031406_775;
  PyObject *__pyx_float_neg_4081390_495;
  PyObject *__pyx_float_neg_4406117_625;
  PyObject *__pyx_float_neg_4523_276465;
  PyObject *__pyx_float_neg_6391033_598;
  PyObject *__pyx_float_neg_1552_3861601;
  PyObject *__pyx_float_neg_2287_7288762;
  PyObject *__pyx_float_neg_1115_33066401;
  PyObject *__pyx_float_neg_1247_71393272;
  PyObject *__pyx_float_neg_1286_74897962;
  PyObject *__pyx_float_neg_13311_7921995;
  PyObject *__pyx_float_neg_13410_4657633;
  PyObject *__pyx_float_neg_1514412_39343;
  PyObject *__pyx_float_neg_1835_70351849;
  PyObject *__pyx_float_neg_1839_83541625;
  PyObject *__pyx_float_neg_1890_58842253;
  PyObject *__pyx_float_neg_1898_63491189;
  PyObject *__pyx_float_neg_1944_38014589;
  PyObject *__pyx_float_neg_1949_72727363;
  PyObject *__pyx_float_neg_2021_07707436;
  PyObject *__pyx_float_neg_2268_39597837;
  PyObject *__pyx_float_neg_2311991_47077;
  PyObject *__pyx_float_neg_2339_74662875;
  PyObject *__pyx_float_neg_2362863_83439;
  PyObject *__pyx_float_neg_2541_84281492;
  PyObject *__pyx_float_neg_2611237_43295;
  PyObject *__pyx_float_neg_2789_93851863;
  PyObject *__pyx_float_neg_2813_04236975;
  PyObject *__pyx_float_neg_2826_44236975;
  PyObject *__pyx_float_neg_3054593_52897;
  PyObject *__pyx_float_neg_3088328_86538;
  PyObject *__pyx_float_neg_3235757_57446;
  PyObject *__pyx_float_neg_3664_64123237;
  PyObject *__pyx_float_neg_3926755_41852;
  PyObject *__pyx_float_neg_3936515_41852;
  PyObject *__pyx_float_neg_3964433_22114;
  PyObject *__pyx_float_neg_2_08446637e_03;
  PyObject *__pyx_float_neg_6_34719844e_06;
  PyObject *__pyx_float_neg_6_89076313e_02;
  PyObject *__pyx_float_neg_6_96694385e_06;
  PyObject *__pyx_float_neg_8_70793049eneg_05;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_6;
  PyObject *__pyx_int_7;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_9;
  PyObject *__pyx_int_11;
  PyObject *__pyx_int_12;
  PyObject *__pyx_int_13;
  PyObject *__pyx_int_14;
  PyObject *__pyx_int_15;
  PyObject *__pyx_int_33;
  PyObject *__pyx_int_47;
  PyObject *__pyx_int_neg_2;
  PyObject *__pyx_int_neg_1434600;
  PyObject *__pyx_int_neg_2745900;
  PyObject *__pyx_slice__4;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_slice__24;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__53;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_codeobj__11;
  PyObject *__pyx_codeobj__14;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__16;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__61;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_kp_s_);
  Py_CLEAR(clear_module_state->__pyx_kp_s_37);
  Py_CLEAR(clear_module_state->__pyx_n_s_Acmite);
  Py_CLEAR(clear_module_state->__pyx_n_s_Al);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Al2Si2O5_OH_4);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Al2Si4O10_OH_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Al2SiO5);
  Py_CLEAR(clear_module_state->__pyx_n_s_Al2TiO5);
  Py_CLEAR(clear_module_state->__pyx_n_s_Al6Si2O13);
  Py_CLEAR(clear_module_state->__pyx_n_s_Albite);
  Py_CLEAR(clear_module_state->__pyx_n_s_B);
  Py_CLEAR(clear_module_state->__pyx_n_s_C);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca12Al14O33);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Ca2Al2Si3O10_OH_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca2Al2SiO7);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Ca2Al3Si3O12_OH);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca2B2O5);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca2Fe2O5);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca2SiO4);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca3Al2O6);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca3Al2Si3O12);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca3B2O6);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca3Si2O7);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca3SiO5);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca5Si2C2O13);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ca5Si2CO11);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaAl2O4);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaAl2Si2O8);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaAl2SiO6);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaAl4O7);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CaAl4Si2O10_OH_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaB2O4);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaB4O7);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaFe2O4);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaMgC2O6);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaMgSi2O6);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaSiO3);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaTiO3);
  Py_CLEAR(clear_module_state->__pyx_n_s_CaTiSiO5);
  Py_CLEAR(clear_module_state->__pyx_n_s_CemThermoData);
  Py_CLEAR(clear_module_state->__pyx_n_s_CemThermoData_Cp0);
  Py_CLEAR(clear_module_state->__pyx_n_s_CemThermoData_Hf0);
  Py_CLEAR(clear_module_state->__pyx_n_s_CemThermoData_S0);
  Py_CLEAR(clear_module_state->__pyx_n_s_CemThermoData___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_CemThermoData___repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_CemThermoData___str);
  Py_CLEAR(clear_module_state->__pyx_kp_s_CementPolynomial_Tmin);
  Py_CLEAR(clear_module_state->__pyx_n_s_CementThermoData);
  Py_CLEAR(clear_module_state->__pyx_n_s_CementThermoData_Cp0);
  Py_CLEAR(clear_module_state->__pyx_n_s_CementThermoData_Hf0);
  Py_CLEAR(clear_module_state->__pyx_n_s_CementThermoData_S0);
  Py_CLEAR(clear_module_state->__pyx_n_s_CementThermoData___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_CementThermoData___repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_CementThermoData___str);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cement_New_Tests_csv);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cement_Therm_New2_csv);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cement_csv);
  Py_CLEAR(clear_module_state->__pyx_n_s_Cl);
  Py_CLEAR(clear_module_state->__pyx_n_s_Components);
  Py_CLEAR(clear_module_state->__pyx_n_s_Cp);
  Py_CLEAR(clear_module_state->__pyx_n_s_Cp0);
  Py_CLEAR(clear_module_state->__pyx_n_s_Crystal);
  Py_CLEAR(clear_module_state->__pyx_n_s_Diopside);
  Py_CLEAR(clear_module_state->__pyx_n_s_Dolomite);
  Py_CLEAR(clear_module_state->__pyx_n_s_Enstatite);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Error_for_H_at);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Error_in_Cp);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Error_in_G_Htr_T);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Error_in_H_Hr);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Error_in_S);
  Py_CLEAR(clear_module_state->__pyx_n_s_Exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_Fayalite);
  Py_CLEAR(clear_module_state->__pyx_n_s_Fe);
  Py_CLEAR(clear_module_state->__pyx_n_s_Fe2Si2O6);
  Py_CLEAR(clear_module_state->__pyx_n_s_Fe2SiO4);
  Py_CLEAR(clear_module_state->__pyx_n_s_Fe2TiO4);
  Py_CLEAR(clear_module_state->__pyx_n_s_FeCl3);
  Py_CLEAR(clear_module_state->__pyx_n_s_FeTiO3);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ferrosilite);
  Py_CLEAR(clear_module_state->__pyx_n_s_Gfe);
  Py_CLEAR(clear_module_state->__pyx_n_s_Gfox);
  Py_CLEAR(clear_module_state->__pyx_n_s_Gibbs0);
  Py_CLEAR(clear_module_state->__pyx_n_s_GmHoT);
  Py_CLEAR(clear_module_state->__pyx_n_s_H);
  Py_CLEAR(clear_module_state->__pyx_n_s_H298);
  Py_CLEAR(clear_module_state->__pyx_n_s_H2O);
  Py_CLEAR(clear_module_state->__pyx_n_s_HPThermoData);
  Py_CLEAR(clear_module_state->__pyx_n_s_HPThermoData_Cp0);
  Py_CLEAR(clear_module_state->__pyx_n_s_HPThermoData_Hf0);
  Py_CLEAR(clear_module_state->__pyx_n_s_HPThermoData_S0);
  Py_CLEAR(clear_module_state->__pyx_n_s_HPThermoData___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_HPThermoData___repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_HPThermoData___str);
  Py_CLEAR(clear_module_state->__pyx_kp_s_HT_H298);
  Py_CLEAR(clear_module_state->__pyx_n_s_HTmH298);
  Py_CLEAR(clear_module_state->__pyx_n_s_Hf0);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Hf0_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Hfe);
  Py_CLEAR(clear_module_state->__pyx_n_s_Hfox);
  Py_CLEAR(clear_module_state->__pyx_n_s_HmHr);
  Py_CLEAR(clear_module_state->__pyx_n_s_Htr);
  Py_CLEAR(clear_module_state->__pyx_n_s_Jadeite);
  Py_CLEAR(clear_module_state->__pyx_n_s_K);
  Py_CLEAR(clear_module_state->__pyx_kp_s_K3Fe0_5Al4Si19_5O47);
  Py_CLEAR(clear_module_state->__pyx_kp_s_K3Mg0_5Al4Si19_5O47);
  Py_CLEAR(clear_module_state->__pyx_n_s_KAlSi3O8);
  Py_CLEAR(clear_module_state->__pyx_kp_s_K_of);
  Py_CLEAR(clear_module_state->__pyx_n_s_Li);
  Py_CLEAR(clear_module_state->__pyx_n_s_Li2TiO3);
  Py_CLEAR(clear_module_state->__pyx_n_s_Liquid);
  Py_CLEAR(clear_module_state->__pyx_n_s_Mg);
  Py_CLEAR(clear_module_state->__pyx_n_s_Mg2Si2O6);
  Py_CLEAR(clear_module_state->__pyx_n_s_Mg2SiO4);
  Py_CLEAR(clear_module_state->__pyx_n_s_MgFe2O4);
  Py_CLEAR(clear_module_state->__pyx_n_s_Mullite);
  Py_CLEAR(clear_module_state->__pyx_n_s_MulliteThermoData);
  Py_CLEAR(clear_module_state->__pyx_n_s_MulliteThermoData_Cp0);
  Py_CLEAR(clear_module_state->__pyx_n_s_MulliteThermoData_Hf0);
  Py_CLEAR(clear_module_state->__pyx_n_s_MulliteThermoData_S0);
  Py_CLEAR(clear_module_state->__pyx_n_s_MulliteThermoData___init);
  Py_CLEAR(clear_module_state->__pyx_n_s_MulliteThermoData___repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_MulliteThermoData___str);
  Py_CLEAR(clear_module_state->__pyx_n_s_NA);
  Py_CLEAR(clear_module_state->__pyx_n_s_NASAdata);
  Py_CLEAR(clear_module_state->__pyx_n_s_Na);
  Py_CLEAR(clear_module_state->__pyx_n_s_Na2TiO3);
  Py_CLEAR(clear_module_state->__pyx_n_s_NaAlSi2O6);
  Py_CLEAR(clear_module_state->__pyx_n_s_NaAlSi3O8);
  Py_CLEAR(clear_module_state->__pyx_n_s_NaFeSi2O6);
  Py_CLEAR(clear_module_state->__pyx_kp_s_NistData_csv);
  Py_CLEAR(clear_module_state->__pyx_n_s_O);
  Py_CLEAR(clear_module_state->__pyx_n_s_S);
  Py_CLEAR(clear_module_state->__pyx_n_s_S0);
  Py_CLEAR(clear_module_state->__pyx_kp_s_S0_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_S298);
  Py_CLEAR(clear_module_state->__pyx_n_s_STmS298);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sanidine);
  Py_CLEAR(clear_module_state->__pyx_n_s_Si);
  Py_CLEAR(clear_module_state->__pyx_n_s_Spurrite);
  Py_CLEAR(clear_module_state->__pyx_n_s_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_Testfile);
  Py_CLEAR(clear_module_state->__pyx_n_s_Testreader);
  Py_CLEAR(clear_module_state->__pyx_n_s_Testrow);
  Py_CLEAR(clear_module_state->__pyx_n_s_ThermoConstantsType);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ti);
  Py_CLEAR(clear_module_state->__pyx_n_s_TiS2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Tilleyite);
  Py_CLEAR(clear_module_state->__pyx_n_s_Tmax);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Tmax_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_Tmin);
  Py_CLEAR(clear_module_state->__pyx_n_s_V0);
  Py_CLEAR(clear_module_state->__pyx_n_s_Validate_Cem);
  Py_CLEAR(clear_module_state->__pyx_n_s_Validate_NIST_Data);
  Py_CLEAR(clear_module_state->__pyx_n_s_Zn);
  Py_CLEAR(clear_module_state->__pyx_n_s_Zn2TiO4);
  Py_CLEAR(clear_module_state->__pyx_kp_s__2);
  Py_CLEAR(clear_module_state->__pyx_kp_s__22);
  Py_CLEAR(clear_module_state->__pyx_kp_s__23);
  Py_CLEAR(clear_module_state->__pyx_kp_s__3);
  Py_CLEAR(clear_module_state->__pyx_kp_s__5);
  Py_CLEAR(clear_module_state->__pyx_kp_s__6);
  Py_CLEAR(clear_module_state->__pyx_n_s__64);
  Py_CLEAR(clear_module_state->__pyx_kp_s__7);
  Py_CLEAR(clear_module_state->__pyx_n_s__8);
  Py_CLEAR(clear_module_state->__pyx_n_s_a);
  Py_CLEAR(clear_module_state->__pyx_kp_s_a_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_chemeng);
  Py_CLEAR(clear_module_state->__pyx_n_s_chemeng_NASAdata);
  Py_CLEAR(clear_module_state->__pyx_n_s_chemeng_cementdata);
  Py_CLEAR(clear_module_state->__pyx_n_s_chemeng_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_comments);
  Py_CLEAR(clear_module_state->__pyx_n_s_config);
  Py_CLEAR(clear_module_state->__pyx_n_s_constants);
  Py_CLEAR(clear_module_state->__pyx_n_s_csv);
  Py_CLEAR(clear_module_state->__pyx_n_s_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_datadir);
  Py_CLEAR(clear_module_state->__pyx_n_s_datafile);
  Py_CLEAR(clear_module_state->__pyx_n_s_delimiter);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_e);
  Py_CLEAR(clear_module_state->__pyx_n_s_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_enter);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_exit);
  Py_CLEAR(clear_module_state->__pyx_n_s_fabs);
  Py_CLEAR(clear_module_state->__pyx_n_s_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_filter);
  Py_CLEAR(clear_module_state->__pyx_n_s_highAlbite);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_join);
  Py_CLEAR(clear_module_state->__pyx_n_s_lambda);
  Py_CLEAR(clear_module_state->__pyx_n_s_log);
  Py_CLEAR(clear_module_state->__pyx_n_s_logkfe);
  Py_CLEAR(clear_module_state->__pyx_n_s_logkfox);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_map);
  Py_CLEAR(clear_module_state->__pyx_n_s_math);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_mro_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_next);
  Py_CLEAR(clear_module_state->__pyx_n_s_notes);
  Py_CLEAR(clear_module_state->__pyx_kp_s_notes_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_open);
  Py_CLEAR(clear_module_state->__pyx_n_s_os);
  Py_CLEAR(clear_module_state->__pyx_n_s_path);
  Py_CLEAR(clear_module_state->__pyx_kp_s_percent);
  Py_CLEAR(clear_module_state->__pyx_n_s_percent_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_phase);
  Py_CLEAR(clear_module_state->__pyx_n_s_phases);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_quotechar);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_rb);
  Py_CLEAR(clear_module_state->__pyx_n_s_reader);
  Py_CLEAR(clear_module_state->__pyx_n_s_registerPhase);
  Py_CLEAR(clear_module_state->__pyx_n_s_registerPhaseCoeffs);
  Py_CLEAR(clear_module_state->__pyx_n_s_registerSpecies);
  Py_CLEAR(clear_module_state->__pyx_n_s_repr);
  Py_CLEAR(clear_module_state->__pyx_n_s_retval);
  Py_CLEAR(clear_module_state->__pyx_n_s_row);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_species);
  Py_CLEAR(clear_module_state->__pyx_n_s_speciesData);
  Py_CLEAR(clear_module_state->__pyx_kp_s_src_chemeng_cementdata_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_strip);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_5);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_2_0);
  Py_CLEAR(clear_module_state->__pyx_float_3_0);
  Py_CLEAR(clear_module_state->__pyx_float_4_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_03);
  Py_CLEAR(clear_module_state->__pyx_float_19_5);
  Py_CLEAR(clear_module_state->__pyx_float_100_0);
  Py_CLEAR(clear_module_state->__pyx_float_201_1);
  Py_CLEAR(clear_module_state->__pyx_float_237_6);
  Py_CLEAR(clear_module_state->__pyx_float_239_7);
  Py_CLEAR(clear_module_state->__pyx_float_267_9);
  Py_CLEAR(clear_module_state->__pyx_float_298_0);
  Py_CLEAR(clear_module_state->__pyx_float_301_1);
  Py_CLEAR(clear_module_state->__pyx_float_307_1);
  Py_CLEAR(clear_module_state->__pyx_float_314_5);
  Py_CLEAR(clear_module_state->__pyx_float_345_3);
  Py_CLEAR(clear_module_state->__pyx_float_354_9);
  Py_CLEAR(clear_module_state->__pyx_float_356_2);
  Py_CLEAR(clear_module_state->__pyx_float_358_5);
  Py_CLEAR(clear_module_state->__pyx_float_358_9);
  Py_CLEAR(clear_module_state->__pyx_float_367_3);
  Py_CLEAR(clear_module_state->__pyx_float_398_7);
  Py_CLEAR(clear_module_state->__pyx_float_417_5);
  Py_CLEAR(clear_module_state->__pyx_float_448_8);
  Py_CLEAR(clear_module_state->__pyx_float_452_0);
  Py_CLEAR(clear_module_state->__pyx_float_614_1);
  Py_CLEAR(clear_module_state->__pyx_float_741_7);
  Py_CLEAR(clear_module_state->__pyx_float_2000_0);
  Py_CLEAR(clear_module_state->__pyx_float_2375_0);
  Py_CLEAR(clear_module_state->__pyx_float_2386_0);
  Py_CLEAR(clear_module_state->__pyx_float_298_15);
  Py_CLEAR(clear_module_state->__pyx_float_0_01733);
  Py_CLEAR(clear_module_state->__pyx_float_0_000041);
  Py_CLEAR(clear_module_state->__pyx_float_0_010143);
  Py_CLEAR(clear_module_state->__pyx_float_0_016758);
  Py_CLEAR(clear_module_state->__pyx_float_1290100_0);
  Py_CLEAR(clear_module_state->__pyx_float_1_30438133eneg_01);
  Py_CLEAR(clear_module_state->__pyx_float_3_77248082e_02);
  Py_CLEAR(clear_module_state->__pyx_float_neg_0_5);
  Py_CLEAR(clear_module_state->__pyx_float_neg_900_9);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2020_1);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2055_1);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2125_8);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3185_3);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3456_2);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3953_6);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3973_1);
  Py_CLEAR(clear_module_state->__pyx_float_neg_4058_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_4168_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_5878_5);
  Py_CLEAR(clear_module_state->__pyx_float_neg_0_002990);
  Py_CLEAR(clear_module_state->__pyx_float_neg_0_003508);
  Py_CLEAR(clear_module_state->__pyx_float_neg_0_004905);
  Py_CLEAR(clear_module_state->__pyx_float_neg_0_005345);
  Py_CLEAR(clear_module_state->__pyx_float_neg_0_006579);
  Py_CLEAR(clear_module_state->__pyx_float_neg_0_010075);
  Py_CLEAR(clear_module_state->__pyx_float_neg_0_013364);
  Py_CLEAR(clear_module_state->__pyx_float_neg_596900_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1007300_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1275900_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1685500_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1960600_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2239300_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2493100_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_5897053_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_23819995_9);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2576200_44);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1506736_555);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2242104_385);
  Py_CLEAR(clear_module_state->__pyx_float_neg_23632876_25);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3191463_435);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3312281_195);
  Py_CLEAR(clear_module_state->__pyx_float_neg_4031406_775);
  Py_CLEAR(clear_module_state->__pyx_float_neg_4081390_495);
  Py_CLEAR(clear_module_state->__pyx_float_neg_4406117_625);
  Py_CLEAR(clear_module_state->__pyx_float_neg_4523_276465);
  Py_CLEAR(clear_module_state->__pyx_float_neg_6391033_598);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1552_3861601);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2287_7288762);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1115_33066401);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1247_71393272);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1286_74897962);
  Py_CLEAR(clear_module_state->__pyx_float_neg_13311_7921995);
  Py_CLEAR(clear_module_state->__pyx_float_neg_13410_4657633);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1514412_39343);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1835_70351849);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1839_83541625);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1890_58842253);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1898_63491189);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1944_38014589);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1949_72727363);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2021_07707436);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2268_39597837);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2311991_47077);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2339_74662875);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2362863_83439);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2541_84281492);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2611237_43295);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2789_93851863);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2813_04236975);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2826_44236975);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3054593_52897);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3088328_86538);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3235757_57446);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3664_64123237);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3926755_41852);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3936515_41852);
  Py_CLEAR(clear_module_state->__pyx_float_neg_3964433_22114);
  Py_CLEAR(clear_module_state->__pyx_float_neg_2_08446637e_03);
  Py_CLEAR(clear_module_state->__pyx_float_neg_6_34719844e_06);
  Py_CLEAR(clear_module_state->__pyx_float_neg_6_89076313e_02);
  Py_CLEAR(clear_module_state->__pyx_float_neg_6_96694385e_06);
  Py_CLEAR(clear_module_state->__pyx_float_neg_8_70793049eneg_05);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_6);
  Py_CLEAR(clear_module_state->__pyx_int_7);
  Py_CLEAR(clear_module_state->__pyx_int_8);
  Py_CLEAR(clear_module_state->__pyx_int_9);
  Py_CLEAR(clear_module_state->__pyx_int_11);
  Py_CLEAR(clear_module_state->__pyx_int_12);
  Py_CLEAR(clear_module_state->__pyx_int_13);
  Py_CLEAR(clear_module_state->__pyx_int_14);
  Py_CLEAR(clear_module_state->__pyx_int_15);
  Py_CLEAR(clear_module_state->__pyx_int_33);
  Py_CLEAR(clear_module_state->__pyx_int_47);
  Py_CLEAR(clear_module_state->__pyx_int_neg_2);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1434600);
  Py_CLEAR(clear_module_state->__pyx_int_neg_2745900);
  Py_CLEAR(clear_module_state->__pyx_slice__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_slice__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__49);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__53);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__11);
  Py_CLEAR(clear_module_state->__pyx_codeobj__14);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__16);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_kp_s_);
  Py_VISIT(traverse_module_state->__pyx_kp_s_37);
  Py_VISIT(traverse_module_state->__pyx_n_s_Acmite);
  Py_VISIT(traverse_module_state->__pyx_n_s_Al);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Al2Si2O5_OH_4);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Al2Si4O10_OH_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Al2SiO5);
  Py_VISIT(traverse_module_state->__pyx_n_s_Al2TiO5);
  Py_VISIT(traverse_module_state->__pyx_n_s_Al6Si2O13);
  Py_VISIT(traverse_module_state->__pyx_n_s_Albite);
  Py_VISIT(traverse_module_state->__pyx_n_s_B);
  Py_VISIT(traverse_module_state->__pyx_n_s_C);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca12Al14O33);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Ca2Al2Si3O10_OH_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca2Al2SiO7);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Ca2Al3Si3O12_OH);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca2B2O5);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca2Fe2O5);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca2SiO4);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca3Al2O6);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca3Al2Si3O12);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca3B2O6);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca3Si2O7);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca3SiO5);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca5Si2C2O13);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ca5Si2CO11);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaAl2O4);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaAl2Si2O8);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaAl2SiO6);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaAl4O7);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CaAl4Si2O10_OH_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaB2O4);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaB4O7);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaFe2O4);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaMgC2O6);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaMgSi2O6);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaSiO3);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaTiO3);
  Py_VISIT(traverse_module_state->__pyx_n_s_CaTiSiO5);
  Py_VISIT(traverse_module_state->__pyx_n_s_CemThermoData);
  Py_VISIT(traverse_module_state->__pyx_n_s_CemThermoData_Cp0);
  Py_VISIT(traverse_module_state->__pyx_n_s_CemThermoData_Hf0);
  Py_VISIT(traverse_module_state->__pyx_n_s_CemThermoData_S0);
  Py_VISIT(traverse_module_state->__pyx_n_s_CemThermoData___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_CemThermoData___repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_CemThermoData___str);
  Py_VISIT(traverse_module_state->__pyx_kp_s_CementPolynomial_Tmin);
  Py_VISIT(traverse_module_state->__pyx_n_s_CementThermoData);
  Py_VISIT(traverse_module_state->__pyx_n_s_CementThermoData_Cp0);
  Py_VISIT(traverse_module_state->__pyx_n_s_CementThermoData_Hf0);
  Py_VISIT(traverse_module_state->__pyx_n_s_CementThermoData_S0);
  Py_VISIT(traverse_module_state->__pyx_n_s_CementThermoData___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_CementThermoData___repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_CementThermoData___str);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cement_New_Tests_csv);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cement_Therm_New2_csv);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cement_csv);
  Py_VISIT(traverse_module_state->__pyx_n_s_Cl);
  Py_VISIT(traverse_module_state->__pyx_n_s_Components);
  Py_VISIT(traverse_module_state->__pyx_n_s_Cp);
  Py_VISIT(traverse_module_state->__pyx_n_s_Cp0);
  Py_VISIT(traverse_module_state->__pyx_n_s_Crystal);
  Py_VISIT(traverse_module_state->__pyx_n_s_Diopside);
  Py_VISIT(traverse_module_state->__pyx_n_s_Dolomite);
  Py_VISIT(traverse_module_state->__pyx_n_s_Enstatite);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Error_for_H_at);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Error_in_Cp);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Error_in_G_Htr_T);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Error_in_H_Hr);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Error_in_S);
  Py_VISIT(traverse_module_state->__pyx_n_s_Exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_Fayalite);
  Py_VISIT(traverse_module_state->__pyx_n_s_Fe);
  Py_VISIT(traverse_module_state->__pyx_n_s_Fe2Si2O6);
  Py_VISIT(traverse_module_state->__pyx_n_s_Fe2SiO4);
  Py_VISIT(traverse_module_state->__pyx_n_s_Fe2TiO4);
  Py_VISIT(traverse_module_state->__pyx_n_s_FeCl3);
  Py_VISIT(traverse_module_state->__pyx_n_s_FeTiO3);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ferrosilite);
  Py_VISIT(traverse_module_state->__pyx_n_s_Gfe);
  Py_VISIT(traverse_module_state->__pyx_n_s_Gfox);
  Py_VISIT(traverse_module_state->__pyx_n_s_Gibbs0);
  Py_VISIT(traverse_module_state->__pyx_n_s_GmHoT);
  Py_VISIT(traverse_module_state->__pyx_n_s_H);
  Py_VISIT(traverse_module_state->__pyx_n_s_H298);
  Py_VISIT(traverse_module_state->__pyx_n_s_H2O);
  Py_VISIT(traverse_module_state->__pyx_n_s_HPThermoData);
  Py_VISIT(traverse_module_state->__pyx_n_s_HPThermoData_Cp0);
  Py_VISIT(traverse_module_state->__pyx_n_s_HPThermoData_Hf0);
  Py_VISIT(traverse_module_state->__pyx_n_s_HPThermoData_S0);
  Py_VISIT(traverse_module_state->__pyx_n_s_HPThermoData___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_HPThermoData___repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_HPThermoData___str);
  Py_VISIT(traverse_module_state->__pyx_kp_s_HT_H298);
  Py_VISIT(traverse_module_state->__pyx_n_s_HTmH298);
  Py_VISIT(traverse_module_state->__pyx_n_s_Hf0);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Hf0_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Hfe);
  Py_VISIT(traverse_module_state->__pyx_n_s_Hfox);
  Py_VISIT(traverse_module_state->__pyx_n_s_HmHr);
  Py_VISIT(traverse_module_state->__pyx_n_s_Htr);
  Py_VISIT(traverse_module_state->__pyx_n_s_Jadeite);
  Py_VISIT(traverse_module_state->__pyx_n_s_K);
  Py_VISIT(traverse_module_state->__pyx_kp_s_K3Fe0_5Al4Si19_5O47);
  Py_VISIT(traverse_module_state->__pyx_kp_s_K3Mg0_5Al4Si19_5O47);
  Py_VISIT(traverse_module_state->__pyx_n_s_KAlSi3O8);
  Py_VISIT(traverse_module_state->__pyx_kp_s_K_of);
  Py_VISIT(traverse_module_state->__pyx_n_s_Li);
  Py_VISIT(traverse_module_state->__pyx_n_s_Li2TiO3);
  Py_VISIT(traverse_module_state->__pyx_n_s_Liquid);
  Py_VISIT(traverse_module_state->__pyx_n_s_Mg);
  Py_VISIT(traverse_module_state->__pyx_n_s_Mg2Si2O6);
  Py_VISIT(traverse_module_state->__pyx_n_s_Mg2SiO4);
  Py_VISIT(traverse_module_state->__pyx_n_s_MgFe2O4);
  Py_VISIT(traverse_module_state->__pyx_n_s_Mullite);
  Py_VISIT(traverse_module_state->__pyx_n_s_MulliteThermoData);
  Py_VISIT(traverse_module_state->__pyx_n_s_MulliteThermoData_Cp0);
  Py_VISIT(traverse_module_state->__pyx_n_s_MulliteThermoData_Hf0);
  Py_VISIT(traverse_module_state->__pyx_n_s_MulliteThermoData_S0);
  Py_VISIT(traverse_module_state->__pyx_n_s_MulliteThermoData___init);
  Py_VISIT(traverse_module_state->__pyx_n_s_MulliteThermoData___repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_MulliteThermoData___str);
  Py_VISIT(traverse_module_state->__pyx_n_s_NA);
  Py_VISIT(traverse_module_state->__pyx_n_s_NASAdata);
  Py_VISIT(traverse_module_state->__pyx_n_s_Na);
  Py_VISIT(traverse_module_state->__pyx_n_s_Na2TiO3);
  Py_VISIT(traverse_module_state->__pyx_n_s_NaAlSi2O6);
  Py_VISIT(traverse_module_state->__pyx_n_s_NaAlSi3O8);
  Py_VISIT(traverse_module_state->__pyx_n_s_NaFeSi2O6);
  Py_VISIT(traverse_module_state->__pyx_kp_s_NistData_csv);
  Py_VISIT(traverse_module_state->__pyx_n_s_O);
  Py_VISIT(traverse_module_state->__pyx_n_s_S);
  Py_VISIT(traverse_module_state->__pyx_n_s_S0);
  Py_VISIT(traverse_module_state->__pyx_kp_s_S0_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_S298);
  Py_VISIT(traverse_module_state->__pyx_n_s_STmS298);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sanidine);
  Py_VISIT(traverse_module_state->__pyx_n_s_Si);
  Py_VISIT(traverse_module_state->__pyx_n_s_Spurrite);
  Py_VISIT(traverse_module_state->__pyx_n_s_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_Testfile);
  Py_VISIT(traverse_module_state->__pyx_n_s_Testreader);
  Py_VISIT(traverse_module_state->__pyx_n_s_Testrow);
  Py_VISIT(traverse_module_state->__pyx_n_s_ThermoConstantsType);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ti);
  Py_VISIT(traverse_module_state->__pyx_n_s_TiS2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Tilleyite);
  Py_VISIT(traverse_module_state->__pyx_n_s_Tmax);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Tmax_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_Tmin);
  Py_VISIT(traverse_module_state->__pyx_n_s_V0);
  Py_VISIT(traverse_module_state->__pyx_n_s_Validate_Cem);
  Py_VISIT(traverse_module_state->__pyx_n_s_Validate_NIST_Data);
  Py_VISIT(traverse_module_state->__pyx_n_s_Zn);
  Py_VISIT(traverse_module_state->__pyx_n_s_Zn2TiO4);
  Py_VISIT(traverse_module_state->__pyx_kp_s__2);
  Py_VISIT(traverse_module_state->__pyx_kp_s__22);
  Py_VISIT(traverse_module_state->__pyx_kp_s__23);
  Py_VISIT(traverse_module_state->__pyx_kp_s__3);
  Py_VISIT(traverse_module_state->__pyx_kp_s__5);
  Py_VISIT(traverse_module_state->__pyx_kp_s__6);
  Py_VISIT(traverse_module_state->__pyx_n_s__64);
  Py_VISIT(traverse_module_state->__pyx_kp_s__7);
  Py_VISIT(traverse_module_state->__pyx_n_s__8);
  Py_VISIT(traverse_module_state->__pyx_n_s_a);
  Py_VISIT(traverse_module_state->__pyx_kp_s_a_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_chemeng);
  Py_VISIT(traverse_module_state->__pyx_n_s_chemeng_NASAdata);
  Py_VISIT(traverse_module_state->__pyx_n_s_chemeng_cementdata);
  Py_VISIT(traverse_module_state->__pyx_n_s_chemeng_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_comments);
  Py_VISIT(traverse_module_state->__pyx_n_s_config);
  Py_VISIT(traverse_module_state->__pyx_n_s_constants);
  Py_VISIT(traverse_module_state->__pyx_n_s_csv);
  Py_VISIT(traverse_module_state->__pyx_n_s_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_datadir);
  Py_VISIT(traverse_module_state->__pyx_n_s_datafile);
  Py_VISIT(traverse_module_state->__pyx_n_s_delimiter);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_e);
  Py_VISIT(traverse_module_state->__pyx_n_s_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_enter);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_exit);
  Py_VISIT(traverse_module_state->__pyx_n_s_fabs);
  Py_VISIT(traverse_module_state->__pyx_n_s_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_filter);
  Py_VISIT(traverse_module_state->__pyx_n_s_highAlbite);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_join);
  Py_VISIT(traverse_module_state->__pyx_n_s_lambda);
  Py_VISIT(traverse_module_state->__pyx_n_s_log);
  Py_VISIT(traverse_module_state->__pyx_n_s_logkfe);
  Py_VISIT(traverse_module_state->__pyx_n_s_logkfox);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_map);
  Py_VISIT(traverse_module_state->__pyx_n_s_math);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_mro_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_next);
  Py_VISIT(traverse_module_state->__pyx_n_s_notes);
  Py_VISIT(traverse_module_state->__pyx_kp_s_notes_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_open);
  Py_VISIT(traverse_module_state->__pyx_n_s_os);
  Py_VISIT(traverse_module_state->__pyx_n_s_path);
  Py_VISIT(traverse_module_state->__pyx_kp_s_percent);
  Py_VISIT(traverse_module_state->__pyx_n_s_percent_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_phase);
  Py_VISIT(traverse_module_state->__pyx_n_s_phases);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_quotechar);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_rb);
  Py_VISIT(traverse_module_state->__pyx_n_s_reader);
  Py_VISIT(traverse_module_state->__pyx_n_s_registerPhase);
  Py_VISIT(traverse_module_state->__pyx_n_s_registerPhaseCoeffs);
  Py_VISIT(traverse_module_state->__pyx_n_s_registerSpecies);
  Py_VISIT(traverse_module_state->__pyx_n_s_repr);
  Py_VISIT(traverse_module_state->__pyx_n_s_retval);
  Py_VISIT(traverse_module_state->__pyx_n_s_row);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_species);
  Py_VISIT(traverse_module_state->__pyx_n_s_speciesData);
  Py_VISIT(traverse_module_state->__pyx_kp_s_src_chemeng_cementdata_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_strip);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_5);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_float_2_0);
  Py_VISIT(traverse_module_state->__pyx_float_3_0);
  Py_VISIT(traverse_module_state->__pyx_float_4_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_03);
  Py_VISIT(traverse_module_state->__pyx_float_19_5);
  Py_VISIT(traverse_module_state->__pyx_float_100_0);
  Py_VISIT(traverse_module_state->__pyx_float_201_1);
  Py_VISIT(traverse_module_state->__pyx_float_237_6);
  Py_VISIT(traverse_module_state->__pyx_float_239_7);
  Py_VISIT(traverse_module_state->__pyx_float_267_9);
  Py_VISIT(traverse_module_state->__pyx_float_298_0);
  Py_VISIT(traverse_module_state->__pyx_float_301_1);
  Py_VISIT(traverse_module_state->__pyx_float_307_1);
  Py_VISIT(traverse_module_state->__pyx_float_314_5);
  Py_VISIT(traverse_module_state->__pyx_float_345_3);
  Py_VISIT(traverse_module_state->__pyx_float_354_9);
  Py_VISIT(traverse_module_state->__pyx_float_356_2);
  Py_VISIT(traverse_module_state->__pyx_float_358_5);
  Py_VISIT(traverse_module_state->__pyx_float_358_9);
  Py_VISIT(traverse_module_state->__pyx_float_367_3);
  Py_VISIT(traverse_module_state->__pyx_float_398_7);
  Py_VISIT(traverse_module_state->__pyx_float_417_5);
  Py_VISIT(traverse_module_state->__pyx_float_448_8);
  Py_VISIT(traverse_module_state->__pyx_float_452_0);
  Py_VISIT(traverse_module_state->__pyx_float_614_1);
  Py_VISIT(traverse_module_state->__pyx_float_741_7);
  Py_VISIT(traverse_module_state->__pyx_float_2000_0);
  Py_VISIT(traverse_module_state->__pyx_float_2375_0);
  Py_VISIT(traverse_module_state->__pyx_float_2386_0);
  Py_VISIT(traverse_module_state->__pyx_float_298_15);
  Py_VISIT(traverse_module_state->__pyx_float_0_01733);
  Py_VISIT(traverse_module_state->__pyx_float_0_000041);
  Py_VISIT(traverse_module_state->__pyx_float_0_010143);
  Py_VISIT(traverse_module_state->__pyx_float_0_016758);
  Py_VISIT(traverse_module_state->__pyx_float_1290100_0);
  Py_VISIT(traverse_module_state->__pyx_float_1_30438133eneg_01);
  Py_VISIT(traverse_module_state->__pyx_float_3_77248082e_02);
  Py_VISIT(traverse_module_state->__pyx_float_neg_0_5);
  Py_VISIT(traverse_module_state->__pyx_float_neg_900_9);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2020_1);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2055_1);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2125_8);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3185_3);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3456_2);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3953_6);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3973_1);
  Py_VISIT(traverse_module_state->__pyx_float_neg_4058_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_4168_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_5878_5);
  Py_VISIT(traverse_module_state->__pyx_float_neg_0_002990);
  Py_VISIT(traverse_module_state->__pyx_float_neg_0_003508);
  Py_VISIT(traverse_module_state->__pyx_float_neg_0_004905);
  Py_VISIT(traverse_module_state->__pyx_float_neg_0_005345);
  Py_VISIT(traverse_module_state->__pyx_float_neg_0_006579);
  Py_VISIT(traverse_module_state->__pyx_float_neg_0_010075);
  Py_VISIT(traverse_module_state->__pyx_float_neg_0_013364);
  Py_VISIT(traverse_module_state->__pyx_float_neg_596900_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1007300_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1275900_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1685500_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1960600_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2239300_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2493100_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_5897053_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_23819995_9);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2576200_44);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1506736_555);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2242104_385);
  Py_VISIT(traverse_module_state->__pyx_float_neg_23632876_25);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3191463_435);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3312281_195);
  Py_VISIT(traverse_module_state->__pyx_float_neg_4031406_775);
  Py_VISIT(traverse_module_state->__pyx_float_neg_4081390_495);
  Py_VISIT(traverse_module_state->__pyx_float_neg_4406117_625);
  Py_VISIT(traverse_module_state->__pyx_float_neg_4523_276465);
  Py_VISIT(traverse_module_state->__pyx_float_neg_6391033_598);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1552_3861601);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2287_7288762);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1115_33066401);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1247_71393272);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1286_74897962);
  Py_VISIT(traverse_module_state->__pyx_float_neg_13311_7921995);
  Py_VISIT(traverse_module_state->__pyx_float_neg_13410_4657633);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1514412_39343);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1835_70351849);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1839_83541625);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1890_58842253);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1898_63491189);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1944_38014589);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1949_72727363);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2021_07707436);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2268_39597837);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2311991_47077);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2339_74662875);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2362863_83439);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2541_84281492);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2611237_43295);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2789_93851863);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2813_04236975);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2826_44236975);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3054593_52897);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3088328_86538);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3235757_57446);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3664_64123237);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3926755_41852);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3936515_41852);
  Py_VISIT(traverse_module_state->__pyx_float_neg_3964433_22114);
  Py_VISIT(traverse_module_state->__pyx_float_neg_2_08446637e_03);
  Py_VISIT(traverse_module_state->__pyx_float_neg_6_34719844e_06);
  Py_VISIT(traverse_module_state->__pyx_float_neg_6_89076313e_02);
  Py_VISIT(traverse_module_state->__pyx_float_neg_6_96694385e_06);
  Py_VISIT(traverse_module_state->__pyx_float_neg_8_70793049eneg_05);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_5);
  Py_VISIT(traverse_module_state->__pyx_int_6);
  Py_VISIT(traverse_module_state->__pyx_int_7);
  Py_VISIT(traverse_module_state->__pyx_int_8);
  Py_VISIT(traverse_module_state->__pyx_int_9);
  Py_VISIT(traverse_module_state->__pyx_int_11);
  Py_VISIT(traverse_module_state->__pyx_int_12);
  Py_VISIT(traverse_module_state->__pyx_int_13);
  Py_VISIT(traverse_module_state->__pyx_int_14);
  Py_VISIT(traverse_module_state->__pyx_int_15);
  Py_VISIT(traverse_module_state->__pyx_int_33);
  Py_VISIT(traverse_module_state->__pyx_int_47);
  Py_VISIT(traverse_module_state->__pyx_int_neg_2);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1434600);
  Py_VISIT(traverse_module_state->__pyx_int_neg_2745900);
  Py_VISIT(traverse_module_state->__pyx_slice__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_slice__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__49);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__53);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__11);
  Py_VISIT(traverse_module_state->__pyx_codeobj__14);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__16);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_kp_s_ __pyx_mstate_global->__pyx_kp_s_
#define __pyx_kp_s_37 __pyx_mstate_global->__pyx_kp_s_37
#define __pyx_n_s_Acmite __pyx_mstate_global->__pyx_n_s_Acmite
#define __pyx_n_s_Al __pyx_mstate_global->__pyx_n_s_Al
#define __pyx_kp_s_Al2Si2O5_OH_4 __pyx_mstate_global->__pyx_kp_s_Al2Si2O5_OH_4
#define __pyx_kp_s_Al2Si4O10_OH_2 __pyx_mstate_global->__pyx_kp_s_Al2Si4O10_OH_2
#define __pyx_n_s_Al2SiO5 __pyx_mstate_global->__pyx_n_s_Al2SiO5
#define __pyx_n_s_Al2TiO5 __pyx_mstate_global->__pyx_n_s_Al2TiO5
#define __pyx_n_s_Al6Si2O13 __pyx_mstate_global->__pyx_n_s_Al6Si2O13
#define __pyx_n_s_Albite __pyx_mstate_global->__pyx_n_s_Albite
#define __pyx_n_s_B __pyx_mstate_global->__pyx_n_s_B
#define __pyx_n_s_C __pyx_mstate_global->__pyx_n_s_C
#define __pyx_n_s_Ca __pyx_mstate_global->__pyx_n_s_Ca
#define __pyx_n_s_Ca12Al14O33 __pyx_mstate_global->__pyx_n_s_Ca12Al14O33
#define __pyx_kp_s_Ca2Al2Si3O10_OH_2 __pyx_mstate_global->__pyx_kp_s_Ca2Al2Si3O10_OH_2
#define __pyx_n_s_Ca2Al2SiO7 __pyx_mstate_global->__pyx_n_s_Ca2Al2SiO7
#define __pyx_kp_s_Ca2Al3Si3O12_OH __pyx_mstate_global->__pyx_kp_s_Ca2Al3Si3O12_OH
#define __pyx_n_s_Ca2B2O5 __pyx_mstate_global->__pyx_n_s_Ca2B2O5
#define __pyx_n_s_Ca2Fe2O5 __pyx_mstate_global->__pyx_n_s_Ca2Fe2O5
#define __pyx_n_s_Ca2SiO4 __pyx_mstate_global->__pyx_n_s_Ca2SiO4
#define __pyx_n_s_Ca3Al2O6 __pyx_mstate_global->__pyx_n_s_Ca3Al2O6
#define __pyx_n_s_Ca3Al2Si3O12 __pyx_mstate_global->__pyx_n_s_Ca3Al2Si3O12
#define __pyx_n_s_Ca3B2O6 __pyx_mstate_global->__pyx_n_s_Ca3B2O6
#define __pyx_n_s_Ca3Si2O7 __pyx_mstate_global->__pyx_n_s_Ca3Si2O7
#define __pyx_n_s_Ca3SiO5 __pyx_mstate_global->__pyx_n_s_Ca3SiO5
#define __pyx_n_s_Ca5Si2C2O13 __pyx_mstate_global->__pyx_n_s_Ca5Si2C2O13
#define __pyx_n_s_Ca5Si2CO11 __pyx_mstate_global->__pyx_n_s_Ca5Si2CO11
#define __pyx_n_s_CaAl2O4 __pyx_mstate_global->__pyx_n_s_CaAl2O4
#define __pyx_n_s_CaAl2Si2O8 __pyx_mstate_global->__pyx_n_s_CaAl2Si2O8
#define __pyx_n_s_CaAl2SiO6 __pyx_mstate_global->__pyx_n_s_CaAl2SiO6
#define __pyx_n_s_CaAl4O7 __pyx_mstate_global->__pyx_n_s_CaAl4O7
#define __pyx_kp_s_CaAl4Si2O10_OH_2 __pyx_mstate_global->__pyx_kp_s_CaAl4Si2O10_OH_2
#define __pyx_n_s_CaB2O4 __pyx_mstate_global->__pyx_n_s_CaB2O4
#define __pyx_n_s_CaB4O7 __pyx_mstate_global->__pyx_n_s_CaB4O7
#define __pyx_n_s_CaFe2O4 __pyx_mstate_global->__pyx_n_s_CaFe2O4
#define __pyx_n_s_CaMgC2O6 __pyx_mstate_global->__pyx_n_s_CaMgC2O6
#define __pyx_n_s_CaMgSi2O6 __pyx_mstate_global->__pyx_n_s_CaMgSi2O6
#define __pyx_n_s_CaSiO3 __pyx_mstate_global->__pyx_n_s_CaSiO3
#define __pyx_n_s_CaTiO3 __pyx_mstate_global->__pyx_n_s_CaTiO3
#define __pyx_n_s_CaTiSiO5 __pyx_mstate_global->__pyx_n_s_CaTiSiO5
#define __pyx_n_s_CemThermoData __pyx_mstate_global->__pyx_n_s_CemThermoData
#define __pyx_n_s_CemThermoData_Cp0 __pyx_mstate_global->__pyx_n_s_CemThermoData_Cp0
#define __pyx_n_s_CemThermoData_Hf0 __pyx_mstate_global->__pyx_n_s_CemThermoData_Hf0
#define __pyx_n_s_CemThermoData_S0 __pyx_mstate_global->__pyx_n_s_CemThermoData_S0
#define __pyx_n_s_CemThermoData___init __pyx_mstate_global->__pyx_n_s_CemThermoData___init
#define __pyx_n_s_CemThermoData___repr __pyx_mstate_global->__pyx_n_s_CemThermoData___repr
#define __pyx_n_s_CemThermoData___str __pyx_mstate_global->__pyx_n_s_CemThermoData___str
#define __pyx_kp_s_CementPolynomial_Tmin __pyx_mstate_global->__pyx_kp_s_CementPolynomial_Tmin
#define __pyx_n_s_CementThermoData __pyx_mstate_global->__pyx_n_s_CementThermoData
#define __pyx_n_s_CementThermoData_Cp0 __pyx_mstate_global->__pyx_n_s_CementThermoData_Cp0
#define __pyx_n_s_CementThermoData_Hf0 __pyx_mstate_global->__pyx_n_s_CementThermoData_Hf0
#define __pyx_n_s_CementThermoData_S0 __pyx_mstate_global->__pyx_n_s_CementThermoData_S0
#define __pyx_n_s_CementThermoData___init __pyx_mstate_global->__pyx_n_s_CementThermoData___init
#define __pyx_n_s_CementThermoData___repr __pyx_mstate_global->__pyx_n_s_CementThermoData___repr
#define __pyx_n_s_CementThermoData___str __pyx_mstate_global->__pyx_n_s_CementThermoData___str
#define __pyx_kp_s_Cement_New_Tests_csv __pyx_mstate_global->__pyx_kp_s_Cement_New_Tests_csv
#define __pyx_kp_s_Cement_Therm_New2_csv __pyx_mstate_global->__pyx_kp_s_Cement_Therm_New2_csv
#define __pyx_kp_s_Cement_csv __pyx_mstate_global->__pyx_kp_s_Cement_csv
#define __pyx_n_s_Cl __pyx_mstate_global->__pyx_n_s_Cl
#define __pyx_n_s_Components __pyx_mstate_global->__pyx_n_s_Components
#define __pyx_n_s_Cp __pyx_mstate_global->__pyx_n_s_Cp
#define __pyx_n_s_Cp0 __pyx_mstate_global->__pyx_n_s_Cp0
#define __pyx_n_s_Crystal __pyx_mstate_global->__pyx_n_s_Crystal
#define __pyx_n_s_Diopside __pyx_mstate_global->__pyx_n_s_Diopside
#define __pyx_n_s_Dolomite __pyx_mstate_global->__pyx_n_s_Dolomite
#define __pyx_n_s_Enstatite __pyx_mstate_global->__pyx_n_s_Enstatite
#define __pyx_kp_s_Error_for_H_at __pyx_mstate_global->__pyx_kp_s_Error_for_H_at
#define __pyx_kp_s_Error_in_Cp __pyx_mstate_global->__pyx_kp_s_Error_in_Cp
#define __pyx_kp_s_Error_in_G_Htr_T __pyx_mstate_global->__pyx_kp_s_Error_in_G_Htr_T
#define __pyx_kp_s_Error_in_H_Hr __pyx_mstate_global->__pyx_kp_s_Error_in_H_Hr
#define __pyx_kp_s_Error_in_S __pyx_mstate_global->__pyx_kp_s_Error_in_S
#define __pyx_n_s_Exit __pyx_mstate_global->__pyx_n_s_Exit
#define __pyx_n_s_Fayalite __pyx_mstate_global->__pyx_n_s_Fayalite
#define __pyx_n_s_Fe __pyx_mstate_global->__pyx_n_s_Fe
#define __pyx_n_s_Fe2Si2O6 __pyx_mstate_global->__pyx_n_s_Fe2Si2O6
#define __pyx_n_s_Fe2SiO4 __pyx_mstate_global->__pyx_n_s_Fe2SiO4
#define __pyx_n_s_Fe2TiO4 __pyx_mstate_global->__pyx_n_s_Fe2TiO4
#define __pyx_n_s_FeCl3 __pyx_mstate_global->__pyx_n_s_FeCl3
#define __pyx_n_s_FeTiO3 __pyx_mstate_global->__pyx_n_s_FeTiO3
#define __pyx_n_s_Ferrosilite __pyx_mstate_global->__pyx_n_s_Ferrosilite
#define __pyx_n_s_Gfe __pyx_mstate_global->__pyx_n_s_Gfe
#define __pyx_n_s_Gfox __pyx_mstate_global->__pyx_n_s_Gfox
#define __pyx_n_s_Gibbs0 __pyx_mstate_global->__pyx_n_s_Gibbs0
#define __pyx_n_s_GmHoT __pyx_mstate_global->__pyx_n_s_GmHoT
#define __pyx_n_s_H __pyx_mstate_global->__pyx_n_s_H
#define __pyx_n_s_H298 __pyx_mstate_global->__pyx_n_s_H298
#define __pyx_n_s_H2O __pyx_mstate_global->__pyx_n_s_H2O
#define __pyx_n_s_HPThermoData __pyx_mstate_global->__pyx_n_s_HPThermoData
#define __pyx_n_s_HPThermoData_Cp0 __pyx_mstate_global->__pyx_n_s_HPThermoData_Cp0
#define __pyx_n_s_HPThermoData_Hf0 __pyx_mstate_global->__pyx_n_s_HPThermoData_Hf0
#define __pyx_n_s_HPThermoData_S0 __pyx_mstate_global->__pyx_n_s_HPThermoData_S0
#define __pyx_n_s_HPThermoData___init __pyx_mstate_global->__pyx_n_s_HPThermoData___init
#define __pyx_n_s_HPThermoData___repr __pyx_mstate_global->__pyx_n_s_HPThermoData___repr
#define __pyx_n_s_HPThermoData___str __pyx_mstate_global->__pyx_n_s_HPThermoData___str
#define __pyx_kp_s_HT_H298 __pyx_mstate_global->__pyx_kp_s_HT_H298
#define __pyx_n_s_HTmH298 __pyx_mstate_global->__pyx_n_s_HTmH298
#define __pyx_n_s_Hf0 __pyx_mstate_global->__pyx_n_s_Hf0
#define __pyx_kp_s_Hf0_2 __pyx_mstate_global->__pyx_kp_s_Hf0_2
#define __pyx_n_s_Hfe __pyx_mstate_global->__pyx_n_s_Hfe
#define __pyx_n_s_Hfox __pyx_mstate_global->__pyx_n_s_Hfox
#define __pyx_n_s_HmHr __pyx_mstate_global->__pyx_n_s_HmHr
#define __pyx_n_s_Htr __pyx_mstate_global->__pyx_n_s_Htr
#define __pyx_n_s_Jadeite __pyx_mstate_global->__pyx_n_s_Jadeite
#define __pyx_n_s_K __pyx_mstate_global->__pyx_n_s_K
#define __pyx_kp_s_K3Fe0_5Al4Si19_5O47 __pyx_mstate_global->__pyx_kp_s_K3Fe0_5Al4Si19_5O47
#define __pyx_kp_s_K3Mg0_5Al4Si19_5O47 __pyx_mstate_global->__pyx_kp_s_K3Mg0_5Al4Si19_5O47
#define __pyx_n_s_KAlSi3O8 __pyx_mstate_global->__pyx_n_s_KAlSi3O8
#define __pyx_kp_s_K_of __pyx_mstate_global->__pyx_kp_s_K_of
#define __pyx_n_s_Li __pyx_mstate_global->__pyx_n_s_Li
#define __pyx_n_s_Li2TiO3 __pyx_mstate_global->__pyx_n_s_Li2TiO3
#define __pyx_n_s_Liquid __pyx_mstate_global->__pyx_n_s_Liquid
#define __pyx_n_s_Mg __pyx_mstate_global->__pyx_n_s_Mg
#define __pyx_n_s_Mg2Si2O6 __pyx_mstate_global->__pyx_n_s_Mg2Si2O6
#define __pyx_n_s_Mg2SiO4 __pyx_mstate_global->__pyx_n_s_Mg2SiO4
#define __pyx_n_s_MgFe2O4 __pyx_mstate_global->__pyx_n_s_MgFe2O4
#define __pyx_n_s_Mullite __pyx_mstate_global->__pyx_n_s_Mullite
#define __pyx_n_s_MulliteThermoData __pyx_mstate_global->__pyx_n_s_MulliteThermoData
#define __pyx_n_s_MulliteThermoData_Cp0 __pyx_mstate_global->__pyx_n_s_MulliteThermoData_Cp0
#define __pyx_n_s_MulliteThermoData_Hf0 __pyx_mstate_global->__pyx_n_s_MulliteThermoData_Hf0
#define __pyx_n_s_MulliteThermoData_S0 __pyx_mstate_global->__pyx_n_s_MulliteThermoData_S0
#define __pyx_n_s_MulliteThermoData___init __pyx_mstate_global->__pyx_n_s_MulliteThermoData___init
#define __pyx_n_s_MulliteThermoData___repr __pyx_mstate_global->__pyx_n_s_MulliteThermoData___repr
#define __pyx_n_s_MulliteThermoData___str __pyx_mstate_global->__pyx_n_s_MulliteThermoData___str
#define __pyx_n_s_NA __pyx_mstate_global->__pyx_n_s_NA
#define __pyx_n_s_NASAdata __pyx_mstate_global->__pyx_n_s_NASAdata
#define __pyx_n_s_Na __pyx_mstate_global->__pyx_n_s_Na
#define __pyx_n_s_Na2TiO3 __pyx_mstate_global->__pyx_n_s_Na2TiO3
#define __pyx_n_s_NaAlSi2O6 __pyx_mstate_global->__pyx_n_s_NaAlSi2O6
#define __pyx_n_s_NaAlSi3O8 __pyx_mstate_global->__pyx_n_s_NaAlSi3O8
#define __pyx_n_s_NaFeSi2O6 __pyx_mstate_global->__pyx_n_s_NaFeSi2O6
#define __pyx_kp_s_NistData_csv __pyx_mstate_global->__pyx_kp_s_NistData_csv
#define __pyx_n_s_O __pyx_mstate_global->__pyx_n_s_O
#define __pyx_n_s_S __pyx_mstate_global->__pyx_n_s_S
#define __pyx_n_s_S0 __pyx_mstate_global->__pyx_n_s_S0
#define __pyx_kp_s_S0_2 __pyx_mstate_global->__pyx_kp_s_S0_2
#define __pyx_n_s_S298 __pyx_mstate_global->__pyx_n_s_S298
#define __pyx_n_s_STmS298 __pyx_mstate_global->__pyx_n_s_STmS298
#define __pyx_n_s_Sanidine __pyx_mstate_global->__pyx_n_s_Sanidine
#define __pyx_n_s_Si __pyx_mstate_global->__pyx_n_s_Si
#define __pyx_n_s_Spurrite __pyx_mstate_global->__pyx_n_s_Spurrite
#define __pyx_n_s_T __pyx_mstate_global->__pyx_n_s_T
#define __pyx_n_s_Testfile __pyx_mstate_global->__pyx_n_s_Testfile
#define __pyx_n_s_Testreader __pyx_mstate_global->__pyx_n_s_Testreader
#define __pyx_n_s_Testrow __pyx_mstate_global->__pyx_n_s_Testrow
#define __pyx_n_s_ThermoConstantsType __pyx_mstate_global->__pyx_n_s_ThermoConstantsType
#define __pyx_n_s_Ti __pyx_mstate_global->__pyx_n_s_Ti
#define __pyx_n_s_TiS2 __pyx_mstate_global->__pyx_n_s_TiS2
#define __pyx_n_s_Tilleyite __pyx_mstate_global->__pyx_n_s_Tilleyite
#define __pyx_n_s_Tmax __pyx_mstate_global->__pyx_n_s_Tmax
#define __pyx_kp_s_Tmax_2 __pyx_mstate_global->__pyx_kp_s_Tmax_2
#define __pyx_n_s_Tmin __pyx_mstate_global->__pyx_n_s_Tmin
#define __pyx_n_s_V0 __pyx_mstate_global->__pyx_n_s_V0
#define __pyx_n_s_Validate_Cem __pyx_mstate_global->__pyx_n_s_Validate_Cem
#define __pyx_n_s_Validate_NIST_Data __pyx_mstate_global->__pyx_n_s_Validate_NIST_Data
#define __pyx_n_s_Zn __pyx_mstate_global->__pyx_n_s_Zn
#define __pyx_n_s_Zn2TiO4 __pyx_mstate_global->__pyx_n_s_Zn2TiO4
#define __pyx_kp_s__2 __pyx_mstate_global->__pyx_kp_s__2
#define __pyx_kp_s__22 __pyx_mstate_global->__pyx_kp_s__22
#define __pyx_kp_s__23 __pyx_mstate_global->__pyx_kp_s__23
#define __pyx_kp_s__3 __pyx_mstate_global->__pyx_kp_s__3
#define __pyx_kp_s__5 __pyx_mstate_global->__pyx_kp_s__5
#define __pyx_kp_s__6 __pyx_mstate_global->__pyx_kp_s__6
#define __pyx_n_s__64 __pyx_mstate_global->__pyx_n_s__64
#define __pyx_kp_s__7 __pyx_mstate_global->__pyx_kp_s__7
#define __pyx_n_s__8 __pyx_mstate_global->__pyx_n_s__8
#define __pyx_n_s_a __pyx_mstate_global->__pyx_n_s_a
#define __pyx_kp_s_a_2 __pyx_mstate_global->__pyx_kp_s_a_2
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_s_chemeng __pyx_mstate_global->__pyx_n_s_chemeng
#define __pyx_n_s_chemeng_NASAdata __pyx_mstate_global->__pyx_n_s_chemeng_NASAdata
#define __pyx_n_s_chemeng_cementdata __pyx_mstate_global->__pyx_n_s_chemeng_cementdata
#define __pyx_n_s_chemeng_config __pyx_mstate_global->__pyx_n_s_chemeng_config
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_comments __pyx_mstate_global->__pyx_n_s_comments
#define __pyx_n_s_config __pyx_mstate_global->__pyx_n_s_config
#define __pyx_n_s_constants __pyx_mstate_global->__pyx_n_s_constants
#define __pyx_n_s_csv __pyx_mstate_global->__pyx_n_s_csv
#define __pyx_n_s_d __pyx_mstate_global->__pyx_n_s_d
#define __pyx_n_s_datadir __pyx_mstate_global->__pyx_n_s_datadir
#define __pyx_n_s_datafile __pyx_mstate_global->__pyx_n_s_datafile
#define __pyx_n_s_delimiter __pyx_mstate_global->__pyx_n_s_delimiter
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_e __pyx_mstate_global->__pyx_n_s_e
#define __pyx_n_s_end __pyx_mstate_global->__pyx_n_s_end
#define __pyx_n_s_enter __pyx_mstate_global->__pyx_n_s_enter
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_exit __pyx_mstate_global->__pyx_n_s_exit
#define __pyx_n_s_fabs __pyx_mstate_global->__pyx_n_s_fabs
#define __pyx_n_s_file __pyx_mstate_global->__pyx_n_s_file
#define __pyx_n_s_filter __pyx_mstate_global->__pyx_n_s_filter
#define __pyx_n_s_highAlbite __pyx_mstate_global->__pyx_n_s_highAlbite
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_join __pyx_mstate_global->__pyx_n_s_join
#define __pyx_n_s_lambda __pyx_mstate_global->__pyx_n_s_lambda
#define __pyx_n_s_log __pyx_mstate_global->__pyx_n_s_log
#define __pyx_n_s_logkfe __pyx_mstate_global->__pyx_n_s_logkfe
#define __pyx_n_s_logkfox __pyx_mstate_global->__pyx_n_s_logkfox
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_map __pyx_mstate_global->__pyx_n_s_map
#define __pyx_n_s_math __pyx_mstate_global->__pyx_n_s_math
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_mro_entries __pyx_mstate_global->__pyx_n_s_mro_entries
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_next __pyx_mstate_global->__pyx_n_s_next
#define __pyx_n_s_notes __pyx_mstate_global->__pyx_n_s_notes
#define __pyx_kp_s_notes_2 __pyx_mstate_global->__pyx_kp_s_notes_2
#define __pyx_n_s_open __pyx_mstate_global->__pyx_n_s_open
#define __pyx_n_s_os __pyx_mstate_global->__pyx_n_s_os
#define __pyx_n_s_path __pyx_mstate_global->__pyx_n_s_path
#define __pyx_kp_s_percent __pyx_mstate_global->__pyx_kp_s_percent
#define __pyx_n_s_percent_error __pyx_mstate_global->__pyx_n_s_percent_error
#define __pyx_n_s_phase __pyx_mstate_global->__pyx_n_s_phase
#define __pyx_n_s_phases __pyx_mstate_global->__pyx_n_s_phases
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_quotechar __pyx_mstate_global->__pyx_n_s_quotechar
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_rb __pyx_mstate_global->__pyx_n_s_rb
#define __pyx_n_s_reader __pyx_mstate_global->__pyx_n_s_reader
#define __pyx_n_s_registerPhase __pyx_mstate_global->__pyx_n_s_registerPhase
#define __pyx_n_s_registerPhaseCoeffs __pyx_mstate_global->__pyx_n_s_registerPhaseCoeffs
#define __pyx_n_s_registerSpecies __pyx_mstate_global->__pyx_n_s_registerSpecies
#define __pyx_n_s_repr __pyx_mstate_global->__pyx_n_s_repr
#define __pyx_n_s_retval __pyx_mstate_global->__pyx_n_s_retval
#define __pyx_n_s_row __pyx_mstate_global->__pyx_n_s_row
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_species __pyx_mstate_global->__pyx_n_s_species
#define __pyx_n_s_speciesData __pyx_mstate_global->__pyx_n_s_speciesData
#define __pyx_kp_s_src_chemeng_cementdata_pyx __pyx_mstate_global->__pyx_kp_s_src_chemeng_cementdata_pyx
#define __pyx_n_s_str __pyx_mstate_global->__pyx_n_s_str
#define __pyx_n_s_strip __pyx_mstate_global->__pyx_n_s_strip
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_0_5 __pyx_mstate_global->__pyx_float_0_5
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_float_2_0 __pyx_mstate_global->__pyx_float_2_0
#define __pyx_float_3_0 __pyx_mstate_global->__pyx_float_3_0
#define __pyx_float_4_0 __pyx_mstate_global->__pyx_float_4_0
#define __pyx_float_0_03 __pyx_mstate_global->__pyx_float_0_03
#define __pyx_float_19_5 __pyx_mstate_global->__pyx_float_19_5
#define __pyx_float_100_0 __pyx_mstate_global->__pyx_float_100_0
#define __pyx_float_201_1 __pyx_mstate_global->__pyx_float_201_1
#define __pyx_float_237_6 __pyx_mstate_global->__pyx_float_237_6
#define __pyx_float_239_7 __pyx_mstate_global->__pyx_float_239_7
#define __pyx_float_267_9 __pyx_mstate_global->__pyx_float_267_9
#define __pyx_float_298_0 __pyx_mstate_global->__pyx_float_298_0
#define __pyx_float_301_1 __pyx_mstate_global->__pyx_float_301_1
#define __pyx_float_307_1 __pyx_mstate_global->__pyx_float_307_1
#define __pyx_float_314_5 __pyx_mstate_global->__pyx_float_314_5
#define __pyx_float_345_3 __pyx_mstate_global->__pyx_float_345_3
#define __pyx_float_354_9 __pyx_mstate_global->__pyx_float_354_9
#define __pyx_float_356_2 __pyx_mstate_global->__pyx_float_356_2
#define __pyx_float_358_5 __pyx_mstate_global->__pyx_float_358_5
#define __pyx_float_358_9 __pyx_mstate_global->__pyx_float_358_9
#define __pyx_float_367_3 __pyx_mstate_global->__pyx_float_367_3
#define __pyx_float_398_7 __pyx_mstate_global->__pyx_float_398_7
#define __pyx_float_417_5 __pyx_mstate_global->__pyx_float_417_5
#define __pyx_float_448_8 __pyx_mstate_global->__pyx_float_448_8
#define __pyx_float_452_0 __pyx_mstate_global->__pyx_float_452_0
#define __pyx_float_614_1 __pyx_mstate_global->__pyx_float_614_1
#define __pyx_float_741_7 __pyx_mstate_global->__pyx_float_741_7
#define __pyx_float_2000_0 __pyx_mstate_global->__pyx_float_2000_0
#define __pyx_float_2375_0 __pyx_mstate_global->__pyx_float_2375_0
#define __pyx_float_2386_0 __pyx_mstate_global->__pyx_float_2386_0
#define __pyx_float_298_15 __pyx_mstate_global->__pyx_float_298_15
#define __pyx_float_0_01733 __pyx_mstate_global->__pyx_float_0_01733
#define __pyx_float_0_000041 __pyx_mstate_global->__pyx_float_0_000041
#define __pyx_float_0_010143 __pyx_mstate_global->__pyx_float_0_010143
#define __pyx_float_0_016758 __pyx_mstate_global->__pyx_float_0_016758
#define __pyx_float_1290100_0 __pyx_mstate_global->__pyx_float_1290100_0
#define __pyx_float_1_30438133eneg_01 __pyx_mstate_global->__pyx_float_1_30438133eneg_01
#define __pyx_float_3_77248082e_02 __pyx_mstate_global->__pyx_float_3_77248082e_02
#define __pyx_float_neg_0_5 __pyx_mstate_global->__pyx_float_neg_0_5
#define __pyx_float_neg_900_9 __pyx_mstate_global->__pyx_float_neg_900_9
#define __pyx_float_neg_2020_1 __pyx_mstate_global->__pyx_float_neg_2020_1
#define __pyx_float_neg_2055_1 __pyx_mstate_global->__pyx_float_neg_2055_1
#define __pyx_float_neg_2125_8 __pyx_mstate_global->__pyx_float_neg_2125_8
#define __pyx_float_neg_3185_3 __pyx_mstate_global->__pyx_float_neg_3185_3
#define __pyx_float_neg_3456_2 __pyx_mstate_global->__pyx_float_neg_3456_2
#define __pyx_float_neg_3953_6 __pyx_mstate_global->__pyx_float_neg_3953_6
#define __pyx_float_neg_3973_1 __pyx_mstate_global->__pyx_float_neg_3973_1
#define __pyx_float_neg_4058_0 __pyx_mstate_global->__pyx_float_neg_4058_0
#define __pyx_float_neg_4168_0 __pyx_mstate_global->__pyx_float_neg_4168_0
#define __pyx_float_neg_5878_5 __pyx_mstate_global->__pyx_float_neg_5878_5
#define __pyx_float_neg_0_002990 __pyx_mstate_global->__pyx_float_neg_0_002990
#define __pyx_float_neg_0_003508 __pyx_mstate_global->__pyx_float_neg_0_003508
#define __pyx_float_neg_0_004905 __pyx_mstate_global->__pyx_float_neg_0_004905
#define __pyx_float_neg_0_005345 __pyx_mstate_global->__pyx_float_neg_0_005345
#define __pyx_float_neg_0_006579 __pyx_mstate_global->__pyx_float_neg_0_006579
#define __pyx_float_neg_0_010075 __pyx_mstate_global->__pyx_float_neg_0_010075
#define __pyx_float_neg_0_013364 __pyx_mstate_global->__pyx_float_neg_0_013364
#define __pyx_float_neg_596900_0 __pyx_mstate_global->__pyx_float_neg_596900_0
#define __pyx_float_neg_1007300_0 __pyx_mstate_global->__pyx_float_neg_1007300_0
#define __pyx_float_neg_1275900_0 __pyx_mstate_global->__pyx_float_neg_1275900_0
#define __pyx_float_neg_1685500_0 __pyx_mstate_global->__pyx_float_neg_1685500_0
#define __pyx_float_neg_1960600_0 __pyx_mstate_global->__pyx_float_neg_1960600_0
#define __pyx_float_neg_2239300_0 __pyx_mstate_global->__pyx_float_neg_2239300_0
#define __pyx_float_neg_2493100_0 __pyx_mstate_global->__pyx_float_neg_2493100_0
#define __pyx_float_neg_5897053_0 __pyx_mstate_global->__pyx_float_neg_5897053_0
#define __pyx_float_neg_23819995_9 __pyx_mstate_global->__pyx_float_neg_23819995_9
#define __pyx_float_neg_2576200_44 __pyx_mstate_global->__pyx_float_neg_2576200_44
#define __pyx_float_neg_1506736_555 __pyx_mstate_global->__pyx_float_neg_1506736_555
#define __pyx_float_neg_2242104_385 __pyx_mstate_global->__pyx_float_neg_2242104_385
#define __pyx_float_neg_23632876_25 __pyx_mstate_global->__pyx_float_neg_23632876_25
#define __pyx_float_neg_3191463_435 __pyx_mstate_global->__pyx_float_neg_3191463_435
#define __pyx_float_neg_3312281_195 __pyx_mstate_global->__pyx_float_neg_3312281_195
#define __pyx_float_neg_4031406_775 __pyx_mstate_global->__pyx_float_neg_4031406_775
#define __pyx_float_neg_4081390_495 __pyx_mstate_global->__pyx_float_neg_4081390_495
#define __pyx_float_neg_4406117_625 __pyx_mstate_global->__pyx_float_neg_4406117_625
#define __pyx_float_neg_4523_276465 __pyx_mstate_global->__pyx_float_neg_4523_276465
#define __pyx_float_neg_6391033_598 __pyx_mstate_global->__pyx_float_neg_6391033_598
#define __pyx_float_neg_1552_3861601 __pyx_mstate_global->__pyx_float_neg_1552_3861601
#define __pyx_float_neg_2287_7288762 __pyx_mstate_global->__pyx_float_neg_2287_7288762
#define __pyx_float_neg_1115_33066401 __pyx_mstate_global->__pyx_float_neg_1115_33066401
#define __pyx_float_neg_1247_71393272 __pyx_mstate_global->__pyx_float_neg_1247_71393272
#define __pyx_float_neg_1286_74897962 __pyx_mstate_global->__pyx_float_neg_1286_74897962
#define __pyx_float_neg_13311_7921995 __pyx_mstate_global->__pyx_float_neg_13311_7921995
#define __pyx_float_neg_13410_4657633 __pyx_mstate_global->__pyx_float_neg_13410_4657633
#define __pyx_float_neg_1514412_39343 __pyx_mstate_global->__pyx_float_neg_1514412_39343
#define __pyx_float_neg_1835_70351849 __pyx_mstate_global->__pyx_float_neg_1835_70351849
#define __pyx_float_neg_1839_83541625 __pyx_mstate_global->__pyx_float_neg_1839_83541625
#define __pyx_float_neg_1890_58842253 __pyx_mstate_global->__pyx_float_neg_1890_58842253
#define __pyx_float_neg_1898_63491189 __pyx_mstate_global->__pyx_float_neg_1898_63491189
#define __pyx_float_neg_1944_38014589 __pyx_mstate_global->__pyx_float_neg_1944_38014589
#define __pyx_float_neg_1949_72727363 __pyx_mstate_global->__pyx_float_neg_1949_72727363
#define __pyx_float_neg_2021_07707436 __pyx_mstate_global->__pyx_float_neg_2021_07707436
#define __pyx_float_neg_2268_39597837 __pyx_mstate_global->__pyx_float_neg_2268_39597837
#define __pyx_float_neg_2311991_47077 __pyx_mstate_global->__pyx_float_neg_2311991_47077
#define __pyx_float_neg_2339_74662875 __pyx_mstate_global->__pyx_float_neg_2339_74662875
#define __pyx_float_neg_2362863_83439 __pyx_mstate_global->__pyx_float_neg_2362863_83439
#define __pyx_float_neg_2541_84281492 __pyx_mstate_global->__pyx_float_neg_2541_84281492
#define __pyx_float_neg_2611237_43295 __pyx_mstate_global->__pyx_float_neg_2611237_43295
#define __pyx_float_neg_2789_93851863 __pyx_mstate_global->__pyx_float_neg_2789_93851863
#define __pyx_float_neg_2813_04236975 __pyx_mstate_global->__pyx_float_neg_2813_04236975
#define __pyx_float_neg_2826_44236975 __pyx_mstate_global->__pyx_float_neg_2826_44236975
#define __pyx_float_neg_3054593_52897 __pyx_mstate_global->__pyx_float_neg_3054593_52897
#define __pyx_float_neg_3088328_86538 __pyx_mstate_global->__pyx_float_neg_3088328_86538
#define __pyx_float_neg_3235757_57446 __pyx_mstate_global->__pyx_float_neg_3235757_57446
#define __pyx_float_neg_3664_64123237 __pyx_mstate_global->__pyx_float_neg_3664_64123237
#define __pyx_float_neg_3926755_41852 __pyx_mstate_global->__pyx_float_neg_3926755_41852
#define __pyx_float_neg_3936515_41852 __pyx_mstate_global->__pyx_float_neg_3936515_41852
#define __pyx_float_neg_3964433_22114 __pyx_mstate_global->__pyx_float_neg_3964433_22114
#define __pyx_float_neg_2_08446637e_03 __pyx_mstate_global->__pyx_float_neg_2_08446637e_03
#define __pyx_float_neg_6_34719844e_06 __pyx_mstate_global->__pyx_float_neg_6_34719844e_06
#define __pyx_float_neg_6_89076313e_02 __pyx_mstate_global->__pyx_float_neg_6_89076313e_02
#define __pyx_float_neg_6_96694385e_06 __pyx_mstate_global->__pyx_float_neg_6_96694385e_06
#define __pyx_float_neg_8_70793049eneg_05 __pyx_mstate_global->__pyx_float_neg_8_70793049eneg_05
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_5 __pyx_mstate_global->__pyx_int_5
#define __pyx_int_6 __pyx_mstate_global->__pyx_int_6
#define __pyx_int_7 __pyx_mstate_global->__pyx_int_7
#define __pyx_int_8 __pyx_mstate_global->__pyx_int_8
#define __pyx_int_9 __pyx_mstate_global->__pyx_int_9
#define __pyx_int_11 __pyx_mstate_global->__pyx_int_11
#define __pyx_int_12 __pyx_mstate_global->__pyx_int_12
#define __pyx_int_13 __pyx_mstate_global->__pyx_int_13
#define __pyx_int_14 __pyx_mstate_global->__pyx_int_14
#define __pyx_int_15 __pyx_mstate_global->__pyx_int_15
#define __pyx_int_33 __pyx_mstate_global->__pyx_int_33
#define __pyx_int_47 __pyx_mstate_global->__pyx_int_47
#define __pyx_int_neg_2 __pyx_mstate_global->__pyx_int_neg_2
#define __pyx_int_neg_1434600 __pyx_mstate_global->__pyx_int_neg_1434600
#define __pyx_int_neg_2745900 __pyx_mstate_global->__pyx_int_neg_2745900
#define __pyx_slice__4 __pyx_mstate_global->__pyx_slice__4
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_slice__24 __pyx_mstate_global->__pyx_slice__24
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__49 __pyx_mstate_global->__pyx_tuple__49
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__53 __pyx_mstate_global->__pyx_tuple__53
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__63 __pyx_mstate_global->__pyx_tuple__63
#define __pyx_codeobj__11 __pyx_mstate_global->__pyx_codeobj__11
#define __pyx_codeobj__14 __pyx_mstate_global->__pyx_codeobj__14
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__16 __pyx_mstate_global->__pyx_codeobj__16
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
/* #### Code section: module_code ### */

/* "chemeng/cementdata.pyx":53
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')             # <<<<<<<<<<<<<<
 *     reader.next() #Skip the header
 *     for row in reader:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_4lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_4lambda = {"lambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_4lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_4lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_row = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_row)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda") < 0)) __PYX_ERR(0, 53, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_row = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 53, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_7chemeng_10cementdata_lambda(__pyx_self, __pyx_v_row);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_7chemeng_10cementdata_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_row, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_kp_s_, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chemeng.cementdata.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":88
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'NistData.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')             # <<<<<<<<<<<<<<
 *     reader.next() #Skip 1st line
 *     for row in reader:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_5lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_5lambda1 = {"lambda1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_5lambda1, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_5lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_row = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_row)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda1") < 0)) __PYX_ERR(0, 88, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_row = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda1", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 88, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_7chemeng_10cementdata_lambda1(__pyx_self, __pyx_v_row);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_7chemeng_10cementdata_lambda1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_row, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_kp_s_, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chemeng.cementdata.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":185
 * 
 * with open(os.path.join(chemeng.config.datadir,'Cement_Therm_New2.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')             # <<<<<<<<<<<<<<
 *     reader.next() #Skip 1st line
 *     reader.next() #Skip 2nd line
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_6lambda2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_6lambda2 = {"lambda2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_6lambda2, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_6lambda2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_row = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_row)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda2") < 0)) __PYX_ERR(0, 185, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_row = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda2", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 185, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_7chemeng_10cementdata_lambda2(__pyx_self, __pyx_v_row);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_7chemeng_10cementdata_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda2", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_row, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_kp_s_, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chemeng.cementdata.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":210
 *                     e = float(row[13])*4.184 - ( a*math.log(Tmin) + b*Tmin - c/(2.0*Tmin**2)) + S0
 *                 with open(os.path.join(chemeng.config.datadir,'Cement_New_Tests.csv'), 'rb') as Testfile:
 *                     Testreader = csv.reader(filter(lambda row: row[0]!='!', Testfile), delimiter=',', quotechar='"')             # <<<<<<<<<<<<<<
 *                     Testreader.next() #Skip 1st line
 *                     for Testrow in Testreader:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_7lambda3(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_7lambda3 = {"lambda3", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_7lambda3, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_7lambda3(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_row = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_row,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_row)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda3") < 0)) __PYX_ERR(0, 210, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_row = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda3", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 210, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_7chemeng_10cementdata_lambda3(__pyx_self, __pyx_v_row);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_7chemeng_10cementdata_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_row) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda3", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_row, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_kp_s_, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("chemeng.cementdata.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":26
 * 
 * class CementThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_16CementThermoData_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_16CementThermoData_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_Tmin = 0;
  PyObject *__pyx_v_Tmax = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_notes = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_Tmin,&__pyx_n_s_Tmax,&__pyx_n_s_a,&__pyx_n_s_notes,0};
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_kp_s__2)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Tmin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 1); __PYX_ERR(0, 26, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Tmax)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 2); __PYX_ERR(0, 26, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 3); __PYX_ERR(0, 26, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_notes);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 26, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_Tmin = values[1];
    __pyx_v_Tmax = values[2];
    __pyx_v_a = values[3];
    __pyx_v_notes = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, __pyx_nargs); __PYX_ERR(0, 26, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_16CementThermoData___init__(__pyx_self, __pyx_v_self, __pyx_v_Tmin, __pyx_v_Tmax, __pyx_v_a, __pyx_v_notes);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tmin, PyObject *__pyx_v_Tmax, PyObject *__pyx_v_a, PyObject *__pyx_v_notes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "chemeng/cementdata.pyx":27
 * class CementThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required             # <<<<<<<<<<<<<<
 *         self.a = a
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ThermoConstantsType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_v_self, __pyx_v_Tmin, __pyx_v_Tmax, __pyx_v_notes};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":28
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a             # <<<<<<<<<<<<<<
 * 
 *     def Cp0(self, T):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_a, __pyx_v_a) < 0) __PYX_ERR(0, 28, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":26
 * 
 * class CementThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":30
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_3Cp0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_16CementThermoData_3Cp0 = {"Cp0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_16CementThermoData_3Cp0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_3Cp0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Cp0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 30, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 30, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Cp0", 1, 2, 2, 1); __PYX_ERR(0, 30, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Cp0") < 0)) __PYX_ERR(0, 30, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Cp0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 30, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.Cp0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_16CementThermoData_2Cp0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_2Cp0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Cp0", 1);

  /* "chemeng/cementdata.pyx":31
 * 
 *     def Cp0(self, T):
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2             # <<<<<<<<<<<<<<
 * 
 *     def Hf0(self, T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_int_neg_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_float_neg_0_5, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_1, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":30
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.Cp0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":33
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_5Hf0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_16CementThermoData_5Hf0 = {"Hf0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_16CementThermoData_5Hf0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_5Hf0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Hf0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 33, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 33, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Hf0", 1, 2, 2, 1); __PYX_ERR(0, 33, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Hf0") < 0)) __PYX_ERR(0, 33, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Hf0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 33, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.Hf0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_16CementThermoData_4Hf0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_4Hf0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Hf0", 1);

  /* "chemeng/cementdata.pyx":34
 * 
 *     def Hf0(self, T):
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3             # <<<<<<<<<<<<<<
 * 
 *     def S0(self, T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_v_T, __pyx_float_0_5, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_v_T, __pyx_int_3, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_int_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":33
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.Hf0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":36
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_7S0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_16CementThermoData_7S0 = {"S0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_16CementThermoData_7S0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_7S0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("S0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 36, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("S0", 1, 2, 2, 1); __PYX_ERR(0, 36, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "S0") < 0)) __PYX_ERR(0, 36, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("S0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 36, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_16CementThermoData_6S0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_6S0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("S0", 1);

  /* "chemeng/cementdata.pyx":37
 * 
 *     def S0(self, T):
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_1, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_float_neg_0_5, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_T};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_4, 2, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_int_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":36
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":39
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_9__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_16CementThermoData_9__str__ = {"__str__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_16CementThermoData_9__str__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_9__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 39, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__str__") < 0)) __PYX_ERR(0, 39, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__str__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 39, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_16CementThermoData_8__str__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_8__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_retval = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "chemeng/cementdata.pyx":40
 * 
 *     def __str__(self):
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["             # <<<<<<<<<<<<<<
 *         for i in range(7):
 *             retval+=str(self.a[i])+", "
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_CementPolynomial_Tmin, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_Tmax_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tmax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_notes_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_comments); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_a_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_retval = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":41
 *     def __str__(self):
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):             # <<<<<<<<<<<<<<
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 7; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chemeng/cementdata.pyx":42
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 *             retval+=str(self.a[i])+", "             # <<<<<<<<<<<<<<
 *         retval = retval[:-2] + "]}"
 *         return retval
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_retval, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_retval, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "chemeng/cementdata.pyx":43
 *         for i in range(7):
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_retval, 0, -2L, NULL, NULL, &__pyx_slice__4, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_retval, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "chemeng/cementdata.pyx":44
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":39
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":46
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_11__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_16CementThermoData_11__repr__ = {"__repr__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_16CementThermoData_11__repr__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_16CementThermoData_11__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 46, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__repr__") < 0)) __PYX_ERR(0, 46, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__repr__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 46, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_16CementThermoData_10__repr__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_16CementThermoData_10__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "chemeng/cementdata.pyx":47
 * 
 *     def __repr__(self):
 *         return self.__str__()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":46
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.CementThermoData.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":73
 * 
 * 
 * def Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,percent_error):             # <<<<<<<<<<<<<<
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_1Validate_NIST_Data(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_1Validate_NIST_Data = {"Validate_NIST_Data", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_1Validate_NIST_Data, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_1Validate_NIST_Data(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_species = 0;
  PyObject *__pyx_v_phase = 0;
  PyObject *__pyx_v_T = 0;
  PyObject *__pyx_v_Cp = 0;
  PyObject *__pyx_v_S = 0;
  PyObject *__pyx_v_HmHr = 0;
  PyObject *__pyx_v_GmHoT = 0;
  PyObject *__pyx_v_Htr = 0;
  PyObject *__pyx_v_percent_error = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Validate_NIST_Data (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,&__pyx_n_s_phase,&__pyx_n_s_T,&__pyx_n_s_Cp,&__pyx_n_s_S,&__pyx_n_s_HmHr,&__pyx_n_s_GmHoT,&__pyx_n_s_Htr,&__pyx_n_s_percent_error,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_species)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_phase)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, 1); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, 2); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Cp)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, 3); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_S)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, 4); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_HmHr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, 5); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_GmHoT)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[6]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, 6); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Htr)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[7]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, 7); __PYX_ERR(0, 73, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_percent_error)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[8]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, 8); __PYX_ERR(0, 73, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Validate_NIST_Data") < 0)) __PYX_ERR(0, 73, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 9)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
      values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
      values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
    }
    __pyx_v_species = values[0];
    __pyx_v_phase = values[1];
    __pyx_v_T = values[2];
    __pyx_v_Cp = values[3];
    __pyx_v_S = values[4];
    __pyx_v_HmHr = values[5];
    __pyx_v_GmHoT = values[6];
    __pyx_v_Htr = values[7];
    __pyx_v_percent_error = values[8];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Validate_NIST_Data", 1, 9, 9, __pyx_nargs); __PYX_ERR(0, 73, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.Validate_NIST_Data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_Validate_NIST_Data(__pyx_self, __pyx_v_species, __pyx_v_phase, __pyx_v_T, __pyx_v_Cp, __pyx_v_S, __pyx_v_HmHr, __pyx_v_GmHoT, __pyx_v_Htr, __pyx_v_percent_error);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_Validate_NIST_Data(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_species, PyObject *__pyx_v_phase, PyObject *__pyx_v_T, PyObject *__pyx_v_Cp, PyObject *__pyx_v_S, PyObject *__pyx_v_HmHr, PyObject *__pyx_v_GmHoT, PyObject *__pyx_v_Htr, PyObject *__pyx_v_percent_error) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Validate_NIST_Data", 1);

  /* "chemeng/cementdata.pyx":74
 * 
 * def Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,percent_error):
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:             # <<<<<<<<<<<<<<
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) > percent_error:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_fabs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_species); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_phases); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_phase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_constants); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Cp0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_T};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_v_Cp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_float_100_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_Cp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_v_percent_error, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {

    /* "chemeng/cementdata.pyx":75
 * def Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,percent_error):
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"             # <<<<<<<<<<<<<<
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) > percent_error:
 *         print "\nError in S "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) )+" percent"
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Error_in_Cp, __pyx_v_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Str(__pyx_v_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_K_of); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_phases); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_phase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_constants); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Cp0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_T};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_4, __pyx_v_Cp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_float_100_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_Cp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_percent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chemeng/cementdata.pyx":74
 * 
 * def Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,percent_error):
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:             # <<<<<<<<<<<<<<
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) > percent_error:
 */
  }

  /* "chemeng/cementdata.pyx":76
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) > percent_error:             # <<<<<<<<<<<<<<
 *         print "\nError in S "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) )+" percent"
 *     if T!=298.15:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_math); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_fabs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_species); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_phases); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_phase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_constants); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_S0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_T};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_v_S); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_float_100_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_S); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_v_percent_error, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {

    /* "chemeng/cementdata.pyx":77
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) > percent_error:
 *         print "\nError in S "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) )+" percent"             # <<<<<<<<<<<<<<
 *     if T!=298.15:
 *         if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr) > percent_error:
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Error_in_S, __pyx_v_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Str(__pyx_v_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_K_of); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_phases); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_phase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_constants); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_S0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_T};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_v_S); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_float_100_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_S); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_percent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "chemeng/cementdata.pyx":76
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) > percent_error:             # <<<<<<<<<<<<<<
 *         print "\nError in S "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) )+" percent"
 *     if T!=298.15:
 */
  }

  /* "chemeng/cementdata.pyx":78
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) > percent_error:
 *         print "\nError in S "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) )+" percent"
 *     if T!=298.15:             # <<<<<<<<<<<<<<
 *         if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr) > percent_error:
 *             print "\nError in H-Hr "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr))+" percent"
 */
  __pyx_t_7 = (__Pyx_PyFloat_BoolNeObjC(__pyx_v_T, __pyx_float_298_15, 298.15, 0, 0)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 78, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "chemeng/cementdata.pyx":79
 *         print "\nError in S "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) )+" percent"
 *     if T!=298.15:
 *         if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr) > percent_error:             # <<<<<<<<<<<<<<
 *             print "\nError in H-Hr "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr))+" percent"
 *     if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - T*speciesData[species].phases[phase].constants[-1].S0(T) - Htr)/T  - GmHoT)*100.0 / GmHoT) > percent_error:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_fabs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_species); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_phases); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_phase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_constants); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Hf0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_T};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_v_Htr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_v_HmHr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_float_100_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_HmHr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_v_percent_error, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {

      /* "chemeng/cementdata.pyx":80
 *     if T!=298.15:
 *         if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr) > percent_error:
 *             print "\nError in H-Hr "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr))+" percent"             # <<<<<<<<<<<<<<
 *     if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - T*speciesData[species].phases[phase].constants[-1].S0(T) - Htr)/T  - GmHoT)*100.0 / GmHoT) > percent_error:
 *         print "\nError in G-Htr/T "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].Gibbs0(T, phase) - Htr)/T  - GmHoT)*100.0 / GmHoT))+" percent"
 */
      __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Error_in_H_Hr, __pyx_v_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Str(__pyx_v_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_K_of); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_phases); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_phase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_constants); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Hf0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_T};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_v_Htr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_HmHr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_float_100_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_HmHr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_percent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "chemeng/cementdata.pyx":79
 *         print "\nError in S "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) )+" percent"
 *     if T!=298.15:
 *         if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr) > percent_error:             # <<<<<<<<<<<<<<
 *             print "\nError in H-Hr "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr))+" percent"
 *     if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - T*speciesData[species].phases[phase].constants[-1].S0(T) - Htr)/T  - GmHoT)*100.0 / GmHoT) > percent_error:
 */
    }

    /* "chemeng/cementdata.pyx":78
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) > percent_error:
 *         print "\nError in S "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].S0(T) - S)*100.0 / S) )+" percent"
 *     if T!=298.15:             # <<<<<<<<<<<<<<
 *         if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr) > percent_error:
 *             print "\nError in H-Hr "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr))+" percent"
 */
  }

  /* "chemeng/cementdata.pyx":81
 *         if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr) > percent_error:
 *             print "\nError in H-Hr "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr))+" percent"
 *     if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - T*speciesData[species].phases[phase].constants[-1].S0(T) - Htr)/T  - GmHoT)*100.0 / GmHoT) > percent_error:             # <<<<<<<<<<<<<<
 *         print "\nError in G-Htr/T "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].Gibbs0(T, phase) - Htr)/T  - GmHoT)*100.0 / GmHoT))+" percent"
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fabs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_species); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_phases); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_phase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_constants); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Hf0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_T};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_species); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_phases); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_phase); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_constants); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_5, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_S0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_T};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyNumber_Multiply(__pyx_v_T, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_4, __pyx_v_Htr); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_4, __pyx_v_GmHoT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_float_100_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_GmHoT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_5};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_percent_error, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {

    /* "chemeng/cementdata.pyx":82
 *             print "\nError in H-Hr "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr))+" percent"
 *     if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - T*speciesData[species].phases[phase].constants[-1].S0(T) - Htr)/T  - GmHoT)*100.0 / GmHoT) > percent_error:
 *         print "\nError in G-Htr/T "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].Gibbs0(T, phase) - Htr)/T  - GmHoT)*100.0 / GmHoT))+" percent"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Error_in_G_Htr_T, __pyx_v_species); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_v_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Str(__pyx_v_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_kp_s_K_of); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Gibbs0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_T, __pyx_v_phase};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_5, __pyx_v_Htr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_T); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_5, __pyx_v_GmHoT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_float_100_0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_v_GmHoT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Absolute(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_kp_s_percent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "chemeng/cementdata.pyx":81
 *         if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr) > percent_error:
 *             print "\nError in H-Hr "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - Htr)  - HmHr)*100.0 / HmHr))+" percent"
 *     if math.fabs(((speciesData[species].phases[phase].constants[-1].Hf0(T) - T*speciesData[species].phases[phase].constants[-1].S0(T) - Htr)/T  - GmHoT)*100.0 / GmHoT) > percent_error:             # <<<<<<<<<<<<<<
 *         print "\nError in G-Htr/T "+species+" "+phase+" @ "+str(T)+"K of " + str(abs(((speciesData[species].Gibbs0(T, phase) - Htr)/T  - GmHoT)*100.0 / GmHoT))+" percent"
 * 
 */
  }

  /* "chemeng/cementdata.pyx":73
 * 
 * 
 * def Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,percent_error):             # <<<<<<<<<<<<<<
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("chemeng.cementdata.Validate_NIST_Data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":151
 * 
 * class CemThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_13CemThermoData_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_13CemThermoData_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_Tmin = 0;
  PyObject *__pyx_v_Tmax = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_notes = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_Tmin,&__pyx_n_s_Tmax,&__pyx_n_s_a,&__pyx_n_s_notes,0};
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_kp_s__2)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Tmin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 1); __PYX_ERR(0, 151, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Tmax)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 2); __PYX_ERR(0, 151, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 3); __PYX_ERR(0, 151, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_notes);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 151, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_Tmin = values[1];
    __pyx_v_Tmax = values[2];
    __pyx_v_a = values[3];
    __pyx_v_notes = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, __pyx_nargs); __PYX_ERR(0, 151, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_13CemThermoData___init__(__pyx_self, __pyx_v_self, __pyx_v_Tmin, __pyx_v_Tmax, __pyx_v_a, __pyx_v_notes);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tmin, PyObject *__pyx_v_Tmax, PyObject *__pyx_v_a, PyObject *__pyx_v_notes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "chemeng/cementdata.pyx":152
 * class CemThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required             # <<<<<<<<<<<<<<
 *         self.a = a
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ThermoConstantsType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_v_self, __pyx_v_Tmin, __pyx_v_Tmax, __pyx_v_notes};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":153
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a             # <<<<<<<<<<<<<<
 * 
 *     def Cp0(self, T):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_a, __pyx_v_a) < 0) __PYX_ERR(0, 153, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":151
 * 
 * class CemThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":155
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_3Cp0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_13CemThermoData_3Cp0 = {"Cp0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_13CemThermoData_3Cp0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_3Cp0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Cp0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Cp0", 1, 2, 2, 1); __PYX_ERR(0, 155, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Cp0") < 0)) __PYX_ERR(0, 155, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Cp0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 155, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.Cp0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_13CemThermoData_2Cp0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_2Cp0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Cp0", 1);

  /* "chemeng/cementdata.pyx":156
 * 
 *     def Cp0(self, T):
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)             # <<<<<<<<<<<<<<
 * 
 *     def Hf0(self, T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":155
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.Cp0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":158
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_5Hf0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_13CemThermoData_5Hf0 = {"Hf0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_13CemThermoData_5Hf0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_5Hf0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Hf0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 158, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Hf0", 1, 2, 2, 1); __PYX_ERR(0, 158, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Hf0") < 0)) __PYX_ERR(0, 158, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Hf0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 158, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.Hf0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_13CemThermoData_4Hf0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_4Hf0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Hf0", 1);

  /* "chemeng/cementdata.pyx":159
 * 
 *     def Hf0(self, T):
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]             # <<<<<<<<<<<<<<
 * 
 *     def S0(self, T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_4, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":158
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.Hf0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":161
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_7S0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_13CemThermoData_7S0 = {"S0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_13CemThermoData_7S0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_7S0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("S0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("S0", 1, 2, 2, 1); __PYX_ERR(0, 161, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "S0") < 0)) __PYX_ERR(0, 161, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("S0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 161, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_13CemThermoData_6S0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_6S0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("S0", 1);

  /* "chemeng/cementdata.pyx":162
 * 
 *     def S0(self, T):
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_T};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_2_0, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":161
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":164
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(5):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_9__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_13CemThermoData_9__str__ = {"__str__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_13CemThermoData_9__str__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_9__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__str__") < 0)) __PYX_ERR(0, 164, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__str__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 164, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_13CemThermoData_8__str__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_8__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_retval = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "chemeng/cementdata.pyx":165
 * 
 *     def __str__(self):
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["             # <<<<<<<<<<<<<<
 *         for i in range(5):
 *             retval+=str(self.a[i])+", "
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_CementPolynomial_Tmin, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_Tmax_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tmax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_notes_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_comments); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_a_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_retval = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":166
 *     def __str__(self):
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(5):             # <<<<<<<<<<<<<<
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 5; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chemeng/cementdata.pyx":167
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(5):
 *             retval+=str(self.a[i])+", "             # <<<<<<<<<<<<<<
 *         retval = retval[:-2] + "]}"
 *         return retval
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_retval, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_retval, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "chemeng/cementdata.pyx":168
 *         for i in range(5):
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_retval, 0, -2L, NULL, NULL, &__pyx_slice__4, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_retval, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "chemeng/cementdata.pyx":169
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":164
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(5):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":171
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_11__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_13CemThermoData_11__repr__ = {"__repr__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_13CemThermoData_11__repr__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_13CemThermoData_11__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__repr__") < 0)) __PYX_ERR(0, 171, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__repr__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 171, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_13CemThermoData_10__repr__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_13CemThermoData_10__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "chemeng/cementdata.pyx":172
 * 
 *     def __repr__(self):
 *         return self.__str__()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":171
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.CemThermoData.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":175
 * 
 * 
 * def Validate_Cem(species,phase,a,H298,S298,T,error,HTmH298,STmS298):             # <<<<<<<<<<<<<<
 *     H = a[0] * T + (a[1] * T**2)/2.0 - a[2]/T + a[3]
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_3Validate_Cem(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_3Validate_Cem = {"Validate_Cem", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_3Validate_Cem, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_3Validate_Cem(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_species = 0;
  PyObject *__pyx_v_phase = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_H298 = 0;
  PyObject *__pyx_v_S298 = 0;
  PyObject *__pyx_v_T = 0;
  PyObject *__pyx_v_error = 0;
  PyObject *__pyx_v_HTmH298 = 0;
  PyObject *__pyx_v_STmS298 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Validate_Cem (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_species,&__pyx_n_s_phase,&__pyx_n_s_a,&__pyx_n_s_H298,&__pyx_n_s_S298,&__pyx_n_s_T,&__pyx_n_s_error,&__pyx_n_s_HTmH298,&__pyx_n_s_STmS298,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_species)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_phase)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, 1); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, 2); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_H298)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, 3); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_S298)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[4]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, 4); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[5]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, 5); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_error)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[6]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, 6); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_HTmH298)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[7]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, 7); __PYX_ERR(0, 175, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_STmS298)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[8]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, 8); __PYX_ERR(0, 175, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Validate_Cem") < 0)) __PYX_ERR(0, 175, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 9)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
      values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
      values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
    }
    __pyx_v_species = values[0];
    __pyx_v_phase = values[1];
    __pyx_v_a = values[2];
    __pyx_v_H298 = values[3];
    __pyx_v_S298 = values[4];
    __pyx_v_T = values[5];
    __pyx_v_error = values[6];
    __pyx_v_HTmH298 = values[7];
    __pyx_v_STmS298 = values[8];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Validate_Cem", 1, 9, 9, __pyx_nargs); __PYX_ERR(0, 175, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.Validate_Cem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_2Validate_Cem(__pyx_self, __pyx_v_species, __pyx_v_phase, __pyx_v_a, __pyx_v_H298, __pyx_v_S298, __pyx_v_T, __pyx_v_error, __pyx_v_HTmH298, __pyx_v_STmS298);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_2Validate_Cem(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_species, PyObject *__pyx_v_phase, PyObject *__pyx_v_a, PyObject *__pyx_v_H298, PyObject *__pyx_v_S298, PyObject *__pyx_v_T, PyObject *__pyx_v_error, PyObject *__pyx_v_HTmH298, PyObject *__pyx_v_STmS298) {
  PyObject *__pyx_v_H = NULL;
  PyObject *__pyx_v_S = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Validate_Cem", 1);

  /* "chemeng/cementdata.pyx":176
 * 
 * def Validate_Cem(species,phase,a,H298,S298,T,error,HTmH298,STmS298):
 *     H = a[0] * T + (a[1] * T**2)/2.0 - a[2]/T + a[3]             # <<<<<<<<<<<<<<
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]
 *     if math.fabs(((H - H298) - HTmH298)/HTmH298 ) > error:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_a, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyFloat_DivideObjC(__pyx_t_4, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_a, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_a, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_H = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":177
 * def Validate_Cem(species,phase,a,H298,S298,T,error,HTmH298,STmS298):
 *     H = a[0] * T + (a[1] * T**2)/2.0 - a[2]/T + a[3]
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]             # <<<<<<<<<<<<<<
 *     if math.fabs(((H - H298) - HTmH298)/HTmH298 ) > error:
 *         print "Error for H at ",T, species,phase,math.fabs(((H - H298) - HTmH298)/HTmH298 )*100.0, " percent"
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_T};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_a, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_a, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_2_0, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_a, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_S = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "chemeng/cementdata.pyx":178
 *     H = a[0] * T + (a[1] * T**2)/2.0 - a[2]/T + a[3]
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]
 *     if math.fabs(((H - H298) - HTmH298)/HTmH298 ) > error:             # <<<<<<<<<<<<<<
 *         print "Error for H at ",T, species,phase,math.fabs(((H - H298) - HTmH298)/HTmH298 )*100.0, " percent"
 *     if math.fabs(((S - S298) - STmS298)/STmS298 ) > error:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fabs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_H, __pyx_v_H298); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_v_HTmH298); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_HTmH298); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_1};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_error, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "chemeng/cementdata.pyx":179
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]
 *     if math.fabs(((H - H298) - HTmH298)/HTmH298 ) > error:
 *         print "Error for H at ",T, species,phase,math.fabs(((H - H298) - HTmH298)/HTmH298 )*100.0, " percent"             # <<<<<<<<<<<<<<
 *     if math.fabs(((S - S298) - STmS298)/STmS298 ) > error:
 *         print "Error for H at ",T, species,phase,  math.fabs(((S - S298) - STmS298)/STmS298 )*100.0, " percent"
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_math); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_fabs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_H, __pyx_v_H298); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_v_HTmH298); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_HTmH298); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_float_100_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_s_Error_for_H_at);
    __Pyx_GIVEREF(__pyx_kp_s_Error_for_H_at);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_Error_for_H_at)) __PYX_ERR(0, 179, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_T);
    __Pyx_GIVEREF(__pyx_v_T);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_T)) __PYX_ERR(0, 179, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_species);
    __Pyx_GIVEREF(__pyx_v_species);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_species)) __PYX_ERR(0, 179, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_phase);
    __Pyx_GIVEREF(__pyx_v_phase);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_phase)) __PYX_ERR(0, 179, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error);
    __Pyx_INCREF(__pyx_kp_s_percent);
    __Pyx_GIVEREF(__pyx_kp_s_percent);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_kp_s_percent)) __PYX_ERR(0, 179, __pyx_L1_error);
    __pyx_t_1 = 0;
    if (__Pyx_Print(0, __pyx_t_3, 1) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "chemeng/cementdata.pyx":178
 *     H = a[0] * T + (a[1] * T**2)/2.0 - a[2]/T + a[3]
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]
 *     if math.fabs(((H - H298) - HTmH298)/HTmH298 ) > error:             # <<<<<<<<<<<<<<
 *         print "Error for H at ",T, species,phase,math.fabs(((H - H298) - HTmH298)/HTmH298 )*100.0, " percent"
 *     if math.fabs(((S - S298) - STmS298)/STmS298 ) > error:
 */
  }

  /* "chemeng/cementdata.pyx":180
 *     if math.fabs(((H - H298) - HTmH298)/HTmH298 ) > error:
 *         print "Error for H at ",T, species,phase,math.fabs(((H - H298) - HTmH298)/HTmH298 )*100.0, " percent"
 *     if math.fabs(((S - S298) - STmS298)/STmS298 ) > error:             # <<<<<<<<<<<<<<
 *         print "Error for H at ",T, species,phase,  math.fabs(((S - S298) - STmS298)/STmS298 )*100.0, " percent"
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_math); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fabs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_S, __pyx_v_S298); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_v_STmS298); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_STmS298); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_1};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_error, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "chemeng/cementdata.pyx":181
 *         print "Error for H at ",T, species,phase,math.fabs(((H - H298) - HTmH298)/HTmH298 )*100.0, " percent"
 *     if math.fabs(((S - S298) - STmS298)/STmS298 ) > error:
 *         print "Error for H at ",T, species,phase,  math.fabs(((S - S298) - STmS298)/STmS298 )*100.0, " percent"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_fabs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_S, __pyx_v_S298); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_v_STmS298); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_STmS298); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_float_100_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s_Error_for_H_at);
    __Pyx_GIVEREF(__pyx_kp_s_Error_for_H_at);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Error_for_H_at)) __PYX_ERR(0, 181, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_T);
    __Pyx_GIVEREF(__pyx_v_T);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_T)) __PYX_ERR(0, 181, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_species);
    __Pyx_GIVEREF(__pyx_v_species);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_species)) __PYX_ERR(0, 181, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_phase);
    __Pyx_GIVEREF(__pyx_v_phase);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_phase)) __PYX_ERR(0, 181, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error);
    __Pyx_INCREF(__pyx_kp_s_percent);
    __Pyx_GIVEREF(__pyx_kp_s_percent);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_kp_s_percent)) __PYX_ERR(0, 181, __pyx_L1_error);
    __pyx_t_1 = 0;
    if (__Pyx_Print(0, __pyx_t_2, 1) < 0) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "chemeng/cementdata.pyx":180
 *     if math.fabs(((H - H298) - HTmH298)/HTmH298 ) > error:
 *         print "Error for H at ",T, species,phase,math.fabs(((H - H298) - HTmH298)/HTmH298 )*100.0, " percent"
 *     if math.fabs(((S - S298) - STmS298)/STmS298 ) > error:             # <<<<<<<<<<<<<<
 *         print "Error for H at ",T, species,phase,  math.fabs(((S - S298) - STmS298)/STmS298 )*100.0, " percent"
 * 
 */
  }

  /* "chemeng/cementdata.pyx":175
 * 
 * 
 * def Validate_Cem(species,phase,a,H298,S298,T,error,HTmH298,STmS298):             # <<<<<<<<<<<<<<
 *     H = a[0] * T + (a[1] * T**2)/2.0 - a[2]/T + a[3]
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.Validate_Cem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_H);
  __Pyx_XDECREF(__pyx_v_S);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":235
 * 
 * class HPThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_12HPThermoData_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_12HPThermoData_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_Tmin = 0;
  PyObject *__pyx_v_Tmax = 0;
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_notes = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_Tmin,&__pyx_n_s_Tmax,&__pyx_n_s_a,&__pyx_n_s_notes,0};
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_kp_s__2)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Tmin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 1); __PYX_ERR(0, 235, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Tmax)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 2); __PYX_ERR(0, 235, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, 3); __PYX_ERR(0, 235, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_notes);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 235, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_Tmin = values[1];
    __pyx_v_Tmax = values[2];
    __pyx_v_a = values[3];
    __pyx_v_notes = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, __pyx_nargs); __PYX_ERR(0, 235, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_12HPThermoData___init__(__pyx_self, __pyx_v_self, __pyx_v_Tmin, __pyx_v_Tmax, __pyx_v_a, __pyx_v_notes);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tmin, PyObject *__pyx_v_Tmax, PyObject *__pyx_v_a, PyObject *__pyx_v_notes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "chemeng/cementdata.pyx":236
 * class HPThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required             # <<<<<<<<<<<<<<
 *         self.a = a
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ThermoConstantsType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_v_self, __pyx_v_Tmin, __pyx_v_Tmax, __pyx_v_notes};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":237
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a             # <<<<<<<<<<<<<<
 * 
 *     def Cp0(self, T):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_a, __pyx_v_a) < 0) __PYX_ERR(0, 237, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":235
 * 
 * class HPThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":239
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_3Cp0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_12HPThermoData_3Cp0 = {"Cp0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_12HPThermoData_3Cp0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_3Cp0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Cp0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Cp0", 1, 2, 2, 1); __PYX_ERR(0, 239, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Cp0") < 0)) __PYX_ERR(0, 239, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Cp0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 239, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.Cp0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_12HPThermoData_2Cp0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_2Cp0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Cp0", 1);

  /* "chemeng/cementdata.pyx":240
 * 
 *     def Cp0(self, T):
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)             # <<<<<<<<<<<<<<
 * 
 *     def Hf0(self, T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Power(__pyx_v_T, __pyx_float_0_5, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":239
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.Cp0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":242
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_5Hf0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_12HPThermoData_5Hf0 = {"Hf0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_12HPThermoData_5Hf0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_5Hf0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Hf0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 242, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Hf0", 1, 2, 2, 1); __PYX_ERR(0, 242, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Hf0") < 0)) __PYX_ERR(0, 242, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Hf0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 242, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.Hf0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_12HPThermoData_4Hf0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_4Hf0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Hf0", 1);

  /* "chemeng/cementdata.pyx":243
 * 
 *     def Hf0(self, T):
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]             # <<<<<<<<<<<<<<
 * 
 *     def S0(self, T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_v_T, __pyx_float_2_0, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_float_2_0, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_v_T, __pyx_float_0_5, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":242
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.Hf0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":245
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_7S0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_12HPThermoData_7S0 = {"S0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_12HPThermoData_7S0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_7S0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("S0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("S0", 1, 2, 2, 1); __PYX_ERR(0, 245, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "S0") < 0)) __PYX_ERR(0, 245, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("S0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 245, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_12HPThermoData_6S0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_6S0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("S0", 1);

  /* "chemeng/cementdata.pyx":246
 * 
 *     def S0(self, T):
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_T};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Power(__pyx_v_T, __pyx_float_2_0, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_float_2_0, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_v_T, __pyx_float_0_5, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":245
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":248
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(6):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_9__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_12HPThermoData_9__str__ = {"__str__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_12HPThermoData_9__str__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_9__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 248, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__str__") < 0)) __PYX_ERR(0, 248, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__str__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 248, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_12HPThermoData_8__str__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_8__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_retval = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "chemeng/cementdata.pyx":249
 * 
 *     def __str__(self):
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["             # <<<<<<<<<<<<<<
 *         for i in range(6):
 *             retval+=str(self.a[i])+", "
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_CementPolynomial_Tmin, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_Tmax_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tmax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_notes_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_comments); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_a_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_retval = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":250
 *     def __str__(self):
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(6):             # <<<<<<<<<<<<<<
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 6; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chemeng/cementdata.pyx":251
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(6):
 *             retval+=str(self.a[i])+", "             # <<<<<<<<<<<<<<
 *         retval = retval[:-2] + "]}"
 *         return retval
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_retval, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_retval, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "chemeng/cementdata.pyx":252
 *         for i in range(6):
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_retval, 0, -2L, NULL, NULL, &__pyx_slice__4, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_retval, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "chemeng/cementdata.pyx":253
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":248
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(6):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":255
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_11__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_12HPThermoData_11__repr__ = {"__repr__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_12HPThermoData_11__repr__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_12HPThermoData_11__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 255, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__repr__") < 0)) __PYX_ERR(0, 255, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__repr__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 255, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_12HPThermoData_10__repr__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_12HPThermoData_10__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "chemeng/cementdata.pyx":256
 * 
 *     def __repr__(self):
 *         return self.__str__()             # <<<<<<<<<<<<<<
 * 
 * speciesData["Ca5Si2CO11"].registerPhase("Spurrite")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":255
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.HPThermoData.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":328
 * 
 * class MulliteThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_Tmin = 0;
  PyObject *__pyx_v_Tmax = 0;
  PyObject *__pyx_v_notes = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_Tmin,&__pyx_n_s_Tmax,&__pyx_n_s_notes,0};
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)((PyObject*)__pyx_kp_s__2)));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Tmin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(0, 328, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_Tmax)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(0, 328, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_notes);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 328, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_self = values[0];
    __pyx_v_Tmin = values[1];
    __pyx_v_Tmax = values[2];
    __pyx_v_notes = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 328, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_17MulliteThermoData___init__(__pyx_self, __pyx_v_self, __pyx_v_Tmin, __pyx_v_Tmax, __pyx_v_notes);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_Tmin, PyObject *__pyx_v_Tmax, PyObject *__pyx_v_notes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "chemeng/cementdata.pyx":329
 * class MulliteThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required             # <<<<<<<<<<<<<<
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ThermoConstantsType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_v_self, __pyx_v_Tmin, __pyx_v_Tmax, __pyx_v_notes};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 4+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":330
 *     def __init__(self, Tmin, Tmax, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]             # <<<<<<<<<<<<<<
 * 
 *     def Cp0(self, T):
 */
  __pyx_t_1 = PyList_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_neg_6_34719844e_06);
  __Pyx_GIVEREF(__pyx_float_neg_6_34719844e_06);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_neg_6_34719844e_06)) __PYX_ERR(0, 330, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_6_96694385e_06);
  __Pyx_GIVEREF(__pyx_float_neg_6_96694385e_06);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_neg_6_96694385e_06)) __PYX_ERR(0, 330, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_6_89076313e_02);
  __Pyx_GIVEREF(__pyx_float_neg_6_89076313e_02);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_neg_6_89076313e_02)) __PYX_ERR(0, 330, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2_08446637e_03);
  __Pyx_GIVEREF(__pyx_float_neg_2_08446637e_03);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 3, __pyx_float_neg_2_08446637e_03)) __PYX_ERR(0, 330, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_3_77248082e_02);
  __Pyx_GIVEREF(__pyx_float_3_77248082e_02);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 4, __pyx_float_3_77248082e_02)) __PYX_ERR(0, 330, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_30438133eneg_01);
  __Pyx_GIVEREF(__pyx_float_1_30438133eneg_01);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 5, __pyx_float_1_30438133eneg_01)) __PYX_ERR(0, 330, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_8_70793049eneg_05);
  __Pyx_GIVEREF(__pyx_float_neg_8_70793049eneg_05);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 6, __pyx_float_neg_8_70793049eneg_05)) __PYX_ERR(0, 330, __pyx_L1_error);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_a, __pyx_t_1) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":328
 * 
 * class MulliteThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":332
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_3Cp0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_3Cp0 = {"Cp0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_3Cp0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_3Cp0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Cp0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Cp0", 1, 2, 2, 1); __PYX_ERR(0, 332, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Cp0") < 0)) __PYX_ERR(0, 332, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Cp0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 332, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.Cp0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_17MulliteThermoData_2Cp0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_2Cp0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Cp0", 1);

  /* "chemeng/cementdata.pyx":333
 * 
 *     def Cp0(self, T):
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2             # <<<<<<<<<<<<<<
 * 
 *     def Hf0(self, T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_int_neg_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_float_neg_0_5, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_1, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_1, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":332
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.Cp0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":335
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_5Hf0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_5Hf0 = {"Hf0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_5Hf0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_5Hf0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Hf0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("Hf0", 1, 2, 2, 1); __PYX_ERR(0, 335, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "Hf0") < 0)) __PYX_ERR(0, 335, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Hf0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 335, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.Hf0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_17MulliteThermoData_4Hf0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_4Hf0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Hf0", 1);

  /* "chemeng/cementdata.pyx":336
 * 
 *     def Hf0(self, T):
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3             # <<<<<<<<<<<<<<
 * 
 *     def S0(self, T):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_v_T, __pyx_float_0_5, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_v_T, __pyx_int_3, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_int_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":335
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.Hf0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":338
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_7S0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_7S0 = {"S0", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_7S0, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_7S0(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_T = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("S0 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_T,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_T)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("S0", 1, 2, 2, 1); __PYX_ERR(0, 338, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "S0") < 0)) __PYX_ERR(0, 338, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_T = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("S0", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 338, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_17MulliteThermoData_6S0(__pyx_self, __pyx_v_self, __pyx_v_T);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_6S0(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_T) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("S0", 1);

  /* "chemeng/cementdata.pyx":339
 * 
 *     def S0(self, T):
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Negative(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_2, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_1, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Power(__pyx_v_T, __pyx_float_neg_0_5, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_T};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_4, 2, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_5, __pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Power(__pyx_v_T, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_int_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":338
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.S0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":341
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_9__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_9__str__ = {"__str__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_9__str__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_9__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 341, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__str__") < 0)) __PYX_ERR(0, 341, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__str__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 341, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_17MulliteThermoData_8__str__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_8__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_retval = NULL;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "chemeng/cementdata.pyx":342
 * 
 *     def __str__(self):
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["             # <<<<<<<<<<<<<<
 *         for i in range(7):
 *             retval+=str(self.a[i])+", "
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_CementPolynomial_Tmin, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_Tmax_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Tmax); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_notes_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_comments); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_a_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_retval = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "chemeng/cementdata.pyx":343
 *     def __str__(self):
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):             # <<<<<<<<<<<<<<
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 7; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "chemeng/cementdata.pyx":344
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 *             retval+=str(self.a[i])+", "             # <<<<<<<<<<<<<<
 *         retval = retval[:-2] + "]}"
 *         return retval
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_retval, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_retval, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "chemeng/cementdata.pyx":345
 *         for i in range(7):
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_retval, 0, -2L, NULL, NULL, &__pyx_slice__4, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_retval, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "chemeng/cementdata.pyx":346
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":341
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "chemeng/cementdata.pyx":348
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_11__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_11__repr__ = {"__repr__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_11__repr__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_7chemeng_10cementdata_17MulliteThermoData_11__repr__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__repr__") < 0)) __PYX_ERR(0, 348, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__repr__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 348, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7chemeng_10cementdata_17MulliteThermoData_10__repr__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7chemeng_10cementdata_17MulliteThermoData_10__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "chemeng/cementdata.pyx":349
 * 
 *     def __repr__(self):
 *         return self.__str__()             # <<<<<<<<<<<<<<
 * 
 * speciesData["Al6Si2O13"].registerPhase("Mullite")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "chemeng/cementdata.pyx":348
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("chemeng.cementdata.MulliteThermoData.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static int __pyx_import_star_set(PyObject *o, PyObject* py_name, char *name) {
  static const char* internal_type_names[] = {
    "__pyx_ctuple_double",
    "__pyx_ctuple_double_struct",
    "__pyx_ctuple_long",
    "__pyx_ctuple_long_struct",
    0
  };
  const char** type_name = internal_type_names;
  while (*type_name) {
    if (__Pyx_StrEq(name, *type_name)) {
      PyErr_Format(PyExc_TypeError, "Cannot overwrite C type %s", name);
      goto bad;
    }
    type_name++;
  }
  if (0);
  else {
    if (PyObject_SetAttr(__pyx_m, py_name, o) < 0) goto bad;
  }
  return 0;
  bad:
  return -1;
}

static int
__Pyx_import_all_from(PyObject *locals, PyObject *v)
{
    PyObject *all = PyObject_GetAttrString(v, "__all__");
    PyObject *dict, *name, *value;
    int skip_leading_underscores = 0;
    int pos, err;
    if (all == NULL) {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return -1;
        PyErr_Clear();
        dict = PyObject_GetAttrString(v, "__dict__");
        if (dict == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError))
                return -1;
            PyErr_SetString(PyExc_ImportError,
            "from-import-* object has no __dict__ and no __all__");
            return -1;
        }
#if PY_MAJOR_VERSION < 3
        all = PyObject_CallMethod(dict, (char *)"keys", NULL);
#else
        all = PyMapping_Keys(dict);
#endif
        Py_DECREF(dict);
        if (all == NULL)
            return -1;
        skip_leading_underscores = 1;
    }
    for (pos = 0, err = 0; ; pos++) {
        name = PySequence_GetItem(all, pos);
        if (name == NULL) {
            if (!PyErr_ExceptionMatches(PyExc_IndexError))
                err = -1;
            else
                PyErr_Clear();
            break;
        }
        if (skip_leading_underscores &&
#if PY_MAJOR_VERSION < 3
            likely(PyString_Check(name)) &&
            PyString_AS_STRING(name)[0] == '_')
#else
            likely(PyUnicode_Check(name)) &&
            likely(__Pyx_PyUnicode_GET_LENGTH(name)) &&
            __Pyx_PyUnicode_READ_CHAR(name, 0) == '_')
#endif
        {
            Py_DECREF(name);
            continue;
        }
        value = PyObject_GetAttr(v, name);
        if (value == NULL)
            err = -1;
        else if (PyDict_CheckExact(locals))
            err = PyDict_SetItem(locals, name, value);
        else
            err = PyObject_SetItem(locals, name, value);
        Py_DECREF(name);
        Py_XDECREF(value);
        if (err != 0)
            break;
    }
    Py_DECREF(all);
    return err;
}
static int __pyx_import_star(PyObject* m) {
    int i;
    int ret = -1;
    char* s;
    PyObject *locals = 0;
    PyObject *list = 0;
#if PY_MAJOR_VERSION >= 3
    PyObject *utf8_name = 0;
#endif
    PyObject *name;
    PyObject *item;
    locals = PyDict_New();              if (!locals) goto bad;
    if (__Pyx_import_all_from(locals, m) < 0) goto bad;
    list = PyDict_Items(locals);        if (!list) goto bad;
    for(i=0; i<PyList_GET_SIZE(list); i++) {
        name = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 0);
        item = PyTuple_GET_ITEM(PyList_GET_ITEM(list, i), 1);
#if PY_MAJOR_VERSION >= 3
        utf8_name = PyUnicode_AsUTF8String(name);
        if (!utf8_name) goto bad;
        s = PyBytes_AS_STRING(utf8_name);
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
        Py_DECREF(utf8_name); utf8_name = 0;
#else
        s = PyString_AsString(name);
        if (!s) goto bad;
        if (__pyx_import_star_set(item, name, s) < 0) goto bad;
#endif
    }
    ret = 0;
bad:
    Py_XDECREF(locals);
    Py_XDECREF(list);
#if PY_MAJOR_VERSION >= 3
    Py_XDECREF(utf8_name);
#endif
    return ret;
}


#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
    {&__pyx_kp_s_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 0, 1, 0},
    {&__pyx_n_s_Acmite, __pyx_k_Acmite, sizeof(__pyx_k_Acmite), 0, 0, 1, 1},
    {&__pyx_n_s_Al, __pyx_k_Al, sizeof(__pyx_k_Al), 0, 0, 1, 1},
    {&__pyx_kp_s_Al2Si2O5_OH_4, __pyx_k_Al2Si2O5_OH_4, sizeof(__pyx_k_Al2Si2O5_OH_4), 0, 0, 1, 0},
    {&__pyx_kp_s_Al2Si4O10_OH_2, __pyx_k_Al2Si4O10_OH_2, sizeof(__pyx_k_Al2Si4O10_OH_2), 0, 0, 1, 0},
    {&__pyx_n_s_Al2SiO5, __pyx_k_Al2SiO5, sizeof(__pyx_k_Al2SiO5), 0, 0, 1, 1},
    {&__pyx_n_s_Al2TiO5, __pyx_k_Al2TiO5, sizeof(__pyx_k_Al2TiO5), 0, 0, 1, 1},
    {&__pyx_n_s_Al6Si2O13, __pyx_k_Al6Si2O13, sizeof(__pyx_k_Al6Si2O13), 0, 0, 1, 1},
    {&__pyx_n_s_Albite, __pyx_k_Albite, sizeof(__pyx_k_Albite), 0, 0, 1, 1},
    {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
    {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
    {&__pyx_n_s_Ca, __pyx_k_Ca, sizeof(__pyx_k_Ca), 0, 0, 1, 1},
    {&__pyx_n_s_Ca12Al14O33, __pyx_k_Ca12Al14O33, sizeof(__pyx_k_Ca12Al14O33), 0, 0, 1, 1},
    {&__pyx_kp_s_Ca2Al2Si3O10_OH_2, __pyx_k_Ca2Al2Si3O10_OH_2, sizeof(__pyx_k_Ca2Al2Si3O10_OH_2), 0, 0, 1, 0},
    {&__pyx_n_s_Ca2Al2SiO7, __pyx_k_Ca2Al2SiO7, sizeof(__pyx_k_Ca2Al2SiO7), 0, 0, 1, 1},
    {&__pyx_kp_s_Ca2Al3Si3O12_OH, __pyx_k_Ca2Al3Si3O12_OH, sizeof(__pyx_k_Ca2Al3Si3O12_OH), 0, 0, 1, 0},
    {&__pyx_n_s_Ca2B2O5, __pyx_k_Ca2B2O5, sizeof(__pyx_k_Ca2B2O5), 0, 0, 1, 1},
    {&__pyx_n_s_Ca2Fe2O5, __pyx_k_Ca2Fe2O5, sizeof(__pyx_k_Ca2Fe2O5), 0, 0, 1, 1},
    {&__pyx_n_s_Ca2SiO4, __pyx_k_Ca2SiO4, sizeof(__pyx_k_Ca2SiO4), 0, 0, 1, 1},
    {&__pyx_n_s_Ca3Al2O6, __pyx_k_Ca3Al2O6, sizeof(__pyx_k_Ca3Al2O6), 0, 0, 1, 1},
    {&__pyx_n_s_Ca3Al2Si3O12, __pyx_k_Ca3Al2Si3O12, sizeof(__pyx_k_Ca3Al2Si3O12), 0, 0, 1, 1},
    {&__pyx_n_s_Ca3B2O6, __pyx_k_Ca3B2O6, sizeof(__pyx_k_Ca3B2O6), 0, 0, 1, 1},
    {&__pyx_n_s_Ca3Si2O7, __pyx_k_Ca3Si2O7, sizeof(__pyx_k_Ca3Si2O7), 0, 0, 1, 1},
    {&__pyx_n_s_Ca3SiO5, __pyx_k_Ca3SiO5, sizeof(__pyx_k_Ca3SiO5), 0, 0, 1, 1},
    {&__pyx_n_s_Ca5Si2C2O13, __pyx_k_Ca5Si2C2O13, sizeof(__pyx_k_Ca5Si2C2O13), 0, 0, 1, 1},
    {&__pyx_n_s_Ca5Si2CO11, __pyx_k_Ca5Si2CO11, sizeof(__pyx_k_Ca5Si2CO11), 0, 0, 1, 1},
    {&__pyx_n_s_CaAl2O4, __pyx_k_CaAl2O4, sizeof(__pyx_k_CaAl2O4), 0, 0, 1, 1},
    {&__pyx_n_s_CaAl2Si2O8, __pyx_k_CaAl2Si2O8, sizeof(__pyx_k_CaAl2Si2O8), 0, 0, 1, 1},
    {&__pyx_n_s_CaAl2SiO6, __pyx_k_CaAl2SiO6, sizeof(__pyx_k_CaAl2SiO6), 0, 0, 1, 1},
    {&__pyx_n_s_CaAl4O7, __pyx_k_CaAl4O7, sizeof(__pyx_k_CaAl4O7), 0, 0, 1, 1},
    {&__pyx_kp_s_CaAl4Si2O10_OH_2, __pyx_k_CaAl4Si2O10_OH_2, sizeof(__pyx_k_CaAl4Si2O10_OH_2), 0, 0, 1, 0},
    {&__pyx_n_s_CaB2O4, __pyx_k_CaB2O4, sizeof(__pyx_k_CaB2O4), 0, 0, 1, 1},
    {&__pyx_n_s_CaB4O7, __pyx_k_CaB4O7, sizeof(__pyx_k_CaB4O7), 0, 0, 1, 1},
    {&__pyx_n_s_CaFe2O4, __pyx_k_CaFe2O4, sizeof(__pyx_k_CaFe2O4), 0, 0, 1, 1},
    {&__pyx_n_s_CaMgC2O6, __pyx_k_CaMgC2O6, sizeof(__pyx_k_CaMgC2O6), 0, 0, 1, 1},
    {&__pyx_n_s_CaMgSi2O6, __pyx_k_CaMgSi2O6, sizeof(__pyx_k_CaMgSi2O6), 0, 0, 1, 1},
    {&__pyx_n_s_CaSiO3, __pyx_k_CaSiO3, sizeof(__pyx_k_CaSiO3), 0, 0, 1, 1},
    {&__pyx_n_s_CaTiO3, __pyx_k_CaTiO3, sizeof(__pyx_k_CaTiO3), 0, 0, 1, 1},
    {&__pyx_n_s_CaTiSiO5, __pyx_k_CaTiSiO5, sizeof(__pyx_k_CaTiSiO5), 0, 0, 1, 1},
    {&__pyx_n_s_CemThermoData, __pyx_k_CemThermoData, sizeof(__pyx_k_CemThermoData), 0, 0, 1, 1},
    {&__pyx_n_s_CemThermoData_Cp0, __pyx_k_CemThermoData_Cp0, sizeof(__pyx_k_CemThermoData_Cp0), 0, 0, 1, 1},
    {&__pyx_n_s_CemThermoData_Hf0, __pyx_k_CemThermoData_Hf0, sizeof(__pyx_k_CemThermoData_Hf0), 0, 0, 1, 1},
    {&__pyx_n_s_CemThermoData_S0, __pyx_k_CemThermoData_S0, sizeof(__pyx_k_CemThermoData_S0), 0, 0, 1, 1},
    {&__pyx_n_s_CemThermoData___init, __pyx_k_CemThermoData___init, sizeof(__pyx_k_CemThermoData___init), 0, 0, 1, 1},
    {&__pyx_n_s_CemThermoData___repr, __pyx_k_CemThermoData___repr, sizeof(__pyx_k_CemThermoData___repr), 0, 0, 1, 1},
    {&__pyx_n_s_CemThermoData___str, __pyx_k_CemThermoData___str, sizeof(__pyx_k_CemThermoData___str), 0, 0, 1, 1},
    {&__pyx_kp_s_CementPolynomial_Tmin, __pyx_k_CementPolynomial_Tmin, sizeof(__pyx_k_CementPolynomial_Tmin), 0, 0, 1, 0},
    {&__pyx_n_s_CementThermoData, __pyx_k_CementThermoData, sizeof(__pyx_k_CementThermoData), 0, 0, 1, 1},
    {&__pyx_n_s_CementThermoData_Cp0, __pyx_k_CementThermoData_Cp0, sizeof(__pyx_k_CementThermoData_Cp0), 0, 0, 1, 1},
    {&__pyx_n_s_CementThermoData_Hf0, __pyx_k_CementThermoData_Hf0, sizeof(__pyx_k_CementThermoData_Hf0), 0, 0, 1, 1},
    {&__pyx_n_s_CementThermoData_S0, __pyx_k_CementThermoData_S0, sizeof(__pyx_k_CementThermoData_S0), 0, 0, 1, 1},
    {&__pyx_n_s_CementThermoData___init, __pyx_k_CementThermoData___init, sizeof(__pyx_k_CementThermoData___init), 0, 0, 1, 1},
    {&__pyx_n_s_CementThermoData___repr, __pyx_k_CementThermoData___repr, sizeof(__pyx_k_CementThermoData___repr), 0, 0, 1, 1},
    {&__pyx_n_s_CementThermoData___str, __pyx_k_CementThermoData___str, sizeof(__pyx_k_CementThermoData___str), 0, 0, 1, 1},
    {&__pyx_kp_s_Cement_New_Tests_csv, __pyx_k_Cement_New_Tests_csv, sizeof(__pyx_k_Cement_New_Tests_csv), 0, 0, 1, 0},
    {&__pyx_kp_s_Cement_Therm_New2_csv, __pyx_k_Cement_Therm_New2_csv, sizeof(__pyx_k_Cement_Therm_New2_csv), 0, 0, 1, 0},
    {&__pyx_kp_s_Cement_csv, __pyx_k_Cement_csv, sizeof(__pyx_k_Cement_csv), 0, 0, 1, 0},
    {&__pyx_n_s_Cl, __pyx_k_Cl, sizeof(__pyx_k_Cl), 0, 0, 1, 1},
    {&__pyx_n_s_Components, __pyx_k_Components, sizeof(__pyx_k_Components), 0, 0, 1, 1},
    {&__pyx_n_s_Cp, __pyx_k_Cp, sizeof(__pyx_k_Cp), 0, 0, 1, 1},
    {&__pyx_n_s_Cp0, __pyx_k_Cp0, sizeof(__pyx_k_Cp0), 0, 0, 1, 1},
    {&__pyx_n_s_Crystal, __pyx_k_Crystal, sizeof(__pyx_k_Crystal), 0, 0, 1, 1},
    {&__pyx_n_s_Diopside, __pyx_k_Diopside, sizeof(__pyx_k_Diopside), 0, 0, 1, 1},
    {&__pyx_n_s_Dolomite, __pyx_k_Dolomite, sizeof(__pyx_k_Dolomite), 0, 0, 1, 1},
    {&__pyx_n_s_Enstatite, __pyx_k_Enstatite, sizeof(__pyx_k_Enstatite), 0, 0, 1, 1},
    {&__pyx_kp_s_Error_for_H_at, __pyx_k_Error_for_H_at, sizeof(__pyx_k_Error_for_H_at), 0, 0, 1, 0},
    {&__pyx_kp_s_Error_in_Cp, __pyx_k_Error_in_Cp, sizeof(__pyx_k_Error_in_Cp), 0, 0, 1, 0},
    {&__pyx_kp_s_Error_in_G_Htr_T, __pyx_k_Error_in_G_Htr_T, sizeof(__pyx_k_Error_in_G_Htr_T), 0, 0, 1, 0},
    {&__pyx_kp_s_Error_in_H_Hr, __pyx_k_Error_in_H_Hr, sizeof(__pyx_k_Error_in_H_Hr), 0, 0, 1, 0},
    {&__pyx_kp_s_Error_in_S, __pyx_k_Error_in_S, sizeof(__pyx_k_Error_in_S), 0, 0, 1, 0},
    {&__pyx_n_s_Exit, __pyx_k_Exit, sizeof(__pyx_k_Exit), 0, 0, 1, 1},
    {&__pyx_n_s_Fayalite, __pyx_k_Fayalite, sizeof(__pyx_k_Fayalite), 0, 0, 1, 1},
    {&__pyx_n_s_Fe, __pyx_k_Fe, sizeof(__pyx_k_Fe), 0, 0, 1, 1},
    {&__pyx_n_s_Fe2Si2O6, __pyx_k_Fe2Si2O6, sizeof(__pyx_k_Fe2Si2O6), 0, 0, 1, 1},
    {&__pyx_n_s_Fe2SiO4, __pyx_k_Fe2SiO4, sizeof(__pyx_k_Fe2SiO4), 0, 0, 1, 1},
    {&__pyx_n_s_Fe2TiO4, __pyx_k_Fe2TiO4, sizeof(__pyx_k_Fe2TiO4), 0, 0, 1, 1},
    {&__pyx_n_s_FeCl3, __pyx_k_FeCl3, sizeof(__pyx_k_FeCl3), 0, 0, 1, 1},
    {&__pyx_n_s_FeTiO3, __pyx_k_FeTiO3, sizeof(__pyx_k_FeTiO3), 0, 0, 1, 1},
    {&__pyx_n_s_Ferrosilite, __pyx_k_Ferrosilite, sizeof(__pyx_k_Ferrosilite), 0, 0, 1, 1},
    {&__pyx_n_s_Gfe, __pyx_k_Gfe, sizeof(__pyx_k_Gfe), 0, 0, 1, 1},
    {&__pyx_n_s_Gfox, __pyx_k_Gfox, sizeof(__pyx_k_Gfox), 0, 0, 1, 1},
    {&__pyx_n_s_Gibbs0, __pyx_k_Gibbs0, sizeof(__pyx_k_Gibbs0), 0, 0, 1, 1},
    {&__pyx_n_s_GmHoT, __pyx_k_GmHoT, sizeof(__pyx_k_GmHoT), 0, 0, 1, 1},
    {&__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
    {&__pyx_n_s_H298, __pyx_k_H298, sizeof(__pyx_k_H298), 0, 0, 1, 1},
    {&__pyx_n_s_H2O, __pyx_k_H2O, sizeof(__pyx_k_H2O), 0, 0, 1, 1},
    {&__pyx_n_s_HPThermoData, __pyx_k_HPThermoData, sizeof(__pyx_k_HPThermoData), 0, 0, 1, 1},
    {&__pyx_n_s_HPThermoData_Cp0, __pyx_k_HPThermoData_Cp0, sizeof(__pyx_k_HPThermoData_Cp0), 0, 0, 1, 1},
    {&__pyx_n_s_HPThermoData_Hf0, __pyx_k_HPThermoData_Hf0, sizeof(__pyx_k_HPThermoData_Hf0), 0, 0, 1, 1},
    {&__pyx_n_s_HPThermoData_S0, __pyx_k_HPThermoData_S0, sizeof(__pyx_k_HPThermoData_S0), 0, 0, 1, 1},
    {&__pyx_n_s_HPThermoData___init, __pyx_k_HPThermoData___init, sizeof(__pyx_k_HPThermoData___init), 0, 0, 1, 1},
    {&__pyx_n_s_HPThermoData___repr, __pyx_k_HPThermoData___repr, sizeof(__pyx_k_HPThermoData___repr), 0, 0, 1, 1},
    {&__pyx_n_s_HPThermoData___str, __pyx_k_HPThermoData___str, sizeof(__pyx_k_HPThermoData___str), 0, 0, 1, 1},
    {&__pyx_kp_s_HT_H298, __pyx_k_HT_H298, sizeof(__pyx_k_HT_H298), 0, 0, 1, 0},
    {&__pyx_n_s_HTmH298, __pyx_k_HTmH298, sizeof(__pyx_k_HTmH298), 0, 0, 1, 1},
    {&__pyx_n_s_Hf0, __pyx_k_Hf0, sizeof(__pyx_k_Hf0), 0, 0, 1, 1},
    {&__pyx_kp_s_Hf0_2, __pyx_k_Hf0_2, sizeof(__pyx_k_Hf0_2), 0, 0, 1, 0},
    {&__pyx_n_s_Hfe, __pyx_k_Hfe, sizeof(__pyx_k_Hfe), 0, 0, 1, 1},
    {&__pyx_n_s_Hfox, __pyx_k_Hfox, sizeof(__pyx_k_Hfox), 0, 0, 1, 1},
    {&__pyx_n_s_HmHr, __pyx_k_HmHr, sizeof(__pyx_k_HmHr), 0, 0, 1, 1},
    {&__pyx_n_s_Htr, __pyx_k_Htr, sizeof(__pyx_k_Htr), 0, 0, 1, 1},
    {&__pyx_n_s_Jadeite, __pyx_k_Jadeite, sizeof(__pyx_k_Jadeite), 0, 0, 1, 1},
    {&__pyx_n_s_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 1, 1},
    {&__pyx_kp_s_K3Fe0_5Al4Si19_5O47, __pyx_k_K3Fe0_5Al4Si19_5O47, sizeof(__pyx_k_K3Fe0_5Al4Si19_5O47), 0, 0, 1, 0},
    {&__pyx_kp_s_K3Mg0_5Al4Si19_5O47, __pyx_k_K3Mg0_5Al4Si19_5O47, sizeof(__pyx_k_K3Mg0_5Al4Si19_5O47), 0, 0, 1, 0},
    {&__pyx_n_s_KAlSi3O8, __pyx_k_KAlSi3O8, sizeof(__pyx_k_KAlSi3O8), 0, 0, 1, 1},
    {&__pyx_kp_s_K_of, __pyx_k_K_of, sizeof(__pyx_k_K_of), 0, 0, 1, 0},
    {&__pyx_n_s_Li, __pyx_k_Li, sizeof(__pyx_k_Li), 0, 0, 1, 1},
    {&__pyx_n_s_Li2TiO3, __pyx_k_Li2TiO3, sizeof(__pyx_k_Li2TiO3), 0, 0, 1, 1},
    {&__pyx_n_s_Liquid, __pyx_k_Liquid, sizeof(__pyx_k_Liquid), 0, 0, 1, 1},
    {&__pyx_n_s_Mg, __pyx_k_Mg, sizeof(__pyx_k_Mg), 0, 0, 1, 1},
    {&__pyx_n_s_Mg2Si2O6, __pyx_k_Mg2Si2O6, sizeof(__pyx_k_Mg2Si2O6), 0, 0, 1, 1},
    {&__pyx_n_s_Mg2SiO4, __pyx_k_Mg2SiO4, sizeof(__pyx_k_Mg2SiO4), 0, 0, 1, 1},
    {&__pyx_n_s_MgFe2O4, __pyx_k_MgFe2O4, sizeof(__pyx_k_MgFe2O4), 0, 0, 1, 1},
    {&__pyx_n_s_Mullite, __pyx_k_Mullite, sizeof(__pyx_k_Mullite), 0, 0, 1, 1},
    {&__pyx_n_s_MulliteThermoData, __pyx_k_MulliteThermoData, sizeof(__pyx_k_MulliteThermoData), 0, 0, 1, 1},
    {&__pyx_n_s_MulliteThermoData_Cp0, __pyx_k_MulliteThermoData_Cp0, sizeof(__pyx_k_MulliteThermoData_Cp0), 0, 0, 1, 1},
    {&__pyx_n_s_MulliteThermoData_Hf0, __pyx_k_MulliteThermoData_Hf0, sizeof(__pyx_k_MulliteThermoData_Hf0), 0, 0, 1, 1},
    {&__pyx_n_s_MulliteThermoData_S0, __pyx_k_MulliteThermoData_S0, sizeof(__pyx_k_MulliteThermoData_S0), 0, 0, 1, 1},
    {&__pyx_n_s_MulliteThermoData___init, __pyx_k_MulliteThermoData___init, sizeof(__pyx_k_MulliteThermoData___init), 0, 0, 1, 1},
    {&__pyx_n_s_MulliteThermoData___repr, __pyx_k_MulliteThermoData___repr, sizeof(__pyx_k_MulliteThermoData___repr), 0, 0, 1, 1},
    {&__pyx_n_s_MulliteThermoData___str, __pyx_k_MulliteThermoData___str, sizeof(__pyx_k_MulliteThermoData___str), 0, 0, 1, 1},
    {&__pyx_n_s_NA, __pyx_k_NA, sizeof(__pyx_k_NA), 0, 0, 1, 1},
    {&__pyx_n_s_NASAdata, __pyx_k_NASAdata, sizeof(__pyx_k_NASAdata), 0, 0, 1, 1},
    {&__pyx_n_s_Na, __pyx_k_Na, sizeof(__pyx_k_Na), 0, 0, 1, 1},
    {&__pyx_n_s_Na2TiO3, __pyx_k_Na2TiO3, sizeof(__pyx_k_Na2TiO3), 0, 0, 1, 1},
    {&__pyx_n_s_NaAlSi2O6, __pyx_k_NaAlSi2O6, sizeof(__pyx_k_NaAlSi2O6), 0, 0, 1, 1},
    {&__pyx_n_s_NaAlSi3O8, __pyx_k_NaAlSi3O8, sizeof(__pyx_k_NaAlSi3O8), 0, 0, 1, 1},
    {&__pyx_n_s_NaFeSi2O6, __pyx_k_NaFeSi2O6, sizeof(__pyx_k_NaFeSi2O6), 0, 0, 1, 1},
    {&__pyx_kp_s_NistData_csv, __pyx_k_NistData_csv, sizeof(__pyx_k_NistData_csv), 0, 0, 1, 0},
    {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
    {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
    {&__pyx_n_s_S0, __pyx_k_S0, sizeof(__pyx_k_S0), 0, 0, 1, 1},
    {&__pyx_kp_s_S0_2, __pyx_k_S0_2, sizeof(__pyx_k_S0_2), 0, 0, 1, 0},
    {&__pyx_n_s_S298, __pyx_k_S298, sizeof(__pyx_k_S298), 0, 0, 1, 1},
    {&__pyx_n_s_STmS298, __pyx_k_STmS298, sizeof(__pyx_k_STmS298), 0, 0, 1, 1},
    {&__pyx_n_s_Sanidine, __pyx_k_Sanidine, sizeof(__pyx_k_Sanidine), 0, 0, 1, 1},
    {&__pyx_n_s_Si, __pyx_k_Si, sizeof(__pyx_k_Si), 0, 0, 1, 1},
    {&__pyx_n_s_Spurrite, __pyx_k_Spurrite, sizeof(__pyx_k_Spurrite), 0, 0, 1, 1},
    {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
    {&__pyx_n_s_Testfile, __pyx_k_Testfile, sizeof(__pyx_k_Testfile), 0, 0, 1, 1},
    {&__pyx_n_s_Testreader, __pyx_k_Testreader, sizeof(__pyx_k_Testreader), 0, 0, 1, 1},
    {&__pyx_n_s_Testrow, __pyx_k_Testrow, sizeof(__pyx_k_Testrow), 0, 0, 1, 1},
    {&__pyx_n_s_ThermoConstantsType, __pyx_k_ThermoConstantsType, sizeof(__pyx_k_ThermoConstantsType), 0, 0, 1, 1},
    {&__pyx_n_s_Ti, __pyx_k_Ti, sizeof(__pyx_k_Ti), 0, 0, 1, 1},
    {&__pyx_n_s_TiS2, __pyx_k_TiS2, sizeof(__pyx_k_TiS2), 0, 0, 1, 1},
    {&__pyx_n_s_Tilleyite, __pyx_k_Tilleyite, sizeof(__pyx_k_Tilleyite), 0, 0, 1, 1},
    {&__pyx_n_s_Tmax, __pyx_k_Tmax, sizeof(__pyx_k_Tmax), 0, 0, 1, 1},
    {&__pyx_kp_s_Tmax_2, __pyx_k_Tmax_2, sizeof(__pyx_k_Tmax_2), 0, 0, 1, 0},
    {&__pyx_n_s_Tmin, __pyx_k_Tmin, sizeof(__pyx_k_Tmin), 0, 0, 1, 1},
    {&__pyx_n_s_V0, __pyx_k_V0, sizeof(__pyx_k_V0), 0, 0, 1, 1},
    {&__pyx_n_s_Validate_Cem, __pyx_k_Validate_Cem, sizeof(__pyx_k_Validate_Cem), 0, 0, 1, 1},
    {&__pyx_n_s_Validate_NIST_Data, __pyx_k_Validate_NIST_Data, sizeof(__pyx_k_Validate_NIST_Data), 0, 0, 1, 1},
    {&__pyx_n_s_Zn, __pyx_k_Zn, sizeof(__pyx_k_Zn), 0, 0, 1, 1},
    {&__pyx_n_s_Zn2TiO4, __pyx_k_Zn2TiO4, sizeof(__pyx_k_Zn2TiO4), 0, 0, 1, 1},
    {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
    {&__pyx_kp_s__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 0, 1, 0},
    {&__pyx_kp_s__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 1, 0},
    {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
    {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
    {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
    {&__pyx_n_s__64, __pyx_k__64, sizeof(__pyx_k__64), 0, 0, 1, 1},
    {&__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
    {&__pyx_n_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 1},
    {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
    {&__pyx_kp_s_a_2, __pyx_k_a_2, sizeof(__pyx_k_a_2), 0, 0, 1, 0},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_s_chemeng, __pyx_k_chemeng, sizeof(__pyx_k_chemeng), 0, 0, 1, 1},
    {&__pyx_n_s_chemeng_NASAdata, __pyx_k_chemeng_NASAdata, sizeof(__pyx_k_chemeng_NASAdata), 0, 0, 1, 1},
    {&__pyx_n_s_chemeng_cementdata, __pyx_k_chemeng_cementdata, sizeof(__pyx_k_chemeng_cementdata), 0, 0, 1, 1},
    {&__pyx_n_s_chemeng_config, __pyx_k_chemeng_config, sizeof(__pyx_k_chemeng_config), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_comments, __pyx_k_comments, sizeof(__pyx_k_comments), 0, 0, 1, 1},
    {&__pyx_n_s_config, __pyx_k_config, sizeof(__pyx_k_config), 0, 0, 1, 1},
    {&__pyx_n_s_constants, __pyx_k_constants, sizeof(__pyx_k_constants), 0, 0, 1, 1},
    {&__pyx_n_s_csv, __pyx_k_csv, sizeof(__pyx_k_csv), 0, 0, 1, 1},
    {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
    {&__pyx_n_s_datadir, __pyx_k_datadir, sizeof(__pyx_k_datadir), 0, 0, 1, 1},
    {&__pyx_n_s_datafile, __pyx_k_datafile, sizeof(__pyx_k_datafile), 0, 0, 1, 1},
    {&__pyx_n_s_delimiter, __pyx_k_delimiter, sizeof(__pyx_k_delimiter), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
    {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
    {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
    {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
    {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
    {&__pyx_n_s_fabs, __pyx_k_fabs, sizeof(__pyx_k_fabs), 0, 0, 1, 1},
    {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
    {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
    {&__pyx_n_s_highAlbite, __pyx_k_highAlbite, sizeof(__pyx_k_highAlbite), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
    {&__pyx_n_s_lambda, __pyx_k_lambda, sizeof(__pyx_k_lambda), 0, 0, 1, 1},
    {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
    {&__pyx_n_s_logkfe, __pyx_k_logkfe, sizeof(__pyx_k_logkfe), 0, 0, 1, 1},
    {&__pyx_n_s_logkfox, __pyx_k_logkfox, sizeof(__pyx_k_logkfox), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
    {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_mro_entries, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
    {&__pyx_n_s_notes, __pyx_k_notes, sizeof(__pyx_k_notes), 0, 0, 1, 1},
    {&__pyx_kp_s_notes_2, __pyx_k_notes_2, sizeof(__pyx_k_notes_2), 0, 0, 1, 0},
    {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
    {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
    {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
    {&__pyx_kp_s_percent, __pyx_k_percent, sizeof(__pyx_k_percent), 0, 0, 1, 0},
    {&__pyx_n_s_percent_error, __pyx_k_percent_error, sizeof(__pyx_k_percent_error), 0, 0, 1, 1},
    {&__pyx_n_s_phase, __pyx_k_phase, sizeof(__pyx_k_phase), 0, 0, 1, 1},
    {&__pyx_n_s_phases, __pyx_k_phases, sizeof(__pyx_k_phases), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_quotechar, __pyx_k_quotechar, sizeof(__pyx_k_quotechar), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_rb, __pyx_k_rb, sizeof(__pyx_k_rb), 0, 0, 1, 1},
    {&__pyx_n_s_reader, __pyx_k_reader, sizeof(__pyx_k_reader), 0, 0, 1, 1},
    {&__pyx_n_s_registerPhase, __pyx_k_registerPhase, sizeof(__pyx_k_registerPhase), 0, 0, 1, 1},
    {&__pyx_n_s_registerPhaseCoeffs, __pyx_k_registerPhaseCoeffs, sizeof(__pyx_k_registerPhaseCoeffs), 0, 0, 1, 1},
    {&__pyx_n_s_registerSpecies, __pyx_k_registerSpecies, sizeof(__pyx_k_registerSpecies), 0, 0, 1, 1},
    {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
    {&__pyx_n_s_retval, __pyx_k_retval, sizeof(__pyx_k_retval), 0, 0, 1, 1},
    {&__pyx_n_s_row, __pyx_k_row, sizeof(__pyx_k_row), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_species, __pyx_k_species, sizeof(__pyx_k_species), 0, 0, 1, 1},
    {&__pyx_n_s_speciesData, __pyx_k_speciesData, sizeof(__pyx_k_speciesData), 0, 0, 1, 1},
    {&__pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_k_src_chemeng_cementdata_pyx, sizeof(__pyx_k_src_chemeng_cementdata_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
    {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 52, __pyx_L1_error)
  __pyx_builtin_filter = __Pyx_GetBuiltinName(__pyx_n_s_filter); if (!__pyx_builtin_filter) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 41, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "chemeng/cementdata.pyx":43
 *         for i in range(7):
 *             retval+=str(self.a[i])+", "
 *         retval = retval[:-2] + "]}"             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
  __pyx_slice__4 = PySlice_New(Py_None, __pyx_int_neg_2, Py_None); if (unlikely(!__pyx_slice__4)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__4);
  __Pyx_GIVEREF(__pyx_slice__4);

  /* "chemeng/cementdata.pyx":4
 * #!/usr/bin/env python
 * from chemeng import *
 * import chemeng.NASAdata             # <<<<<<<<<<<<<<
 * import csv
 * import math
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_n_s_chemeng, __pyx_n_s_NASAdata); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "chemeng/cementdata.pyx":26
 * 
 * class CementThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */
  __pyx_tuple__10 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_Tmin, __pyx_n_s_Tmax, __pyx_n_s_a, __pyx_n_s_notes); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_init, 26, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_tuple__12 = PyTuple_Pack(1, ((PyObject*)__pyx_kp_s__2)); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "chemeng/cementdata.pyx":30
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_T); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Cp0, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 30, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":33
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 */
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Hf0, 33, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 33, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":36
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 */
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_S0, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 36, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":39
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 */
  __pyx_tuple__17 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_retval, __pyx_n_s_i); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_str, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 39, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":46
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_repr, 46, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 46, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":50
 * 
 * 
 * import chemeng.config             # <<<<<<<<<<<<<<
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_chemeng, __pyx_n_s_config); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "chemeng/cementdata.pyx":61
 *         Tmin = float(row[6])
 *         Tmax = float(row[7])
 *         a = map(float, row[8:15])             # <<<<<<<<<<<<<<
 *         if len(row[3].strip()) != 0:
 *             Hf0 = float(row[3]) * 1000.0
 */
  __pyx_slice__24 = PySlice_New(__pyx_int_8, __pyx_int_15, Py_None); if (unlikely(!__pyx_slice__24)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__24);
  __Pyx_GIVEREF(__pyx_slice__24);

  /* "chemeng/cementdata.pyx":52
 * import chemeng.config
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:             # <<<<<<<<<<<<<<
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip the header
 */
  __pyx_tuple__25 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "chemeng/cementdata.pyx":73
 * 
 * 
 * def Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,percent_error):             # <<<<<<<<<<<<<<
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 */
  __pyx_tuple__26 = PyTuple_Pack(9, __pyx_n_s_species, __pyx_n_s_phase, __pyx_n_s_T, __pyx_n_s_Cp, __pyx_n_s_S, __pyx_n_s_HmHr, __pyx_n_s_GmHoT, __pyx_n_s_Htr, __pyx_n_s_percent_error); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(9, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Validate_NIST_Data, 73, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 73, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":151
 * 
 * class CemThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_init, 151, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 151, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":155
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)
 * 
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Cp0, 155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 155, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":158
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]
 * 
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Hf0, 158, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 158, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":161
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]
 * 
 */
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_S0, 161, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 161, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":164
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(5):
 */
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_str, 164, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 164, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":171
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_repr, 171, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 171, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":175
 * 
 * 
 * def Validate_Cem(species,phase,a,H298,S298,T,error,HTmH298,STmS298):             # <<<<<<<<<<<<<<
 *     H = a[0] * T + (a[1] * T**2)/2.0 - a[2]/T + a[3]
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]
 */
  __pyx_tuple__34 = PyTuple_Pack(11, __pyx_n_s_species, __pyx_n_s_phase, __pyx_n_s_a, __pyx_n_s_H298, __pyx_n_s_S298, __pyx_n_s_T, __pyx_n_s_error, __pyx_n_s_HTmH298, __pyx_n_s_STmS298, __pyx_n_s_H, __pyx_n_s_S); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(9, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Validate_Cem, 175, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 175, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":235
 * 
 * class HPThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_init, 235, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 235, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":239
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)
 * 
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Cp0, 239, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 239, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":242
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]
 * 
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Hf0, 242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 242, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":245
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]
 * 
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_S0, 245, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 245, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":248
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(6):
 */
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_str, 248, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 248, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":255
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_repr, 255, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 255, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":258
 *         return self.__str__()
 * 
 * speciesData["Ca5Si2CO11"].registerPhase("Spurrite")             # <<<<<<<<<<<<<<
 * speciesData["Ca5Si2CO11"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[614.1,-0.003508,-2493100.0,-4168.0,-5897053.0,-3664.64123237], "37"), "Spurrite")
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_n_s_Spurrite); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "chemeng/cementdata.pyx":261
 * speciesData["Ca5Si2CO11"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[614.1,-0.003508,-2493100.0,-4168.0,-5897053.0,-3664.64123237], "37"), "Spurrite")
 * 
 * speciesData["CaMgC2O6"].registerPhase("Dolomite")             # <<<<<<<<<<<<<<
 * speciesData["CaMgC2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.9,-0.004905,0.0,-3456.2,-2311991.47077,-2287.7288762], "37"), "Dolomite")
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_n_s_Dolomite); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "chemeng/cementdata.pyx":264
 * speciesData["CaMgC2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.9,-0.004905,0.0,-3456.2,-2311991.47077,-2287.7288762], "37"), "Dolomite")
 * 
 * speciesData["Ca5Si2C2O13"].registerPhase("Tilleyite")             # <<<<<<<<<<<<<<
 * speciesData["Ca5Si2C2O13"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[741.7,-0.005345,-1434600,-5878.5,-6391033.598,-4523.276465], "37"), "Tilleyite")
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_n_s_Tilleyite); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "chemeng/cementdata.pyx":267
 * speciesData["Ca5Si2C2O13"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[741.7,-0.005345,-1434600,-5878.5,-6391033.598,-4523.276465], "37"), "Tilleyite")
 * 
 * speciesData["NaAlSi3O8"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.5,0.0,0.0,0.0,-4031406.775,-1890.58842253], "37"), "Liquid")
 * 
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_n_s_Liquid); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "chemeng/cementdata.pyx":270
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.5,0.0,0.0,0.0,-4031406.775,-1890.58842253], "37"), "Liquid")
 * 
 * speciesData["NaAlSi3O8"].registerPhase("Albite")             # <<<<<<<<<<<<<<
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3936515.41852,-2826.44236975], "37"), "Albite")
 * 
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_n_s_Albite); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "chemeng/cementdata.pyx":273
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3936515.41852,-2826.44236975], "37"), "Albite")
 * 
 * speciesData["NaAlSi3O8"].registerPhase("highAlbite")             # <<<<<<<<<<<<<<
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3926755.41852,-2813.04236975], "37"), "highAlbite")
 * 
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_n_s_highAlbite); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "chemeng/cementdata.pyx":282
 * speciesData["CaMgSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[345.3,0.0,0.0,0.0,-3312281.195,-1944.38014589], "37"), "Liquid")
 * 
 * speciesData["CaMgSi2O6"].registerPhase("Diopside")             # <<<<<<<<<<<<<<
 * speciesData["CaMgSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[314.5,0.000041,-2745900,-2020.1,-3235757.57446,-1898.63491189], "37"), "Diopside")
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_n_s_Diopside); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "chemeng/cementdata.pyx":288
 * speciesData["Mg2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[354.9,0.0,0.0,0.0,-3191463.435,-2021.07707436], "37"), "Liquid")
 * 
 * speciesData["Mg2Si2O6"].registerPhase("Enstatite")             # <<<<<<<<<<<<<<
 * speciesData["Mg2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[356.2,-0.002990,-596900.0,-3185.3,-3088328.86538,-2268.39597837], "37"), "Enstatite")
 * 
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_n_s_Enstatite); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "chemeng/cementdata.pyx":306
 * speciesData["KAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[367.3,0.0,0.0,0.0,-4081390.495,-1949.72727363], "37"), "Liquid")
 * 
 * speciesData["KAlSi3O8"].registerPhase("Sanidine")             # <<<<<<<<<<<<<<
 * speciesData["KAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[448.8,-0.010075,-1007300.0,-3973.1,-3964433.22114,-2789.93851863], "37"), "Sanidine")
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_n_s_Sanidine); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "chemeng/cementdata.pyx":312
 * speciesData["Al2SiO5"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[237.6,0.0,0.0,0.0,-2576200.44,-1286.74897962], "37"), "Liquid")
 * 
 * speciesData["NaAlSi2O6"].registerPhase("Jadeite")             # <<<<<<<<<<<<<<
 * speciesData["NaAlSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[301.1,0.010143,-2239300.0,-2055.1,-3054593.52897,-1835.70351849], "37"), "Jadeite")
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_n_s_Jadeite); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "chemeng/cementdata.pyx":315
 * speciesData["NaAlSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[301.1,0.010143,-2239300.0,-2055.1,-3054593.52897,-1835.70351849], "37"), "Jadeite")
 * 
 * speciesData["NaFeSi2O6"].registerPhase("Acmite")             # <<<<<<<<<<<<<<
 * speciesData["NaFeSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[307.1,0.016758,-1685500.0,-2125.8,-2611237.43295,-1839.83541625], "37"), "Acmite")
 * 
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_n_s_Acmite); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "chemeng/cementdata.pyx":318
 * speciesData["NaFeSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[307.1,0.016758,-1685500.0,-2125.8,-2611237.43295,-1839.83541625], "37"), "Acmite")
 * 
 * speciesData["Fe2SiO4"].registerPhase("Fayalite")             # <<<<<<<<<<<<<<
 * speciesData["Fe2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[201.1,0.01733,-1960600.0,-900.9,-1514412.39343,-1115.33066401], "37"), "Fayalite")
 * 
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_n_s_Fayalite); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "chemeng/cementdata.pyx":321
 * speciesData["Fe2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[201.1,0.01733,-1960600.0,-900.9,-1514412.39343,-1115.33066401], "37"), "Fayalite")
 * 
 * speciesData["Fe2Si2O6"].registerPhase("Ferrosilite")             # <<<<<<<<<<<<<<
 * speciesData["Fe2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[398.7, -0.006579, 1290100.0, -4058.0,-2362863.83439,-2541.84281492], "37"), "Ferrosilite")
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_n_s_Ferrosilite); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "chemeng/cementdata.pyx":328
 * 
 * class MulliteThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 */
  __pyx_tuple__55 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_Tmin, __pyx_n_s_Tmax, __pyx_n_s_notes); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_init, 328, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 328, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":332
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 */
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Cp0, 332, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 332, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":335
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 */
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_Hf0, 335, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 335, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":338
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 */
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_S0, 338, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":341
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 */
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_str, 341, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 341, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":348
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_chemeng_cementdata_pyx, __pyx_n_s_repr, 348, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 348, __pyx_L1_error)

  /* "chemeng/cementdata.pyx":351
 *         return self.__str__()
 * 
 * speciesData["Al6Si2O13"].registerPhase("Mullite")             # <<<<<<<<<<<<<<
 * speciesData["Al6Si2O13"].registerPhaseCoeffs(MulliteThermoData(298.0, 2000.0, ""), "Mullite")
 * 
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_n_s_Mullite); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "chemeng/cementdata.pyx":352
 * 
 * speciesData["Al6Si2O13"].registerPhase("Mullite")
 * speciesData["Al6Si2O13"].registerPhaseCoeffs(MulliteThermoData(298.0, 2000.0, ""), "Mullite")             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_tuple__63 = PyTuple_Pack(3, __pyx_float_298_0, __pyx_float_2000_0, __pyx_kp_s__2); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_3_0 = PyFloat_FromDouble(3.0); if (unlikely(!__pyx_float_3_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_4_0 = PyFloat_FromDouble(4.0); if (unlikely(!__pyx_float_4_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_03 = PyFloat_FromDouble(0.03); if (unlikely(!__pyx_float_0_03)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_19_5 = PyFloat_FromDouble(19.5); if (unlikely(!__pyx_float_19_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_100_0 = PyFloat_FromDouble(100.0); if (unlikely(!__pyx_float_100_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_201_1 = PyFloat_FromDouble(201.1); if (unlikely(!__pyx_float_201_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_237_6 = PyFloat_FromDouble(237.6); if (unlikely(!__pyx_float_237_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_239_7 = PyFloat_FromDouble(239.7); if (unlikely(!__pyx_float_239_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_267_9 = PyFloat_FromDouble(267.9); if (unlikely(!__pyx_float_267_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_298_0 = PyFloat_FromDouble(298.0); if (unlikely(!__pyx_float_298_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_301_1 = PyFloat_FromDouble(301.1); if (unlikely(!__pyx_float_301_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_307_1 = PyFloat_FromDouble(307.1); if (unlikely(!__pyx_float_307_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_314_5 = PyFloat_FromDouble(314.5); if (unlikely(!__pyx_float_314_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_345_3 = PyFloat_FromDouble(345.3); if (unlikely(!__pyx_float_345_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_354_9 = PyFloat_FromDouble(354.9); if (unlikely(!__pyx_float_354_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_356_2 = PyFloat_FromDouble(356.2); if (unlikely(!__pyx_float_356_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_358_5 = PyFloat_FromDouble(358.5); if (unlikely(!__pyx_float_358_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_358_9 = PyFloat_FromDouble(358.9); if (unlikely(!__pyx_float_358_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_367_3 = PyFloat_FromDouble(367.3); if (unlikely(!__pyx_float_367_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_398_7 = PyFloat_FromDouble(398.7); if (unlikely(!__pyx_float_398_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_417_5 = PyFloat_FromDouble(417.5); if (unlikely(!__pyx_float_417_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_448_8 = PyFloat_FromDouble(448.8); if (unlikely(!__pyx_float_448_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_452_0 = PyFloat_FromDouble(452.0); if (unlikely(!__pyx_float_452_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_614_1 = PyFloat_FromDouble(614.1); if (unlikely(!__pyx_float_614_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_741_7 = PyFloat_FromDouble(741.7); if (unlikely(!__pyx_float_741_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2000_0 = PyFloat_FromDouble(2000.0); if (unlikely(!__pyx_float_2000_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2375_0 = PyFloat_FromDouble(2375.0); if (unlikely(!__pyx_float_2375_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2386_0 = PyFloat_FromDouble(2386.0); if (unlikely(!__pyx_float_2386_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_298_15 = PyFloat_FromDouble(298.15); if (unlikely(!__pyx_float_298_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_01733 = PyFloat_FromDouble(0.01733); if (unlikely(!__pyx_float_0_01733)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_000041 = PyFloat_FromDouble(0.000041); if (unlikely(!__pyx_float_0_000041)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_010143 = PyFloat_FromDouble(0.010143); if (unlikely(!__pyx_float_0_010143)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_016758 = PyFloat_FromDouble(0.016758); if (unlikely(!__pyx_float_0_016758)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1290100_0 = PyFloat_FromDouble(1290100.0); if (unlikely(!__pyx_float_1290100_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_30438133eneg_01 = PyFloat_FromDouble(1.30438133e-01); if (unlikely(!__pyx_float_1_30438133eneg_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_3_77248082e_02 = PyFloat_FromDouble(3.77248082e+02); if (unlikely(!__pyx_float_3_77248082e_02)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_5 = PyFloat_FromDouble(-0.5); if (unlikely(!__pyx_float_neg_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_900_9 = PyFloat_FromDouble(-900.9); if (unlikely(!__pyx_float_neg_900_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2020_1 = PyFloat_FromDouble(-2020.1); if (unlikely(!__pyx_float_neg_2020_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2055_1 = PyFloat_FromDouble(-2055.1); if (unlikely(!__pyx_float_neg_2055_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2125_8 = PyFloat_FromDouble(-2125.8); if (unlikely(!__pyx_float_neg_2125_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3185_3 = PyFloat_FromDouble(-3185.3); if (unlikely(!__pyx_float_neg_3185_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3456_2 = PyFloat_FromDouble(-3456.2); if (unlikely(!__pyx_float_neg_3456_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3953_6 = PyFloat_FromDouble(-3953.6); if (unlikely(!__pyx_float_neg_3953_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3973_1 = PyFloat_FromDouble(-3973.1); if (unlikely(!__pyx_float_neg_3973_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_4058_0 = PyFloat_FromDouble(-4058.0); if (unlikely(!__pyx_float_neg_4058_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_4168_0 = PyFloat_FromDouble(-4168.0); if (unlikely(!__pyx_float_neg_4168_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_5878_5 = PyFloat_FromDouble(-5878.5); if (unlikely(!__pyx_float_neg_5878_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_002990 = PyFloat_FromDouble(-0.002990); if (unlikely(!__pyx_float_neg_0_002990)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_003508 = PyFloat_FromDouble(-0.003508); if (unlikely(!__pyx_float_neg_0_003508)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_004905 = PyFloat_FromDouble(-0.004905); if (unlikely(!__pyx_float_neg_0_004905)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_005345 = PyFloat_FromDouble(-0.005345); if (unlikely(!__pyx_float_neg_0_005345)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_006579 = PyFloat_FromDouble(-0.006579); if (unlikely(!__pyx_float_neg_0_006579)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_010075 = PyFloat_FromDouble(-0.010075); if (unlikely(!__pyx_float_neg_0_010075)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_013364 = PyFloat_FromDouble(-0.013364); if (unlikely(!__pyx_float_neg_0_013364)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_596900_0 = PyFloat_FromDouble(-596900.0); if (unlikely(!__pyx_float_neg_596900_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1007300_0 = PyFloat_FromDouble(-1007300.0); if (unlikely(!__pyx_float_neg_1007300_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1275900_0 = PyFloat_FromDouble(-1275900.0); if (unlikely(!__pyx_float_neg_1275900_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1685500_0 = PyFloat_FromDouble(-1685500.0); if (unlikely(!__pyx_float_neg_1685500_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1960600_0 = PyFloat_FromDouble(-1960600.0); if (unlikely(!__pyx_float_neg_1960600_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2239300_0 = PyFloat_FromDouble(-2239300.0); if (unlikely(!__pyx_float_neg_2239300_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2493100_0 = PyFloat_FromDouble(-2493100.0); if (unlikely(!__pyx_float_neg_2493100_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_5897053_0 = PyFloat_FromDouble(-5897053.0); if (unlikely(!__pyx_float_neg_5897053_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_23819995_9 = PyFloat_FromDouble(-23819995.9); if (unlikely(!__pyx_float_neg_23819995_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2576200_44 = PyFloat_FromDouble(-2576200.44); if (unlikely(!__pyx_float_neg_2576200_44)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1506736_555 = PyFloat_FromDouble(-1506736.555); if (unlikely(!__pyx_float_neg_1506736_555)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2242104_385 = PyFloat_FromDouble(-2242104.385); if (unlikely(!__pyx_float_neg_2242104_385)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_23632876_25 = PyFloat_FromDouble(-23632876.25); if (unlikely(!__pyx_float_neg_23632876_25)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3191463_435 = PyFloat_FromDouble(-3191463.435); if (unlikely(!__pyx_float_neg_3191463_435)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3312281_195 = PyFloat_FromDouble(-3312281.195); if (unlikely(!__pyx_float_neg_3312281_195)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_4031406_775 = PyFloat_FromDouble(-4031406.775); if (unlikely(!__pyx_float_neg_4031406_775)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_4081390_495 = PyFloat_FromDouble(-4081390.495); if (unlikely(!__pyx_float_neg_4081390_495)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_4406117_625 = PyFloat_FromDouble(-4406117.625); if (unlikely(!__pyx_float_neg_4406117_625)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_4523_276465 = PyFloat_FromDouble(-4523.276465); if (unlikely(!__pyx_float_neg_4523_276465)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_6391033_598 = PyFloat_FromDouble(-6391033.598); if (unlikely(!__pyx_float_neg_6391033_598)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1552_3861601 = PyFloat_FromDouble(-1552.3861601); if (unlikely(!__pyx_float_neg_1552_3861601)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2287_7288762 = PyFloat_FromDouble(-2287.7288762); if (unlikely(!__pyx_float_neg_2287_7288762)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1115_33066401 = PyFloat_FromDouble(-1115.33066401); if (unlikely(!__pyx_float_neg_1115_33066401)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1247_71393272 = PyFloat_FromDouble(-1247.71393272); if (unlikely(!__pyx_float_neg_1247_71393272)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1286_74897962 = PyFloat_FromDouble(-1286.74897962); if (unlikely(!__pyx_float_neg_1286_74897962)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_13311_7921995 = PyFloat_FromDouble(-13311.7921995); if (unlikely(!__pyx_float_neg_13311_7921995)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_13410_4657633 = PyFloat_FromDouble(-13410.4657633); if (unlikely(!__pyx_float_neg_13410_4657633)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1514412_39343 = PyFloat_FromDouble(-1514412.39343); if (unlikely(!__pyx_float_neg_1514412_39343)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1835_70351849 = PyFloat_FromDouble(-1835.70351849); if (unlikely(!__pyx_float_neg_1835_70351849)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1839_83541625 = PyFloat_FromDouble(-1839.83541625); if (unlikely(!__pyx_float_neg_1839_83541625)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1890_58842253 = PyFloat_FromDouble(-1890.58842253); if (unlikely(!__pyx_float_neg_1890_58842253)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1898_63491189 = PyFloat_FromDouble(-1898.63491189); if (unlikely(!__pyx_float_neg_1898_63491189)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1944_38014589 = PyFloat_FromDouble(-1944.38014589); if (unlikely(!__pyx_float_neg_1944_38014589)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1949_72727363 = PyFloat_FromDouble(-1949.72727363); if (unlikely(!__pyx_float_neg_1949_72727363)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2021_07707436 = PyFloat_FromDouble(-2021.07707436); if (unlikely(!__pyx_float_neg_2021_07707436)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2268_39597837 = PyFloat_FromDouble(-2268.39597837); if (unlikely(!__pyx_float_neg_2268_39597837)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2311991_47077 = PyFloat_FromDouble(-2311991.47077); if (unlikely(!__pyx_float_neg_2311991_47077)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2339_74662875 = PyFloat_FromDouble(-2339.74662875); if (unlikely(!__pyx_float_neg_2339_74662875)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2362863_83439 = PyFloat_FromDouble(-2362863.83439); if (unlikely(!__pyx_float_neg_2362863_83439)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2541_84281492 = PyFloat_FromDouble(-2541.84281492); if (unlikely(!__pyx_float_neg_2541_84281492)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2611237_43295 = PyFloat_FromDouble(-2611237.43295); if (unlikely(!__pyx_float_neg_2611237_43295)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2789_93851863 = PyFloat_FromDouble(-2789.93851863); if (unlikely(!__pyx_float_neg_2789_93851863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2813_04236975 = PyFloat_FromDouble(-2813.04236975); if (unlikely(!__pyx_float_neg_2813_04236975)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2826_44236975 = PyFloat_FromDouble(-2826.44236975); if (unlikely(!__pyx_float_neg_2826_44236975)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3054593_52897 = PyFloat_FromDouble(-3054593.52897); if (unlikely(!__pyx_float_neg_3054593_52897)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3088328_86538 = PyFloat_FromDouble(-3088328.86538); if (unlikely(!__pyx_float_neg_3088328_86538)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3235757_57446 = PyFloat_FromDouble(-3235757.57446); if (unlikely(!__pyx_float_neg_3235757_57446)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3664_64123237 = PyFloat_FromDouble(-3664.64123237); if (unlikely(!__pyx_float_neg_3664_64123237)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3926755_41852 = PyFloat_FromDouble(-3926755.41852); if (unlikely(!__pyx_float_neg_3926755_41852)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3936515_41852 = PyFloat_FromDouble(-3936515.41852); if (unlikely(!__pyx_float_neg_3936515_41852)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_3964433_22114 = PyFloat_FromDouble(-3964433.22114); if (unlikely(!__pyx_float_neg_3964433_22114)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_2_08446637e_03 = PyFloat_FromDouble(-2.08446637e+03); if (unlikely(!__pyx_float_neg_2_08446637e_03)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_6_34719844e_06 = PyFloat_FromDouble(-6.34719844e+06); if (unlikely(!__pyx_float_neg_6_34719844e_06)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_6_89076313e_02 = PyFloat_FromDouble(-6.89076313e+02); if (unlikely(!__pyx_float_neg_6_89076313e_02)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_6_96694385e_06 = PyFloat_FromDouble(-6.96694385e+06); if (unlikely(!__pyx_float_neg_6_96694385e_06)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_8_70793049eneg_05 = PyFloat_FromDouble(-8.70793049e-05); if (unlikely(!__pyx_float_neg_8_70793049eneg_05)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_47 = PyInt_FromLong(47); if (unlikely(!__pyx_int_47)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_2 = PyInt_FromLong(-2); if (unlikely(!__pyx_int_neg_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1434600 = PyInt_FromLong(-1434600L); if (unlikely(!__pyx_int_neg_1434600)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_2745900 = PyInt_FromLong(-2745900L); if (unlikely(!__pyx_int_neg_2745900)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cementdata(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cementdata},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "cementdata",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcementdata(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcementdata(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cementdata(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cementdata(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cementdata(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  unsigned int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  double __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *(*__pyx_t_28)(PyObject *);
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cementdata' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cementdata", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "cementdata" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cementdata(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_chemeng__cementdata) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "chemeng.cementdata")) {
      if (unlikely((PyDict_SetItemString(modules, "chemeng.cementdata", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "chemeng/cementdata.pyx":3
 * # cython: language_level=2
 * #!/usr/bin/env python
 * from chemeng import *             # <<<<<<<<<<<<<<
 * import chemeng.NASAdata
 * import csv
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s__8);
  __Pyx_GIVEREF(__pyx_n_s__8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s__8)) __PYX_ERR(0, 3, __pyx_L1_error);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_chemeng, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_import_star(__pyx_t_3) < 0) __PYX_ERR(0, 3, __pyx_L1_error);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chemeng/cementdata.pyx":4
 * #!/usr/bin/env python
 * from chemeng import *
 * import chemeng.NASAdata             # <<<<<<<<<<<<<<
 * import csv
 * import math
 */
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_chemeng_NASAdata, 0, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chemeng, __pyx_t_3) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chemeng/cementdata.pyx":5
 * from chemeng import *
 * import chemeng.NASAdata
 * import csv             # <<<<<<<<<<<<<<
 * import math
 * 
 */
  __pyx_t_3 = __Pyx_ImportDottedModuleRelFirst(__pyx_n_s_csv, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csv, __pyx_t_3) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chemeng/cementdata.pyx":6
 * import chemeng.NASAdata
 * import csv
 * import math             # <<<<<<<<<<<<<<
 * 
 * ################ NIST data source
 */
  __pyx_t_3 = __Pyx_ImportDottedModuleRelFirst(__pyx_n_s_math, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_3) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chemeng/cementdata.pyx":10
 * ################ NIST data source
 * 
 * registerSpecies("CaAl2SiO6", Components({'Ca':1, 'Al':2, 'Si':1, 'O':6}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaAl2Si2O8", Components({'Ca':1, 'Al':2, 'Si':2, 'O':8}))
 * registerSpecies("Ca2Al2Si3O10(OH)2", Components({'Ca':2, 'Al':2, 'Si':3, 'O':12, 'H':2}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Components); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Si, __pyx_int_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_CaAl2SiO6);
  __Pyx_GIVEREF(__pyx_n_s_CaAl2SiO6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_CaAl2SiO6)) __PYX_ERR(0, 10, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 10, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":11
 * 
 * registerSpecies("CaAl2SiO6", Components({'Ca':1, 'Al':2, 'Si':1, 'O':6}))
 * registerSpecies("CaAl2Si2O8", Components({'Ca':1, 'Al':2, 'Si':2, 'O':8}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca2Al2Si3O10(OH)2", Components({'Ca':2, 'Al':2, 'Si':3, 'O':12, 'H':2}))
 * registerSpecies("Ca2Al2SiO7", Components({'Ca':2, 'Al':2, 'Si':1, 'O':7}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Components); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_O, __pyx_int_8) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_CaAl2Si2O8);
  __Pyx_GIVEREF(__pyx_n_s_CaAl2Si2O8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_CaAl2Si2O8)) __PYX_ERR(0, 11, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chemeng/cementdata.pyx":12
 * registerSpecies("CaAl2SiO6", Components({'Ca':1, 'Al':2, 'Si':1, 'O':6}))
 * registerSpecies("CaAl2Si2O8", Components({'Ca':1, 'Al':2, 'Si':2, 'O':8}))
 * registerSpecies("Ca2Al2Si3O10(OH)2", Components({'Ca':2, 'Al':2, 'Si':3, 'O':12, 'H':2}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca2Al2SiO7", Components({'Ca':2, 'Al':2, 'Si':1, 'O':7}))
 * registerSpecies("Ca3Al2Si3O12", Components({'Ca':3, 'Al':2, 'Si':3, 'O':12}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Components); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ca, __pyx_int_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Si, __pyx_int_3) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_12) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_H, __pyx_int_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_kp_s_Ca2Al2Si3O10_OH_2);
  __Pyx_GIVEREF(__pyx_kp_s_Ca2Al2Si3O10_OH_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_Ca2Al2Si3O10_OH_2)) __PYX_ERR(0, 12, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":13
 * registerSpecies("CaAl2Si2O8", Components({'Ca':1, 'Al':2, 'Si':2, 'O':8}))
 * registerSpecies("Ca2Al2Si3O10(OH)2", Components({'Ca':2, 'Al':2, 'Si':3, 'O':12, 'H':2}))
 * registerSpecies("Ca2Al2SiO7", Components({'Ca':2, 'Al':2, 'Si':1, 'O':7}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca3Al2Si3O12", Components({'Ca':3, 'Al':2, 'Si':3, 'O':12}))
 * registerSpecies("Al2Si4O10(OH)2", Components({'Al':2, 'Si':4, 'O':12, 'H':2}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Ca, __pyx_int_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Si, __pyx_int_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_O, __pyx_int_7) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Ca2Al2SiO7);
  __Pyx_GIVEREF(__pyx_n_s_Ca2Al2SiO7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Ca2Al2SiO7)) __PYX_ERR(0, 13, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chemeng/cementdata.pyx":14
 * registerSpecies("Ca2Al2Si3O10(OH)2", Components({'Ca':2, 'Al':2, 'Si':3, 'O':12, 'H':2}))
 * registerSpecies("Ca2Al2SiO7", Components({'Ca':2, 'Al':2, 'Si':1, 'O':7}))
 * registerSpecies("Ca3Al2Si3O12", Components({'Ca':3, 'Al':2, 'Si':3, 'O':12}))             # <<<<<<<<<<<<<<
 * registerSpecies("Al2Si4O10(OH)2", Components({'Al':2, 'Si':4, 'O':12, 'H':2}))
 * registerSpecies("Al2Si2O5(OH)4", Components({'Al':2, 'Si':2, 'O':9, 'H':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Components); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ca, __pyx_int_3) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Si, __pyx_int_3) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_12) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_Ca3Al2Si3O12);
  __Pyx_GIVEREF(__pyx_n_s_Ca3Al2Si3O12);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_Ca3Al2Si3O12)) __PYX_ERR(0, 14, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 14, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":15
 * registerSpecies("Ca2Al2SiO7", Components({'Ca':2, 'Al':2, 'Si':1, 'O':7}))
 * registerSpecies("Ca3Al2Si3O12", Components({'Ca':3, 'Al':2, 'Si':3, 'O':12}))
 * registerSpecies("Al2Si4O10(OH)2", Components({'Al':2, 'Si':4, 'O':12, 'H':2}))             # <<<<<<<<<<<<<<
 * registerSpecies("Al2Si2O5(OH)4", Components({'Al':2, 'Si':2, 'O':9, 'H':4}))
 * registerSpecies("Ca2Al3Si3O12(OH)", Components({'Ca':2, 'Al':3, 'Si':3, 'O':13, 'H':1}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Components); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Si, __pyx_int_4) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_O, __pyx_int_12) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_H, __pyx_int_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_s_Al2Si4O10_OH_2);
  __Pyx_GIVEREF(__pyx_kp_s_Al2Si4O10_OH_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_s_Al2Si4O10_OH_2)) __PYX_ERR(0, 15, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chemeng/cementdata.pyx":16
 * registerSpecies("Ca3Al2Si3O12", Components({'Ca':3, 'Al':2, 'Si':3, 'O':12}))
 * registerSpecies("Al2Si4O10(OH)2", Components({'Al':2, 'Si':4, 'O':12, 'H':2}))
 * registerSpecies("Al2Si2O5(OH)4", Components({'Al':2, 'Si':2, 'O':9, 'H':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca2Al3Si3O12(OH)", Components({'Ca':2, 'Al':3, 'Si':3, 'O':13, 'H':1}))
 * registerSpecies("CaAl4Si2O10(OH)2", Components({'Ca':1, 'Al':4, 'Si':2, 'O':12, 'H':2}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Components); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_9) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_H, __pyx_int_4) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_kp_s_Al2Si2O5_OH_4);
  __Pyx_GIVEREF(__pyx_kp_s_Al2Si2O5_OH_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_Al2Si2O5_OH_4)) __PYX_ERR(0, 16, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 16, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":17
 * registerSpecies("Al2Si4O10(OH)2", Components({'Al':2, 'Si':4, 'O':12, 'H':2}))
 * registerSpecies("Al2Si2O5(OH)4", Components({'Al':2, 'Si':2, 'O':9, 'H':4}))
 * registerSpecies("Ca2Al3Si3O12(OH)", Components({'Ca':2, 'Al':3, 'Si':3, 'O':13, 'H':1}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaAl4Si2O10(OH)2", Components({'Ca':1, 'Al':4, 'Si':2, 'O':12, 'H':2}))
 * registerSpecies("CaSiO3", Components({'Ca':1, 'Si':1, 'O':3}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Ca, __pyx_int_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Al, __pyx_int_3) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Si, __pyx_int_3) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_O, __pyx_int_13) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_H, __pyx_int_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_Ca2Al3Si3O12_OH);
  __Pyx_GIVEREF(__pyx_kp_s_Ca2Al3Si3O12_OH);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_Ca2Al3Si3O12_OH)) __PYX_ERR(0, 17, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chemeng/cementdata.pyx":18
 * registerSpecies("Al2Si2O5(OH)4", Components({'Al':2, 'Si':2, 'O':9, 'H':4}))
 * registerSpecies("Ca2Al3Si3O12(OH)", Components({'Ca':2, 'Al':3, 'Si':3, 'O':13, 'H':1}))
 * registerSpecies("CaAl4Si2O10(OH)2", Components({'Ca':1, 'Al':4, 'Si':2, 'O':12, 'H':2}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaSiO3", Components({'Ca':1, 'Si':1, 'O':3}))
 * registerSpecies("Ca2SiO4", Components({'Ca':2, 'Si':1, 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Components); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Al, __pyx_int_4) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_12) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_H, __pyx_int_2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_s_CaAl4Si2O10_OH_2);
  __Pyx_GIVEREF(__pyx_kp_s_CaAl4Si2O10_OH_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_CaAl4Si2O10_OH_2)) __PYX_ERR(0, 18, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":19
 * registerSpecies("Ca2Al3Si3O12(OH)", Components({'Ca':2, 'Al':3, 'Si':3, 'O':13, 'H':1}))
 * registerSpecies("CaAl4Si2O10(OH)2", Components({'Ca':1, 'Al':4, 'Si':2, 'O':12, 'H':2}))
 * registerSpecies("CaSiO3", Components({'Ca':1, 'Si':1, 'O':3}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca2SiO4", Components({'Ca':2, 'Si':1, 'O':4}))
 * registerSpecies("Ca3SiO5", Components({'Ca':3, 'Si':1, 'O':5}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Components); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_Si, __pyx_int_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_O, __pyx_int_3) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_CaSiO3);
  __Pyx_GIVEREF(__pyx_n_s_CaSiO3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_CaSiO3)) __PYX_ERR(0, 19, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "chemeng/cementdata.pyx":20
 * registerSpecies("CaAl4Si2O10(OH)2", Components({'Ca':1, 'Al':4, 'Si':2, 'O':12, 'H':2}))
 * registerSpecies("CaSiO3", Components({'Ca':1, 'Si':1, 'O':3}))
 * registerSpecies("Ca2SiO4", Components({'Ca':2, 'Si':1, 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca3SiO5", Components({'Ca':3, 'Si':1, 'O':5}))
 * registerSpecies("Ca3Si2O7", Components({'Ca':3, 'Si':2, 'O':7}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Components); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ca, __pyx_int_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Si, __pyx_int_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Ca2SiO4);
  __Pyx_GIVEREF(__pyx_n_s_Ca2SiO4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Ca2SiO4)) __PYX_ERR(0, 20, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":21
 * registerSpecies("CaSiO3", Components({'Ca':1, 'Si':1, 'O':3}))
 * registerSpecies("Ca2SiO4", Components({'Ca':2, 'Si':1, 'O':4}))
 * registerSpecies("Ca3SiO5", Components({'Ca':3, 'Si':1, 'O':5}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca3Si2O7", Components({'Ca':3, 'Si':2, 'O':7}))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Ca, __pyx_int_3) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_Si, __pyx_int_1) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_O, __pyx_int_5) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Ca3SiO5);
  __Pyx_GIVEREF(__pyx_n_s_Ca3SiO5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Ca3SiO5)) __PYX_ERR(0, 21, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "chemeng/cementdata.pyx":22
 * registerSpecies("Ca2SiO4", Components({'Ca':2, 'Si':1, 'O':4}))
 * registerSpecies("Ca3SiO5", Components({'Ca':3, 'Si':1, 'O':5}))
 * registerSpecies("Ca3Si2O7", Components({'Ca':3, 'Si':2, 'O':7}))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Components); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ca, __pyx_int_3) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_7) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_Ca3Si2O7);
  __Pyx_GIVEREF(__pyx_n_s_Ca3Si2O7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_Ca3Si2O7)) __PYX_ERR(0, 22, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":25
 * 
 * 
 * class CementThermoData(ThermoConstantsType):             # <<<<<<<<<<<<<<
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ThermoConstantsType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(0, 25, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PEP560_update_bases(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_5, __pyx_n_s_CementThermoData, __pyx_n_s_CementThermoData, (PyObject *) NULL, __pyx_n_s_chemeng_cementdata, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__pyx_t_5 != __pyx_t_4) {
    if (unlikely((PyDict_SetItemString(__pyx_t_2, "__orig_bases__", __pyx_t_4) < 0))) __PYX_ERR(0, 25, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":26
 * 
 * class CementThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_16CementThermoData_1__init__, 0, __pyx_n_s_CementThermoData___init, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__12);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":30
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_16CementThermoData_3Cp0, 0, __pyx_n_s_CementThermoData_Cp0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Cp0, __pyx_t_4) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":33
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_16CementThermoData_5Hf0, 0, __pyx_n_s_CementThermoData_Hf0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Hf0, __pyx_t_4) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":36
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_16CementThermoData_7S0, 0, __pyx_n_s_CementThermoData_S0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_S0, __pyx_t_4) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":39
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_16CementThermoData_9__str__, 0, __pyx_n_s_CementThermoData___str, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":46
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_16CementThermoData_11__repr__, 0, __pyx_n_s_CementThermoData___repr, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":25
 * 
 * 
 * class CementThermoData(ThermoConstantsType):             # <<<<<<<<<<<<<<
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_CementThermoData, __pyx_t_5, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CementThermoData, __pyx_t_4) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":50
 * 
 * 
 * import chemeng.config             # <<<<<<<<<<<<<<
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:
 */
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_chemeng_config, 0, -1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chemeng, __pyx_t_5) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":51
 * 
 * import chemeng.config
 * import os             # <<<<<<<<<<<<<<
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 */
  __pyx_t_5 = __Pyx_ImportDottedModuleRelFirst(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_5) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":52
 * import chemeng.config
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:             # <<<<<<<<<<<<<<
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip the header
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_chemeng); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_config); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_datadir); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error);
    __Pyx_INCREF(__pyx_kp_s_Cement_csv);
    __Pyx_GIVEREF(__pyx_kp_s_Cement_csv);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_s_Cement_csv)) __PYX_ERR(0, 52, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_rb)) __PYX_ERR(0, 52, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L2_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 52, __pyx_L2_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          if (PyDict_SetItem(__pyx_d, __pyx_n_s_datafile, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L6_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "chemeng/cementdata.pyx":53
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')             # <<<<<<<<<<<<<<
 *     reader.next() #Skip the header
 *     for row in reader:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_csv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_reader); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_4lambda, 0, __pyx_n_s_lambda, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_datafile); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_2);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2)) __PYX_ERR(0, 53, __pyx_L6_error);
          __Pyx_GIVEREF(__pyx_t_5);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 53, __pyx_L6_error);
          __pyx_t_2 = 0;
          __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(0, 53, __pyx_L6_error);
          __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_delimiter, __pyx_kp_s__22) < 0) __PYX_ERR(0, 53, __pyx_L6_error)
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_quotechar, __pyx_kp_s__23) < 0) __PYX_ERR(0, 53, __pyx_L6_error)
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PyDict_SetItem(__pyx_d, __pyx_n_s_reader, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L6_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "chemeng/cementdata.pyx":54
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip the header             # <<<<<<<<<<<<<<
 *     for row in reader:
 *         #Load data
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_reader); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_next); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 54, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "chemeng/cementdata.pyx":55
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip the header
 *     for row in reader:             # <<<<<<<<<<<<<<
 *         #Load data
 *         species = row[0]
 */
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_reader); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_2);
          if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
            __pyx_t_5 = __pyx_t_2; __Pyx_INCREF(__pyx_t_5);
            __pyx_t_9 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_9 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 55, __pyx_L6_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_5))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 55, __pyx_L6_error)
                  #endif
                  if (__pyx_t_9 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_2 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 55, __pyx_L6_error)
                #else
                __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L6_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 55, __pyx_L6_error)
                  #endif
                  if (__pyx_t_9 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_2); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 55, __pyx_L6_error)
                #else
                __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L6_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
              }
            } else {
              __pyx_t_2 = __pyx_t_10(__pyx_t_5);
              if (unlikely(!__pyx_t_2)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 55, __pyx_L6_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_2);
            }
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_row, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "chemeng/cementdata.pyx":57
 *     for row in reader:
 *         #Load data
 *         species = row[0]             # <<<<<<<<<<<<<<
 *         phase = row[1]
 *         Tmin = float(row[6])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_row); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 57, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_species, __pyx_t_4) < 0) __PYX_ERR(0, 57, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "chemeng/cementdata.pyx":58
 *         #Load data
 *         species = row[0]
 *         phase = row[1]             # <<<<<<<<<<<<<<
 *         Tmin = float(row[6])
 *         Tmax = float(row[7])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 58, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_phase, __pyx_t_2) < 0) __PYX_ERR(0, 58, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "chemeng/cementdata.pyx":59
 *         species = row[0]
 *         phase = row[1]
 *         Tmin = float(row[6])             # <<<<<<<<<<<<<<
 *         Tmax = float(row[7])
 *         a = map(float, row[8:15])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_row); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tmin, __pyx_t_2) < 0) __PYX_ERR(0, 59, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "chemeng/cementdata.pyx":60
 *         phase = row[1]
 *         Tmin = float(row[6])
 *         Tmax = float(row[7])             # <<<<<<<<<<<<<<
 *         a = map(float, row[8:15])
 *         if len(row[3].strip()) != 0:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_row); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tmax, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "chemeng/cementdata.pyx":61
 *         Tmin = float(row[6])
 *         Tmax = float(row[7])
 *         a = map(float, row[8:15])             # <<<<<<<<<<<<<<
 *         if len(row[3].strip()) != 0:
 *             Hf0 = float(row[3]) * 1000.0
 */
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_row); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_4 = __Pyx_PyObject_GetSlice(__pyx_t_2, 8, 15, NULL, NULL, &__pyx_slice__24, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_INCREF((PyObject *)(&PyFloat_Type));
            __Pyx_GIVEREF((PyObject *)(&PyFloat_Type));
            if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&PyFloat_Type)))) __PYX_ERR(0, 61, __pyx_L6_error);
            __Pyx_GIVEREF(__pyx_t_4);
            if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4)) __PYX_ERR(0, 61, __pyx_L6_error);
            __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 61, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_a, __pyx_t_4) < 0) __PYX_ERR(0, 61, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "chemeng/cementdata.pyx":62
 *         Tmax = float(row[7])
 *         a = map(float, row[8:15])
 *         if len(row[3].strip()) != 0:             # <<<<<<<<<<<<<<
 *             Hf0 = float(row[3]) * 1000.0
 *             a[1] += Hf0
 */
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_row); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_strip); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = NULL;
            __pyx_t_11 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_2))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_2, function);
                __pyx_t_11 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
              __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 62, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            }
            __pyx_t_12 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 62, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_13 = (__pyx_t_12 != 0);
            if (__pyx_t_13) {

              /* "chemeng/cementdata.pyx":63
 *         a = map(float, row[8:15])
 *         if len(row[3].strip()) != 0:
 *             Hf0 = float(row[3]) * 1000.0             # <<<<<<<<<<<<<<
 *             a[1] += Hf0
 *         notes = row[15]
 */
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_2); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 63, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_2 = PyFloat_FromDouble((__pyx_t_14 * 1000.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_Hf0, __pyx_t_2) < 0) __PYX_ERR(0, 63, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "chemeng/cementdata.pyx":64
 *         if len(row[3].strip()) != 0:
 *             Hf0 = float(row[3]) * 1000.0
 *             a[1] += Hf0             # <<<<<<<<<<<<<<
 *         notes = row[15]
 *         speciesData[species].registerPhase(phase)
 */
              __pyx_t_12 = 1;
              __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, __pyx_t_12, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 64, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Hf0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_a); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              if (unlikely((__Pyx_SetItemInt(__pyx_t_2, __pyx_t_12, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0))) __PYX_ERR(0, 64, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

              /* "chemeng/cementdata.pyx":62
 *         Tmax = float(row[7])
 *         a = map(float, row[8:15])
 *         if len(row[3].strip()) != 0:             # <<<<<<<<<<<<<<
 *             Hf0 = float(row[3]) * 1000.0
 *             a[1] += Hf0
 */
            }

            /* "chemeng/cementdata.pyx":65
 *             Hf0 = float(row[3]) * 1000.0
 *             a[1] += Hf0
 *         notes = row[15]             # <<<<<<<<<<<<<<
 *         speciesData[species].registerPhase(phase)
 *         speciesData[species].registerPhaseCoeffs(CementThermoData(Tmin, Tmax, a, notes), phase)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_row); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_notes, __pyx_t_2) < 0) __PYX_ERR(0, 65, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "chemeng/cementdata.pyx":66
 *             a[1] += Hf0
 *         notes = row[15]
 *         speciesData[species].registerPhase(phase)             # <<<<<<<<<<<<<<
 *         speciesData[species].registerPhaseCoeffs(CementThermoData(Tmin, Tmax, a, notes), phase)
 *         if len(row[4].strip()) != 0:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 66, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_15 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 66, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 66, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_phase); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 66, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_3 = NULL;
            __pyx_t_11 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_3)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_3);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_11 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_15};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "chemeng/cementdata.pyx":67
 *         notes = row[15]
 *         speciesData[species].registerPhase(phase)
 *         speciesData[species].registerPhaseCoeffs(CementThermoData(Tmin, Tmax, a, notes), phase)             # <<<<<<<<<<<<<<
 *         if len(row[4].strip()) != 0:
 *             V0 = float(row[4])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_species); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_CementThermoData); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_Tmax); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_a); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_notes); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_19);
            __pyx_t_20 = NULL;
            __pyx_t_11 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_20)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_20);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_11 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[5] = {__pyx_t_20, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_11, 4+__pyx_t_11);
              __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 67, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_phase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 67, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_19 = NULL;
            __pyx_t_11 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_19)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_19);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
                __pyx_t_11 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_19, __pyx_t_3, __pyx_t_4};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
              __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

            /* "chemeng/cementdata.pyx":68
 *         speciesData[species].registerPhase(phase)
 *         speciesData[species].registerPhaseCoeffs(CementThermoData(Tmin, Tmax, a, notes), phase)
 *         if len(row[4].strip()) != 0:             # <<<<<<<<<<<<<<
 *             V0 = float(row[4])
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 68, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 68, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_strip); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 68, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = NULL;
            __pyx_t_11 = 0;
            #if CYTHON_UNPACK_METHODS
            if (likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
                __pyx_t_11 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __pyx_t_12 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 68, __pyx_L6_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_13 = (__pyx_t_12 != 0);
            if (__pyx_t_13) {

              /* "chemeng/cementdata.pyx":69
 *         speciesData[species].registerPhaseCoeffs(CementThermoData(Tmin, Tmax, a, notes), phase)
 *         if len(row[4].strip()) != 0:
 *             V0 = float(row[4])             # <<<<<<<<<<<<<<
 * 
 * 
 */
              __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_row); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_2, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 69, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_V0, __pyx_t_2) < 0) __PYX_ERR(0, 69, __pyx_L6_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

              /* "chemeng/cementdata.pyx":68
 *         speciesData[species].registerPhase(phase)
 *         speciesData[species].registerPhaseCoeffs(CementThermoData(Tmin, Tmax, a, notes), phase)
 *         if len(row[4].strip()) != 0:             # <<<<<<<<<<<<<<
 *             V0 = float(row[4])
 * 
 */
            }

            /* "chemeng/cementdata.pyx":55
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip the header
 *     for row in reader:             # <<<<<<<<<<<<<<
 *         #Load data
 *         species = row[0]
 */
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "chemeng/cementdata.pyx":52
 * import chemeng.config
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'Cement.csv'), 'rb') as datafile:             # <<<<<<<<<<<<<<
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip the header
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L11_try_end;
        __pyx_L6_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("chemeng.cementdata", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_2, &__pyx_t_15) < 0) __PYX_ERR(0, 52, __pyx_L8_except_error)
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_2);
          __Pyx_XGOTREF(__pyx_t_15);
          __pyx_t_4 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_2, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 52, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 52, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          if (__pyx_t_13 < 0) __PYX_ERR(0, 52, __pyx_L8_except_error)
          __pyx_t_22 = (!__pyx_t_13);
          if (unlikely(__pyx_t_22)) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_2, __pyx_t_15);
            __pyx_t_5 = 0; __pyx_t_2 = 0; __pyx_t_15 = 0; 
            __PYX_ERR(0, 52, __pyx_L8_except_error)
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          goto __pyx_L7_exception_handled;
        }
        __pyx_L8_except_error:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L7_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L11_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_1) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__25, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 52, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L5;
      }
      __pyx_L5:;
    }
    goto __pyx_L20;
    __pyx_L2_error:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L1_error;
    __pyx_L20:;
  }

  /* "chemeng/cementdata.pyx":73
 * 
 * 
 * def Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,percent_error):             # <<<<<<<<<<<<<<
 *     if math.fabs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp) > percent_error:
 *         print "\nError in Cp "+species+" "+phase+" @ "+str(T)+"K of " + str(abs((speciesData[species].phases[phase].constants[-1].Cp0(T) - Cp)*100.0 / Cp ))+" percent"
 */
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_1Validate_NIST_Data, 0, __pyx_n_s_Validate_NIST_Data, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Validate_NIST_Data, __pyx_t_15) < 0) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "chemeng/cementdata.pyx":85
 * 
 * 
 * import chemeng.config             # <<<<<<<<<<<<<<
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'NistData.csv'), 'rb') as datafile:
 */
  __pyx_t_15 = __Pyx_Import(__pyx_n_s_chemeng_config, 0, -1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_chemeng, __pyx_t_15) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "chemeng/cementdata.pyx":86
 * 
 * import chemeng.config
 * import os             # <<<<<<<<<<<<<<
 * with open(os.path.join(chemeng.config.datadir, 'NistData.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 */
  __pyx_t_15 = __Pyx_ImportDottedModuleRelFirst(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_15) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "chemeng/cementdata.pyx":87
 * import chemeng.config
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'NistData.csv'), 'rb') as datafile:             # <<<<<<<<<<<<<<
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_os); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_join); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_chemeng); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_config); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_datadir); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error);
    __Pyx_INCREF(__pyx_kp_s_NistData_csv);
    __Pyx_GIVEREF(__pyx_kp_s_NistData_csv);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_kp_s_NistData_csv)) __PYX_ERR(0, 87, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_rb)) __PYX_ERR(0, 87, __pyx_L1_error);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_enter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 87, __pyx_L21_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 87, __pyx_L21_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __pyx_t_15;
    __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_7, &__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_6);
        /*try:*/ {
          if (PyDict_SetItem(__pyx_d, __pyx_n_s_datafile, __pyx_t_5) < 0) __PYX_ERR(0, 87, __pyx_L25_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "chemeng/cementdata.pyx":88
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'NistData.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')             # <<<<<<<<<<<<<<
 *     reader.next() #Skip 1st line
 *     for row in reader:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_csv); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_reader); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_5lambda1, 0, __pyx_n_s_lambda, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_datafile); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(0, 88, __pyx_L25_error);
          __Pyx_GIVEREF(__pyx_t_15);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_15)) __PYX_ERR(0, 88, __pyx_L25_error);
          __pyx_t_5 = 0;
          __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_4, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_15);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_15)) __PYX_ERR(0, 88, __pyx_L25_error);
          __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_15);
          if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_delimiter, __pyx_kp_s__22) < 0) __PYX_ERR(0, 88, __pyx_L25_error)
          if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_quotechar, __pyx_kp_s__23) < 0) __PYX_ERR(0, 88, __pyx_L25_error)
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (PyDict_SetItem(__pyx_d, __pyx_n_s_reader, __pyx_t_5) < 0) __PYX_ERR(0, 88, __pyx_L25_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "chemeng/cementdata.pyx":89
 * with open(os.path.join(chemeng.config.datadir, 'NistData.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line             # <<<<<<<<<<<<<<
 *     for row in reader:
 *         if row[0] == "Si" and row[1] == "Crystal":
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_reader); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_next); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 89, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 89, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "chemeng/cementdata.pyx":90
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line
 *     for row in reader:             # <<<<<<<<<<<<<<
 *         if row[0] == "Si" and row[1] == "Crystal":
 *             continue
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_reader); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
            __pyx_t_15 = __pyx_t_5; __Pyx_INCREF(__pyx_t_15);
            __pyx_t_9 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_9 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 90, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 90, __pyx_L25_error)
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_15))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_15);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 90, __pyx_L25_error)
                  #endif
                  if (__pyx_t_9 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 90, __pyx_L25_error)
                #else
                __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L25_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_15);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 90, __pyx_L25_error)
                  #endif
                  if (__pyx_t_9 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 90, __pyx_L25_error)
                #else
                __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_15, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 90, __pyx_L25_error)
                __Pyx_GOTREF(__pyx_t_5);
                #endif
              }
            } else {
              __pyx_t_5 = __pyx_t_10(__pyx_t_15);
              if (unlikely(!__pyx_t_5)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 90, __pyx_L25_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_5);
            }
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_row, __pyx_t_5) < 0) __PYX_ERR(0, 90, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":91
 *     reader.next() #Skip 1st line
 *     for row in reader:
 *         if row[0] == "Si" and row[1] == "Crystal":             # <<<<<<<<<<<<<<
 *             continue
 *         if row[0] == "H2O" and row[1] == "Liquid":
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_Si, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 91, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_13) {
            } else {
              __pyx_t_22 = __pyx_t_13;
              goto __pyx_L34_bool_binop_done;
            }
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_Crystal, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 91, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_22 = __pyx_t_13;
            __pyx_L34_bool_binop_done:;
            if (__pyx_t_22) {

              /* "chemeng/cementdata.pyx":92
 *     for row in reader:
 *         if row[0] == "Si" and row[1] == "Crystal":
 *             continue             # <<<<<<<<<<<<<<
 *         if row[0] == "H2O" and row[1] == "Liquid":
 *             continue
 */
              goto __pyx_L31_continue;

              /* "chemeng/cementdata.pyx":91
 *     reader.next() #Skip 1st line
 *     for row in reader:
 *         if row[0] == "Si" and row[1] == "Crystal":             # <<<<<<<<<<<<<<
 *             continue
 *         if row[0] == "H2O" and row[1] == "Liquid":
 */
            }

            /* "chemeng/cementdata.pyx":93
 *         if row[0] == "Si" and row[1] == "Crystal":
 *             continue
 *         if row[0] == "H2O" and row[1] == "Liquid":             # <<<<<<<<<<<<<<
 *             continue
 *         species = row[0]
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_H2O, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 93, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_13) {
            } else {
              __pyx_t_22 = __pyx_t_13;
              goto __pyx_L37_bool_binop_done;
            }
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 93, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 93, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_Liquid, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 93, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_22 = __pyx_t_13;
            __pyx_L37_bool_binop_done:;
            if (__pyx_t_22) {

              /* "chemeng/cementdata.pyx":94
 *             continue
 *         if row[0] == "H2O" and row[1] == "Liquid":
 *             continue             # <<<<<<<<<<<<<<
 *         species = row[0]
 *         phase = row[1]
 */
              goto __pyx_L31_continue;

              /* "chemeng/cementdata.pyx":93
 *         if row[0] == "Si" and row[1] == "Crystal":
 *             continue
 *         if row[0] == "H2O" and row[1] == "Liquid":             # <<<<<<<<<<<<<<
 *             continue
 *         species = row[0]
 */
            }

            /* "chemeng/cementdata.pyx":95
 *         if row[0] == "H2O" and row[1] == "Liquid":
 *             continue
 *         species = row[0]             # <<<<<<<<<<<<<<
 *         phase = row[1]
 *         T = float(row[2])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 95, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 95, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_species, __pyx_t_4) < 0) __PYX_ERR(0, 95, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "chemeng/cementdata.pyx":96
 *             continue
 *         species = row[0]
 *         phase = row[1]             # <<<<<<<<<<<<<<
 *         T = float(row[2])
 *         Cp = float(row[3])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 96, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_phase, __pyx_t_5) < 0) __PYX_ERR(0, 96, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":97
 *         species = row[0]
 *         phase = row[1]
 *         T = float(row[2])             # <<<<<<<<<<<<<<
 *         Cp = float(row[3])
 *         S = float(row[4])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_T, __pyx_t_5) < 0) __PYX_ERR(0, 97, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":98
 *         phase = row[1]
 *         T = float(row[2])
 *         Cp = float(row[3])             # <<<<<<<<<<<<<<
 *         S = float(row[4])
 *         GmHoT = float(row[5])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 98, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 98, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_Cp, __pyx_t_5) < 0) __PYX_ERR(0, 98, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":99
 *         T = float(row[2])
 *         Cp = float(row[3])
 *         S = float(row[4])             # <<<<<<<<<<<<<<
 *         GmHoT = float(row[5])
 *         HmHr = float(row[6])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 99, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 99, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_S, __pyx_t_5) < 0) __PYX_ERR(0, 99, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":100
 *         Cp = float(row[3])
 *         S = float(row[4])
 *         GmHoT = float(row[5])             # <<<<<<<<<<<<<<
 *         HmHr = float(row[6])
 *         Hfe = float(row[7])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 100, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_GmHoT, __pyx_t_5) < 0) __PYX_ERR(0, 100, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":101
 *         S = float(row[4])
 *         GmHoT = float(row[5])
 *         HmHr = float(row[6])             # <<<<<<<<<<<<<<
 *         Hfe = float(row[7])
 *         Htr = float(row[13])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_HmHr, __pyx_t_5) < 0) __PYX_ERR(0, 101, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":102
 *         GmHoT = float(row[5])
 *         HmHr = float(row[6])
 *         Hfe = float(row[7])             # <<<<<<<<<<<<<<
 *         Htr = float(row[13])
 *         if row[8] != "NA":
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_Hfe, __pyx_t_5) < 0) __PYX_ERR(0, 102, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":103
 *         HmHr = float(row[6])
 *         Hfe = float(row[7])
 *         Htr = float(row[13])             # <<<<<<<<<<<<<<
 *         if row[8] != "NA":
 *             Gfe = float(row[8])
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyNumber_Float(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_Htr, __pyx_t_5) < 0) __PYX_ERR(0, 103, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":104
 *         Hfe = float(row[7])
 *         Htr = float(row[13])
 *         if row[8] != "NA":             # <<<<<<<<<<<<<<
 *             Gfe = float(row[8])
 *         else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_22 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_NA, Py_NE)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 104, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_22) {

              /* "chemeng/cementdata.pyx":105
 *         Htr = float(row[13])
 *         if row[8] != "NA":
 *             Gfe = float(row[8])             # <<<<<<<<<<<<<<
 *         else:
 *             Gfe = row[8]
 */
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 105, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_Gfe, __pyx_t_4) < 0) __PYX_ERR(0, 105, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "chemeng/cementdata.pyx":104
 *         Hfe = float(row[7])
 *         Htr = float(row[13])
 *         if row[8] != "NA":             # <<<<<<<<<<<<<<
 *             Gfe = float(row[8])
 *         else:
 */
              goto __pyx_L39;
            }

            /* "chemeng/cementdata.pyx":107
 *             Gfe = float(row[8])
 *         else:
 *             Gfe = row[8]             # <<<<<<<<<<<<<<
 *         if row[9] != "NA":
 *             logkfe = float(row[9])
 */
            /*else*/ {
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 107, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 107, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_Gfe, __pyx_t_5) < 0) __PYX_ERR(0, 107, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __pyx_L39:;

            /* "chemeng/cementdata.pyx":108
 *         else:
 *             Gfe = row[8]
 *         if row[9] != "NA":             # <<<<<<<<<<<<<<
 *             logkfe = float(row[9])
 *         else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 108, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 108, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_22 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_NA, Py_NE)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 108, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_22) {

              /* "chemeng/cementdata.pyx":109
 *             Gfe = row[8]
 *         if row[9] != "NA":
 *             logkfe = float(row[9])             # <<<<<<<<<<<<<<
 *         else:
 *             logkfe = row[9]
 */
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_logkfe, __pyx_t_4) < 0) __PYX_ERR(0, 109, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "chemeng/cementdata.pyx":108
 *         else:
 *             Gfe = row[8]
 *         if row[9] != "NA":             # <<<<<<<<<<<<<<
 *             logkfe = float(row[9])
 *         else:
 */
              goto __pyx_L40;
            }

            /* "chemeng/cementdata.pyx":111
 *             logkfe = float(row[9])
 *         else:
 *             logkfe = row[9]             # <<<<<<<<<<<<<<
 *         if row[10] != "NA":
 *             Hfox = float(row[10])
 */
            /*else*/ {
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 111, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 111, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_logkfe, __pyx_t_5) < 0) __PYX_ERR(0, 111, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __pyx_L40:;

            /* "chemeng/cementdata.pyx":112
 *         else:
 *             logkfe = row[9]
 *         if row[10] != "NA":             # <<<<<<<<<<<<<<
 *             Hfox = float(row[10])
 *         else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 112, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_22 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_NA, Py_NE)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 112, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_22) {

              /* "chemeng/cementdata.pyx":113
 *             logkfe = row[9]
 *         if row[10] != "NA":
 *             Hfox = float(row[10])             # <<<<<<<<<<<<<<
 *         else:
 *             Hfox = row[10]
 */
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_Hfox, __pyx_t_4) < 0) __PYX_ERR(0, 113, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "chemeng/cementdata.pyx":112
 *         else:
 *             logkfe = row[9]
 *         if row[10] != "NA":             # <<<<<<<<<<<<<<
 *             Hfox = float(row[10])
 *         else:
 */
              goto __pyx_L41;
            }

            /* "chemeng/cementdata.pyx":115
 *             Hfox = float(row[10])
 *         else:
 *             Hfox = row[10]             # <<<<<<<<<<<<<<
 *         if row[11] != "NA":
 *             Gfox = float(row[11])
 */
            /*else*/ {
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_Hfox, __pyx_t_5) < 0) __PYX_ERR(0, 115, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __pyx_L41:;

            /* "chemeng/cementdata.pyx":116
 *         else:
 *             Hfox = row[10]
 *         if row[11] != "NA":             # <<<<<<<<<<<<<<
 *             Gfox = float(row[11])
 *         else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_22 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_NA, Py_NE)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 116, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_22) {

              /* "chemeng/cementdata.pyx":117
 *             Hfox = row[10]
 *         if row[11] != "NA":
 *             Gfox = float(row[11])             # <<<<<<<<<<<<<<
 *         else:
 *             Gfox = row[11]
 */
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_Gfox, __pyx_t_4) < 0) __PYX_ERR(0, 117, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "chemeng/cementdata.pyx":116
 *         else:
 *             Hfox = row[10]
 *         if row[11] != "NA":             # <<<<<<<<<<<<<<
 *             Gfox = float(row[11])
 *         else:
 */
              goto __pyx_L42;
            }

            /* "chemeng/cementdata.pyx":119
 *             Gfox = float(row[11])
 *         else:
 *             Gfox = row[11]             # <<<<<<<<<<<<<<
 *         if row[12] != "NA":
 *             logkfox = float(row[12])
 */
            /*else*/ {
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_Gfox, __pyx_t_5) < 0) __PYX_ERR(0, 119, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __pyx_L42:;

            /* "chemeng/cementdata.pyx":120
 *         else:
 *             Gfox = row[11]
 *         if row[12] != "NA":             # <<<<<<<<<<<<<<
 *             logkfox = float(row[12])
 *         else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_row); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_5, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_22 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_NA, Py_NE)); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 120, __pyx_L25_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_22) {

              /* "chemeng/cementdata.pyx":121
 *             Gfox = row[11]
 *         if row[12] != "NA":
 *             logkfox = float(row[12])             # <<<<<<<<<<<<<<
 *         else:
 *             logkfox = row[12]
 */
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 121, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 121, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_logkfox, __pyx_t_4) < 0) __PYX_ERR(0, 121, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "chemeng/cementdata.pyx":120
 *         else:
 *             Gfox = row[11]
 *         if row[12] != "NA":             # <<<<<<<<<<<<<<
 *             logkfox = float(row[12])
 *         else:
 */
              goto __pyx_L43;
            }

            /* "chemeng/cementdata.pyx":123
 *             logkfox = float(row[12])
 *         else:
 *             logkfox = row[12]             # <<<<<<<<<<<<<<
 *         Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,1.0)
 * 
 */
            /*else*/ {
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_4, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (PyDict_SetItem(__pyx_d, __pyx_n_s_logkfox, __pyx_t_5) < 0) __PYX_ERR(0, 123, __pyx_L25_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __pyx_L43:;

            /* "chemeng/cementdata.pyx":124
 *         else:
 *             logkfox = row[12]
 *         Validate_NIST_Data(species,phase,T,Cp,S,HmHr,GmHoT,Htr,1.0)             # <<<<<<<<<<<<<<
 * 
 * ################################################ Mainly ACS
 */
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Validate_NIST_Data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_species); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_phase); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_T); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_19);
            __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_Cp); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_18);
            __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_S); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_HmHr); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_GmHoT); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Htr); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 124, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_23);
            __pyx_t_24 = NULL;
            __pyx_t_11 = 0;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_24)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_24);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_11 = 1;
              }
            }
            #endif
            {
              PyObject *__pyx_callargs[10] = {__pyx_t_24, __pyx_t_2, __pyx_t_3, __pyx_t_19, __pyx_t_18, __pyx_t_17, __pyx_t_16, __pyx_t_20, __pyx_t_23, __pyx_float_1_0};
              __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_11, 9+__pyx_t_11);
              __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "chemeng/cementdata.pyx":90
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line
 *     for row in reader:             # <<<<<<<<<<<<<<
 *         if row[0] == "Si" and row[1] == "Crystal":
 *             continue
 */
            __pyx_L31_continue:;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "chemeng/cementdata.pyx":87
 * import chemeng.config
 * import os
 * with open(os.path.join(chemeng.config.datadir, 'NistData.csv'), 'rb') as datafile:             # <<<<<<<<<<<<<<
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line
 */
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L30_try_end;
        __pyx_L25_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
        __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("chemeng.cementdata", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_15, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 87, __pyx_L27_except_error)
          __Pyx_XGOTREF(__pyx_t_15);
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_4);
          __pyx_t_23 = PyTuple_Pack(3, __pyx_t_15, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 87, __pyx_L27_except_error)
          __Pyx_GOTREF(__pyx_t_23);
          __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_23, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
          if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 87, __pyx_L27_except_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          if (__pyx_t_22 < 0) __PYX_ERR(0, 87, __pyx_L27_except_error)
          __pyx_t_13 = (!__pyx_t_22);
          if (unlikely(__pyx_t_13)) {
            __Pyx_GIVEREF(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_XGIVEREF(__pyx_t_4);
            __Pyx_ErrRestoreWithState(__pyx_t_15, __pyx_t_5, __pyx_t_4);
            __pyx_t_15 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0; 
            __PYX_ERR(0, 87, __pyx_L27_except_error)
          }
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          goto __pyx_L26_exception_handled;
        }
        __pyx_L27_except_error:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_6);
        goto __pyx_L1_error;
        __pyx_L26_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_7, __pyx_t_6);
        __pyx_L30_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_1) {
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__25, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 87, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        goto __pyx_L24;
      }
      __pyx_L24:;
    }
    goto __pyx_L48;
    __pyx_L21_error:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L1_error;
    __pyx_L48:;
  }

  /* "chemeng/cementdata.pyx":127
 * 
 * ################################################ Mainly ACS
 * registerSpecies("Li2TiO3", Components({'Li':2, 'Ti':1,  'O':3}))             # <<<<<<<<<<<<<<
 * registerSpecies("TiS2", Components({'Ti':1, 'S':2}))
 * registerSpecies("FeCl3", Components({'Fe':1, 'Cl':3}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Li, __pyx_int_2) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_O, __pyx_int_3) < 0) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_s_Li2TiO3);
  __Pyx_GIVEREF(__pyx_n_s_Li2TiO3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_Li2TiO3)) __PYX_ERR(0, 127, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_23)) __PYX_ERR(0, 127, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "chemeng/cementdata.pyx":128
 * ################################################ Mainly ACS
 * registerSpecies("Li2TiO3", Components({'Li':2, 'Ti':1,  'O':3}))
 * registerSpecies("TiS2", Components({'Ti':1, 'S':2}))             # <<<<<<<<<<<<<<
 * registerSpecies("FeCl3", Components({'Fe':1, 'Cl':3}))
 * registerSpecies("Ca3B2O6", Components({'Ca':3, 'B':2 , 'O':6}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Components); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_S, __pyx_int_2) < 0) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_TiS2);
  __Pyx_GIVEREF(__pyx_n_s_TiS2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_TiS2)) __PYX_ERR(0, 128, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":129
 * registerSpecies("Li2TiO3", Components({'Li':2, 'Ti':1,  'O':3}))
 * registerSpecies("TiS2", Components({'Ti':1, 'S':2}))
 * registerSpecies("FeCl3", Components({'Fe':1, 'Cl':3}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca3B2O6", Components({'Ca':3, 'B':2 , 'O':6}))
 * registerSpecies("Ca2B2O5", Components({'Ca':2, 'B':2 , 'O':5}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Components); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_23 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Fe, __pyx_int_1) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Cl, __pyx_int_3) < 0) __PYX_ERR(0, 129, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_n_s_FeCl3);
  __Pyx_GIVEREF(__pyx_n_s_FeCl3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_n_s_FeCl3)) __PYX_ERR(0, 129, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_15)) __PYX_ERR(0, 129, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_23, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "chemeng/cementdata.pyx":130
 * registerSpecies("TiS2", Components({'Ti':1, 'S':2}))
 * registerSpecies("FeCl3", Components({'Fe':1, 'Cl':3}))
 * registerSpecies("Ca3B2O6", Components({'Ca':3, 'B':2 , 'O':6}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca2B2O5", Components({'Ca':2, 'B':2 , 'O':5}))
 * registerSpecies("CaB2O4", Components({'Ca':1, 'B':2 , 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Components); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ca, __pyx_int_3) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_B, __pyx_int_2) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Ca3B2O6);
  __Pyx_GIVEREF(__pyx_n_s_Ca3B2O6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Ca3B2O6)) __PYX_ERR(0, 130, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":131
 * registerSpecies("FeCl3", Components({'Fe':1, 'Cl':3}))
 * registerSpecies("Ca3B2O6", Components({'Ca':3, 'B':2 , 'O':6}))
 * registerSpecies("Ca2B2O5", Components({'Ca':2, 'B':2 , 'O':5}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaB2O4", Components({'Ca':1, 'B':2 , 'O':4}))
 * registerSpecies("CaB4O7", Components({'Ca':1, 'B':4 , 'O':7}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Ca, __pyx_int_2) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_B, __pyx_int_2) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_O, __pyx_int_5) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_s_Ca2B2O5);
  __Pyx_GIVEREF(__pyx_n_s_Ca2B2O5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_Ca2B2O5)) __PYX_ERR(0, 131, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_23)) __PYX_ERR(0, 131, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "chemeng/cementdata.pyx":132
 * registerSpecies("Ca3B2O6", Components({'Ca':3, 'B':2 , 'O':6}))
 * registerSpecies("Ca2B2O5", Components({'Ca':2, 'B':2 , 'O':5}))
 * registerSpecies("CaB2O4", Components({'Ca':1, 'B':2 , 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaB4O7", Components({'Ca':1, 'B':4 , 'O':7}))
 * registerSpecies("Na2TiO3", Components({'Na':2, 'Ti':1 , 'O':3}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Components); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_B, __pyx_int_2) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_CaB2O4);
  __Pyx_GIVEREF(__pyx_n_s_CaB2O4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_CaB2O4)) __PYX_ERR(0, 132, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 132, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":133
 * registerSpecies("Ca2B2O5", Components({'Ca':2, 'B':2 , 'O':5}))
 * registerSpecies("CaB2O4", Components({'Ca':1, 'B':2 , 'O':4}))
 * registerSpecies("CaB4O7", Components({'Ca':1, 'B':4 , 'O':7}))             # <<<<<<<<<<<<<<
 * registerSpecies("Na2TiO3", Components({'Na':2, 'Ti':1 , 'O':3}))
 * registerSpecies("Fe2SiO4", Components({'Fe':2, 'Si':1, 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Components); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_23 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_B, __pyx_int_4) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_O, __pyx_int_7) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_n_s_CaB4O7);
  __Pyx_GIVEREF(__pyx_n_s_CaB4O7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_n_s_CaB4O7)) __PYX_ERR(0, 133, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_15)) __PYX_ERR(0, 133, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_23, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "chemeng/cementdata.pyx":134
 * registerSpecies("CaB2O4", Components({'Ca':1, 'B':2 , 'O':4}))
 * registerSpecies("CaB4O7", Components({'Ca':1, 'B':4 , 'O':7}))
 * registerSpecies("Na2TiO3", Components({'Na':2, 'Ti':1 , 'O':3}))             # <<<<<<<<<<<<<<
 * registerSpecies("Fe2SiO4", Components({'Fe':2, 'Si':1, 'O':4}))
 * registerSpecies("CaTiSiO5", Components({'Ca':1, 'Ti':1, 'Si':1,'O':5}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Components); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Na, __pyx_int_2) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_3) < 0) __PYX_ERR(0, 134, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Na2TiO3);
  __Pyx_GIVEREF(__pyx_n_s_Na2TiO3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Na2TiO3)) __PYX_ERR(0, 134, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":135
 * registerSpecies("CaB4O7", Components({'Ca':1, 'B':4 , 'O':7}))
 * registerSpecies("Na2TiO3", Components({'Na':2, 'Ti':1 , 'O':3}))
 * registerSpecies("Fe2SiO4", Components({'Fe':2, 'Si':1, 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaTiSiO5", Components({'Ca':1, 'Ti':1, 'Si':1,'O':5}))
 * registerSpecies("Ca3Al2O6", Components({'Ca':3, 'Al':2, 'O':6}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Fe, __pyx_int_2) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Si, __pyx_int_1) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_s_Fe2SiO4);
  __Pyx_GIVEREF(__pyx_n_s_Fe2SiO4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_Fe2SiO4)) __PYX_ERR(0, 135, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_23)) __PYX_ERR(0, 135, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "chemeng/cementdata.pyx":136
 * registerSpecies("Na2TiO3", Components({'Na':2, 'Ti':1 , 'O':3}))
 * registerSpecies("Fe2SiO4", Components({'Fe':2, 'Si':1, 'O':4}))
 * registerSpecies("CaTiSiO5", Components({'Ca':1, 'Ti':1, 'Si':1,'O':5}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca3Al2O6", Components({'Ca':3, 'Al':2, 'O':6}))
 * registerSpecies("Ca12Al14O33", Components({'Ca':12, 'Al':14, 'O':33}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Components); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Si, __pyx_int_1) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_5) < 0) __PYX_ERR(0, 136, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_CaTiSiO5);
  __Pyx_GIVEREF(__pyx_n_s_CaTiSiO5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_CaTiSiO5)) __PYX_ERR(0, 136, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":137
 * registerSpecies("Fe2SiO4", Components({'Fe':2, 'Si':1, 'O':4}))
 * registerSpecies("CaTiSiO5", Components({'Ca':1, 'Ti':1, 'Si':1,'O':5}))
 * registerSpecies("Ca3Al2O6", Components({'Ca':3, 'Al':2, 'O':6}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca12Al14O33", Components({'Ca':12, 'Al':14, 'O':33}))
 * registerSpecies("CaAl2O4", Components({'Ca':1, 'Al':2, 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Components); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_23 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Ca, __pyx_int_3) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_n_s_Ca3Al2O6);
  __Pyx_GIVEREF(__pyx_n_s_Ca3Al2O6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_n_s_Ca3Al2O6)) __PYX_ERR(0, 137, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_15)) __PYX_ERR(0, 137, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_23, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "chemeng/cementdata.pyx":138
 * registerSpecies("CaTiSiO5", Components({'Ca':1, 'Ti':1, 'Si':1,'O':5}))
 * registerSpecies("Ca3Al2O6", Components({'Ca':3, 'Al':2, 'O':6}))
 * registerSpecies("Ca12Al14O33", Components({'Ca':12, 'Al':14, 'O':33}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaAl2O4", Components({'Ca':1, 'Al':2, 'O':4}))
 * registerSpecies("CaAl4O7", Components({'Ca':1, 'Al':4, 'O':7}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Components); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ca, __pyx_int_12) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Al, __pyx_int_14) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_33) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Ca12Al14O33);
  __Pyx_GIVEREF(__pyx_n_s_Ca12Al14O33);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Ca12Al14O33)) __PYX_ERR(0, 138, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":139
 * registerSpecies("Ca3Al2O6", Components({'Ca':3, 'Al':2, 'O':6}))
 * registerSpecies("Ca12Al14O33", Components({'Ca':12, 'Al':14, 'O':33}))
 * registerSpecies("CaAl2O4", Components({'Ca':1, 'Al':2, 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaAl4O7", Components({'Ca':1, 'Al':4, 'O':7}))
 * registerSpecies("CaFe2O4", Components({'Ca':1, 'Fe':2, 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_s_CaAl2O4);
  __Pyx_GIVEREF(__pyx_n_s_CaAl2O4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_CaAl2O4)) __PYX_ERR(0, 139, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_23)) __PYX_ERR(0, 139, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "chemeng/cementdata.pyx":140
 * registerSpecies("Ca12Al14O33", Components({'Ca':12, 'Al':14, 'O':33}))
 * registerSpecies("CaAl2O4", Components({'Ca':1, 'Al':2, 'O':4}))
 * registerSpecies("CaAl4O7", Components({'Ca':1, 'Al':4, 'O':7}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaFe2O4", Components({'Ca':1, 'Fe':2, 'O':4}))
 * registerSpecies("Ca2Fe2O5", Components({'Ca':2, 'Fe':2, 'O':5}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Components); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Al, __pyx_int_4) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_7) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_CaAl4O7);
  __Pyx_GIVEREF(__pyx_n_s_CaAl4O7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_CaAl4O7)) __PYX_ERR(0, 140, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":141
 * registerSpecies("CaAl2O4", Components({'Ca':1, 'Al':2, 'O':4}))
 * registerSpecies("CaAl4O7", Components({'Ca':1, 'Al':4, 'O':7}))
 * registerSpecies("CaFe2O4", Components({'Ca':1, 'Fe':2, 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca2Fe2O5", Components({'Ca':2, 'Fe':2, 'O':5}))
 * registerSpecies("MgFe2O4", Components({'Mg':1, 'Fe':2, 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Components); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_23 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Fe, __pyx_int_2) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_n_s_CaFe2O4);
  __Pyx_GIVEREF(__pyx_n_s_CaFe2O4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_n_s_CaFe2O4)) __PYX_ERR(0, 141, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_15)) __PYX_ERR(0, 141, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_23, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "chemeng/cementdata.pyx":142
 * registerSpecies("CaAl4O7", Components({'Ca':1, 'Al':4, 'O':7}))
 * registerSpecies("CaFe2O4", Components({'Ca':1, 'Fe':2, 'O':4}))
 * registerSpecies("Ca2Fe2O5", Components({'Ca':2, 'Fe':2, 'O':5}))             # <<<<<<<<<<<<<<
 * registerSpecies("MgFe2O4", Components({'Mg':1, 'Fe':2, 'O':4}))
 * registerSpecies("Al2TiO5", Components({'Al':2, 'Ti':1, 'O':5}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Components); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ca, __pyx_int_2) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Fe, __pyx_int_2) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_5) < 0) __PYX_ERR(0, 142, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Ca2Fe2O5);
  __Pyx_GIVEREF(__pyx_n_s_Ca2Fe2O5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Ca2Fe2O5)) __PYX_ERR(0, 142, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":143
 * registerSpecies("CaFe2O4", Components({'Ca':1, 'Fe':2, 'O':4}))
 * registerSpecies("Ca2Fe2O5", Components({'Ca':2, 'Fe':2, 'O':5}))
 * registerSpecies("MgFe2O4", Components({'Mg':1, 'Fe':2, 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("Al2TiO5", Components({'Al':2, 'Ti':1, 'O':5}))
 * registerSpecies("Fe2TiO4", Components({'Fe':2, 'Ti':1, 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Mg, __pyx_int_1) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Fe, __pyx_int_2) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
  __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_s_MgFe2O4);
  __Pyx_GIVEREF(__pyx_n_s_MgFe2O4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_MgFe2O4)) __PYX_ERR(0, 143, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_23)) __PYX_ERR(0, 143, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "chemeng/cementdata.pyx":144
 * registerSpecies("Ca2Fe2O5", Components({'Ca':2, 'Fe':2, 'O':5}))
 * registerSpecies("MgFe2O4", Components({'Mg':1, 'Fe':2, 'O':4}))
 * registerSpecies("Al2TiO5", Components({'Al':2, 'Ti':1, 'O':5}))             # <<<<<<<<<<<<<<
 * registerSpecies("Fe2TiO4", Components({'Fe':2, 'Ti':1, 'O':4}))
 * registerSpecies("Zn2TiO4", Components({'Zn':2, 'Ti':1, 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Components); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Al, __pyx_int_2) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_5) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_Al2TiO5);
  __Pyx_GIVEREF(__pyx_n_s_Al2TiO5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_Al2TiO5)) __PYX_ERR(0, 144, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 144, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":145
 * registerSpecies("MgFe2O4", Components({'Mg':1, 'Fe':2, 'O':4}))
 * registerSpecies("Al2TiO5", Components({'Al':2, 'Ti':1, 'O':5}))
 * registerSpecies("Fe2TiO4", Components({'Fe':2, 'Ti':1, 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("Zn2TiO4", Components({'Zn':2, 'Ti':1, 'O':4}))
 * registerSpecies("CaTiO3", Components({'Ca':1, 'Ti':1,  'O':3}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Components); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_23 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Fe, __pyx_int_2) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_n_s_Fe2TiO4);
  __Pyx_GIVEREF(__pyx_n_s_Fe2TiO4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_n_s_Fe2TiO4)) __PYX_ERR(0, 145, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_15)) __PYX_ERR(0, 145, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_23, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "chemeng/cementdata.pyx":146
 * registerSpecies("Al2TiO5", Components({'Al':2, 'Ti':1, 'O':5}))
 * registerSpecies("Fe2TiO4", Components({'Fe':2, 'Ti':1, 'O':4}))
 * registerSpecies("Zn2TiO4", Components({'Zn':2, 'Ti':1, 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaTiO3", Components({'Ca':1, 'Ti':1,  'O':3}))
 * registerSpecies("FeTiO3", Components({'Fe':1, 'Ti':1,  'O':3}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Components); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Zn, __pyx_int_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_23, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Zn2TiO4);
  __Pyx_GIVEREF(__pyx_n_s_Zn2TiO4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Zn2TiO4)) __PYX_ERR(0, 146, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":147
 * registerSpecies("Fe2TiO4", Components({'Fe':2, 'Ti':1, 'O':4}))
 * registerSpecies("Zn2TiO4", Components({'Zn':2, 'Ti':1, 'O':4}))
 * registerSpecies("CaTiO3", Components({'Ca':1, 'Ti':1,  'O':3}))             # <<<<<<<<<<<<<<
 * registerSpecies("FeTiO3", Components({'Fe':1, 'Ti':1,  'O':3}))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_O, __pyx_int_3) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_t_23 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_n_s_CaTiO3);
  __Pyx_GIVEREF(__pyx_n_s_CaTiO3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_n_s_CaTiO3)) __PYX_ERR(0, 147, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_23)) __PYX_ERR(0, 147, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "chemeng/cementdata.pyx":148
 * registerSpecies("Zn2TiO4", Components({'Zn':2, 'Ti':1, 'O':4}))
 * registerSpecies("CaTiO3", Components({'Ca':1, 'Ti':1,  'O':3}))
 * registerSpecies("FeTiO3", Components({'Fe':1, 'Ti':1,  'O':3}))             # <<<<<<<<<<<<<<
 * 
 * class CemThermoData(ThermoConstantsType):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Components); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Fe, __pyx_int_1) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_Ti, __pyx_int_1) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_O, __pyx_int_3) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_FeTiO3);
  __Pyx_GIVEREF(__pyx_n_s_FeTiO3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_FeTiO3)) __PYX_ERR(0, 148, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 148, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":150
 * registerSpecies("FeTiO3", Components({'Fe':1, 'Ti':1,  'O':3}))
 * 
 * class CemThermoData(ThermoConstantsType):             # <<<<<<<<<<<<<<
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ThermoConstantsType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(0, 150, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PEP560_update_bases(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_23 = __Pyx_CalculateMetaclass(NULL, __pyx_t_5); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_15 = __Pyx_Py3MetaclassPrepare(__pyx_t_23, __pyx_t_5, __pyx_n_s_CemThermoData, __pyx_n_s_CemThermoData, (PyObject *) NULL, __pyx_n_s_chemeng_cementdata, (PyObject *) NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (__pyx_t_5 != __pyx_t_4) {
    if (unlikely((PyDict_SetItemString(__pyx_t_15, "__orig_bases__", __pyx_t_4) < 0))) __PYX_ERR(0, 150, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":151
 * 
 * class CemThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_13CemThermoData_1__init__, 0, __pyx_n_s_CemThermoData___init, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_tuple__12);
  if (__Pyx_SetNameInClass(__pyx_t_15, __pyx_n_s_init, __pyx_t_4) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":155
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_13CemThermoData_3Cp0, 0, __pyx_n_s_CemThermoData_Cp0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_15, __pyx_n_s_Cp0, __pyx_t_4) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":158
 *         return self.a[0] + self.a[1]*T + self.a[2]/(T**2)
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_13CemThermoData_5Hf0, 0, __pyx_n_s_CemThermoData_Hf0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_15, __pyx_n_s_Hf0, __pyx_t_4) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":161
 *         return self.a[0] * T + (self.a[1] * T**2)/2.0 - self.a[2]/T + self.a[3]
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_13CemThermoData_7S0, 0, __pyx_n_s_CemThermoData_S0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_15, __pyx_n_s_S0, __pyx_t_4) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":164
 *         return self.a[0]*math.log(T) + self.a[1]*T - self.a[2]/(2.0*T**2) + self.a[4]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(5):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_13CemThermoData_9__str__, 0, __pyx_n_s_CemThermoData___str, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_15, __pyx_n_s_str, __pyx_t_4) < 0) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":171
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_13CemThermoData_11__repr__, 0, __pyx_n_s_CemThermoData___repr, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_15, __pyx_n_s_repr, __pyx_t_4) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "chemeng/cementdata.pyx":150
 * registerSpecies("FeTiO3", Components({'Fe':1, 'Ti':1,  'O':3}))
 * 
 * class CemThermoData(ThermoConstantsType):             # <<<<<<<<<<<<<<
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_23, __pyx_n_s_CemThermoData, __pyx_t_5, __pyx_t_15, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CemThermoData, __pyx_t_4) < 0) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":175
 * 
 * 
 * def Validate_Cem(species,phase,a,H298,S298,T,error,HTmH298,STmS298):             # <<<<<<<<<<<<<<
 *     H = a[0] * T + (a[1] * T**2)/2.0 - a[2]/T + a[3]
 *     S = a[0]*math.log(T) + a[1]*T - a[2]/(2.0*T**2) + a[4]
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_3Validate_Cem, 0, __pyx_n_s_Validate_Cem, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Validate_Cem, __pyx_t_5) < 0) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":184
 * 
 * 
 * with open(os.path.join(chemeng.config.datadir,'Cement_Therm_New2.csv'), 'rb') as datafile:             # <<<<<<<<<<<<<<
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line
 */
  /*with:*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_path); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_join); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_chemeng); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_config); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_datadir); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_23);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_23)) __PYX_ERR(0, 184, __pyx_L1_error);
    __Pyx_INCREF(__pyx_kp_s_Cement_Therm_New2_csv);
    __Pyx_GIVEREF(__pyx_kp_s_Cement_Therm_New2_csv);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_kp_s_Cement_Therm_New2_csv)) __PYX_ERR(0, 184, __pyx_L1_error);
    __pyx_t_23 = 0;
    __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_23);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_23)) __PYX_ERR(0, 184, __pyx_L1_error);
    __Pyx_INCREF(__pyx_n_s_rb);
    __Pyx_GIVEREF(__pyx_n_s_rb);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_n_s_rb)) __PYX_ERR(0, 184, __pyx_L1_error);
    __pyx_t_23 = 0;
    __pyx_t_23 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_15, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_1 = __Pyx_PyObject_LookupSpecial(__pyx_t_23, __pyx_n_s_exit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_15 = __Pyx_PyObject_LookupSpecial(__pyx_t_23, __pyx_n_s_enter); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 184, __pyx_L49_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L49_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        /*try:*/ {
          if (PyDict_SetItem(__pyx_d, __pyx_n_s_datafile, __pyx_t_15) < 0) __PYX_ERR(0, 184, __pyx_L53_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "chemeng/cementdata.pyx":185
 * 
 * with open(os.path.join(chemeng.config.datadir,'Cement_Therm_New2.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')             # <<<<<<<<<<<<<<
 *     reader.next() #Skip 1st line
 *     reader.next() #Skip 2nd line
 */
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_csv); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_reader); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_23);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_6lambda2, 0, __pyx_n_s_lambda, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_datafile); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_15);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_15)) __PYX_ERR(0, 185, __pyx_L53_error);
          __Pyx_GIVEREF(__pyx_t_5);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5)) __PYX_ERR(0, 185, __pyx_L53_error);
          __pyx_t_15 = 0;
          __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(0, 185, __pyx_L53_error);
          __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_delimiter, __pyx_kp_s__22) < 0) __PYX_ERR(0, 185, __pyx_L53_error)
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_quotechar, __pyx_kp_s__23) < 0) __PYX_ERR(0, 185, __pyx_L53_error)
          __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (PyDict_SetItem(__pyx_d, __pyx_n_s_reader, __pyx_t_15) < 0) __PYX_ERR(0, 185, __pyx_L53_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "chemeng/cementdata.pyx":186
 * with open(os.path.join(chemeng.config.datadir,'Cement_Therm_New2.csv'), 'rb') as datafile:
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line             # <<<<<<<<<<<<<<
 *     reader.next() #Skip 2nd line
 *     for row in reader:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_reader); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 186, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_next); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 186, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "chemeng/cementdata.pyx":187
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line
 *     reader.next() #Skip 2nd line             # <<<<<<<<<<<<<<
 *     for row in reader:
 *         if row[0] == "Exit":
 */
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_reader); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 187, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_next); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 187, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 187, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "chemeng/cementdata.pyx":188
 *     reader.next() #Skip 1st line
 *     reader.next() #Skip 2nd line
 *     for row in reader:             # <<<<<<<<<<<<<<
 *         if row[0] == "Exit":
 *             break
 */
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_reader); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 188, __pyx_L53_error)
          __Pyx_GOTREF(__pyx_t_15);
          if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
            __pyx_t_5 = __pyx_t_15; __Pyx_INCREF(__pyx_t_5);
            __pyx_t_9 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_9 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L53_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 188, __pyx_L53_error)
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_5))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 188, __pyx_L53_error)
                  #endif
                  if (__pyx_t_9 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_15 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_15); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 188, __pyx_L53_error)
                #else
                __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 188, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
                  #if !CYTHON_ASSUME_SAFE_MACROS
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 188, __pyx_L53_error)
                  #endif
                  if (__pyx_t_9 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_15); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 188, __pyx_L53_error)
                #else
                __pyx_t_15 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 188, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                #endif
              }
            } else {
              __pyx_t_15 = __pyx_t_10(__pyx_t_5);
              if (unlikely(!__pyx_t_15)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 188, __pyx_L53_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_15);
            }
            if (PyDict_SetItem(__pyx_d, __pyx_n_s_row, __pyx_t_15) < 0) __PYX_ERR(0, 188, __pyx_L53_error)
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "chemeng/cementdata.pyx":189
 *     reader.next() #Skip 2nd line
 *     for row in reader:
 *         if row[0] == "Exit":             # <<<<<<<<<<<<<<
 *             break
 *         else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 189, __pyx_L53_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L53_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_13 = (__Pyx_PyString_Equals(__pyx_t_4, __pyx_n_s_Exit, Py_EQ)); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 189, __pyx_L53_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_13) {

              /* "chemeng/cementdata.pyx":190
 *     for row in reader:
 *         if row[0] == "Exit":
 *             break             # <<<<<<<<<<<<<<
 *         else:
 *             if row[2] and row[4] and row[6] and row[7] and row[8] and row[9] and row[10] and row[11]:
 */
              goto __pyx_L60_break;

              /* "chemeng/cementdata.pyx":189
 *     reader.next() #Skip 2nd line
 *     for row in reader:
 *         if row[0] == "Exit":             # <<<<<<<<<<<<<<
 *             break
 *         else:
 */
            }

            /* "chemeng/cementdata.pyx":192
 *             break
 *         else:
 *             if row[2] and row[4] and row[6] and row[7] and row[8] and row[9] and row[10] and row[11]:             # <<<<<<<<<<<<<<
 *                 #Load data
 *                 species = row[0]
 */
            /*else*/ {
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_4, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (__pyx_t_22) {
              } else {
                __pyx_t_13 = __pyx_t_22;
                goto __pyx_L63_bool_binop_done;
              }
              __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (__pyx_t_22) {
              } else {
                __pyx_t_13 = __pyx_t_22;
                goto __pyx_L63_bool_binop_done;
              }
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_4, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (__pyx_t_22) {
              } else {
                __pyx_t_13 = __pyx_t_22;
                goto __pyx_L63_bool_binop_done;
              }
              __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (__pyx_t_22) {
              } else {
                __pyx_t_13 = __pyx_t_22;
                goto __pyx_L63_bool_binop_done;
              }
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_4, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (__pyx_t_22) {
              } else {
                __pyx_t_13 = __pyx_t_22;
                goto __pyx_L63_bool_binop_done;
              }
              __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              if (__pyx_t_22) {
              } else {
                __pyx_t_13 = __pyx_t_22;
                goto __pyx_L63_bool_binop_done;
              }
              __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_4, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (__pyx_t_22) {
              } else {
                __pyx_t_13 = __pyx_t_22;
                goto __pyx_L63_bool_binop_done;
              }
              __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 192, __pyx_L53_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __pyx_t_13 = __pyx_t_22;
              __pyx_L63_bool_binop_done:;
              if (__pyx_t_13) {

                /* "chemeng/cementdata.pyx":194
 *             if row[2] and row[4] and row[6] and row[7] and row[8] and row[9] and row[10] and row[11]:
 *                 #Load data
 *                 species = row[0]             # <<<<<<<<<<<<<<
 *                 phase = row[1]
 *                 S0 = float(row[2])*4.184
 */
                __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 194, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_species, __pyx_t_15) < 0) __PYX_ERR(0, 194, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                /* "chemeng/cementdata.pyx":195
 *                 #Load data
 *                 species = row[0]
 *                 phase = row[1]             # <<<<<<<<<<<<<<
 *                 S0 = float(row[2])*4.184
 *                 Hf0 = float(row[4])*4.184
 */
                __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 195, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_phase, __pyx_t_4) < 0) __PYX_ERR(0, 195, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                /* "chemeng/cementdata.pyx":196
 *                 species = row[0]
 *                 phase = row[1]
 *                 S0 = float(row[2])*4.184             # <<<<<<<<<<<<<<
 *                 Hf0 = float(row[4])*4.184
 *                 a = float(row[6])*4.184
 */
                __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_4, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 196, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_15); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 196, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_15 = PyFloat_FromDouble((__pyx_t_14 * 4.184)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 196, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_S0, __pyx_t_15) < 0) __PYX_ERR(0, 196, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                /* "chemeng/cementdata.pyx":197
 *                 phase = row[1]
 *                 S0 = float(row[2])*4.184
 *                 Hf0 = float(row[4])*4.184             # <<<<<<<<<<<<<<
 *                 a = float(row[6])*4.184
 *                 b = float(row[7])*2.0*4.184e-3
 */
                __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 197, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_4 = PyFloat_FromDouble((__pyx_t_14 * 4.184)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 197, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_Hf0, __pyx_t_4) < 0) __PYX_ERR(0, 197, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                /* "chemeng/cementdata.pyx":198
 *                 S0 = float(row[2])*4.184
 *                 Hf0 = float(row[4])*4.184
 *                 a = float(row[6])*4.184             # <<<<<<<<<<<<<<
 *                 b = float(row[7])*2.0*4.184e-3
 *                 c = float(row[8])*-4.184e5
 */
                __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_4, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 198, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_15); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_15 = PyFloat_FromDouble((__pyx_t_14 * 4.184)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 198, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_a, __pyx_t_15) < 0) __PYX_ERR(0, 198, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                /* "chemeng/cementdata.pyx":199
 *                 Hf0 = float(row[4])*4.184
 *                 a = float(row[6])*4.184
 *                 b = float(row[7])*2.0*4.184e-3             # <<<<<<<<<<<<<<
 *                 c = float(row[8])*-4.184e5
 *                 d = float(row[9])*4.184 + Hf0
 */
                __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 199, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_4 = PyFloat_FromDouble(((__pyx_t_14 * 2.0) * 4.184e-3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_b, __pyx_t_4) < 0) __PYX_ERR(0, 199, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                /* "chemeng/cementdata.pyx":200
 *                 a = float(row[6])*4.184
 *                 b = float(row[7])*2.0*4.184e-3
 *                 c = float(row[8])*-4.184e5             # <<<<<<<<<<<<<<
 *                 d = float(row[9])*4.184 + Hf0
 *                 Tmin = float(row[10])
 */
                __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_4, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 200, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_15); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 200, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_15 = PyFloat_FromDouble((__pyx_t_14 * -4.184e5)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 200, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_c, __pyx_t_15) < 0) __PYX_ERR(0, 200, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                /* "chemeng/cementdata.pyx":201
 *                 b = float(row[7])*2.0*4.184e-3
 *                 c = float(row[8])*-4.184e5
 *                 d = float(row[9])*4.184 + Hf0             # <<<<<<<<<<<<<<
 *                 Tmin = float(row[10])
 *                 Tmax = float(row[11])
 */
                __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 201, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_4); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 201, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_4 = PyFloat_FromDouble((__pyx_t_14 * 4.184)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 201, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Hf0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 201, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_23 = PyNumber_Add(__pyx_t_4, __pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 201, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_d, __pyx_t_23) < 0) __PYX_ERR(0, 201, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

                /* "chemeng/cementdata.pyx":202
 *                 c = float(row[8])*-4.184e5
 *                 d = float(row[9])*4.184 + Hf0
 *                 Tmin = float(row[10])             # <<<<<<<<<<<<<<
 *                 Tmax = float(row[11])
 *                 notes = "S0:"+str(row[3])+" Hf0:"+str(row[5])+" HT-H298:"+str(row[12])
 */
                __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_row); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 202, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_23, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 202, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __pyx_t_23 = __Pyx_PyNumber_Float(__pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 202, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tmin, __pyx_t_23) < 0) __PYX_ERR(0, 202, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

                /* "chemeng/cementdata.pyx":203
 *                 d = float(row[9])*4.184 + Hf0
 *                 Tmin = float(row[10])
 *                 Tmax = float(row[11])             # <<<<<<<<<<<<<<
 *                 notes = "S0:"+str(row[3])+" Hf0:"+str(row[5])+" HT-H298:"+str(row[12])
 *                 if Tmin<=298.15<=Tmax:
 */
                __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_row); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 203, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_23, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 203, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __pyx_t_23 = __Pyx_PyNumber_Float(__pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 203, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tmax, __pyx_t_23) < 0) __PYX_ERR(0, 203, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

                /* "chemeng/cementdata.pyx":204
 *                 Tmin = float(row[10])
 *                 Tmax = float(row[11])
 *                 notes = "S0:"+str(row[3])+" Hf0:"+str(row[5])+" HT-H298:"+str(row[12])             # <<<<<<<<<<<<<<
 *                 if Tmin<=298.15<=Tmax:
 *                     e = S0 - (a*math.log(298.15) + b*298.15 - c/(2.0*298.15**2))
 */
                __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_row); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_23, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __pyx_t_23 = __Pyx_PyObject_Str(__pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_15 = PyNumber_Add(__pyx_kp_s_S0_2, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __pyx_t_23 = PyNumber_Add(__pyx_t_15, __pyx_kp_s_Hf0_2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_row); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_15, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_15 = __Pyx_PyObject_Str(__pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_4 = PyNumber_Add(__pyx_t_23, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_t_15 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_HT_H298); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_row); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_23 = __Pyx_GetItemInt(__pyx_t_4, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                __pyx_t_4 = __Pyx_PyObject_Str(__pyx_t_23); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __pyx_t_23 = PyNumber_Add(__pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (PyDict_SetItem(__pyx_d, __pyx_n_s_notes, __pyx_t_23) < 0) __PYX_ERR(0, 204, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

                /* "chemeng/cementdata.pyx":205
 *                 Tmax = float(row[11])
 *                 notes = "S0:"+str(row[3])+" Hf0:"+str(row[5])+" HT-H298:"+str(row[12])
 *                 if Tmin<=298.15<=Tmax:             # <<<<<<<<<<<<<<
 *                     e = S0 - (a*math.log(298.15) + b*298.15 - c/(2.0*298.15**2))
 *                 else:
 */
                __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 205, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __pyx_t_4 = PyObject_RichCompare(__pyx_t_23, __pyx_float_298_15, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L53_error)
                if (__Pyx_PyObject_IsTrue(__pyx_t_4)) {
                  __Pyx_DECREF(__pyx_t_4);
                  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Tmax); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 205, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_4 = PyObject_RichCompare(__pyx_float_298_15, __pyx_t_15, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L53_error)
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                }
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 205, __pyx_L53_error)
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (__pyx_t_13) {

                  /* "chemeng/cementdata.pyx":206
 *                 notes = "S0:"+str(row[3])+" Hf0:"+str(row[5])+" HT-H298:"+str(row[12])
 *                 if Tmin<=298.15<=Tmax:
 *                     e = S0 - (a*math.log(298.15) + b*298.15 - c/(2.0*298.15**2))             # <<<<<<<<<<<<<<
 *                 else:
 *                     e = float(row[13])*4.184 - ( a*math.log(Tmin) + b*Tmin - c/(2.0*Tmin**2)) + S0
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_S0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_a); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_math); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_log); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_20 = NULL;
                  __pyx_t_11 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_16))) {
                    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_16);
                    if (likely(__pyx_t_20)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                      __Pyx_INCREF(__pyx_t_20);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_16, function);
                      __pyx_t_11 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_20, __pyx_float_298_15};
                    __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 206, __pyx_L53_error)
                    __Pyx_GOTREF(__pyx_t_15);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  }
                  __pyx_t_16 = PyNumber_Multiply(__pyx_t_23, __pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_b); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_23 = PyNumber_Multiply(__pyx_t_15, __pyx_float_298_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __pyx_t_15 = PyNumber_Add(__pyx_t_16, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_c); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __pyx_t_16 = PyFloat_FromDouble((2.0 * pow(298.15, 2.0))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __pyx_t_20 = __Pyx_PyNumber_Divide(__pyx_t_23, __pyx_t_16); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __pyx_t_16 = PyNumber_Subtract(__pyx_t_15, __pyx_t_20); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_20 = PyNumber_Subtract(__pyx_t_4, __pyx_t_16); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  if (PyDict_SetItem(__pyx_d, __pyx_n_s_e, __pyx_t_20) < 0) __PYX_ERR(0, 206, __pyx_L53_error)
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

                  /* "chemeng/cementdata.pyx":205
 *                 Tmax = float(row[11])
 *                 notes = "S0:"+str(row[3])+" Hf0:"+str(row[5])+" HT-H298:"+str(row[12])
 *                 if Tmin<=298.15<=Tmax:             # <<<<<<<<<<<<<<
 *                     e = S0 - (a*math.log(298.15) + b*298.15 - c/(2.0*298.15**2))
 *                 else:
 */
                  goto __pyx_L71;
                }

                /* "chemeng/cementdata.pyx":208
 *                     e = S0 - (a*math.log(298.15) + b*298.15 - c/(2.0*298.15**2))
 *                 else:
 *                     e = float(row[13])*4.184 - ( a*math.log(Tmin) + b*Tmin - c/(2.0*Tmin**2)) + S0             # <<<<<<<<<<<<<<
 *                 with open(os.path.join(chemeng.config.datadir,'Cement_New_Tests.csv'), 'rb') as Testfile:
 *                     Testreader = csv.reader(filter(lambda row: row[0]!='!', Testfile), delimiter=',', quotechar='"')
 */
                /*else*/ {
                  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_row); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __pyx_t_16 = __Pyx_GetItemInt(__pyx_t_20, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_16); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __pyx_t_16 = PyFloat_FromDouble((__pyx_t_14 * 4.184)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_a); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_math); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_log); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __pyx_t_17 = NULL;
                  __pyx_t_11 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (unlikely(PyMethod_Check(__pyx_t_23))) {
                    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_23);
                    if (likely(__pyx_t_17)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
                      __Pyx_INCREF(__pyx_t_17);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_23, function);
                      __pyx_t_11 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_15};
                    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_23, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
                    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L53_error)
                    __Pyx_GOTREF(__pyx_t_4);
                    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  }
                  __pyx_t_23 = PyNumber_Multiply(__pyx_t_20, __pyx_t_4); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __pyx_t_15 = PyNumber_Multiply(__pyx_t_4, __pyx_t_20); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_20 = PyNumber_Add(__pyx_t_23, __pyx_t_15); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_c); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_15);
                  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __pyx_t_4 = PyNumber_Power(__pyx_t_23, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __pyx_t_23 = PyNumber_Multiply(__pyx_float_2_0, __pyx_t_4); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_15, __pyx_t_23); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __pyx_t_23 = PyNumber_Subtract(__pyx_t_20, __pyx_t_4); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __pyx_t_4 = PyNumber_Subtract(__pyx_t_16, __pyx_t_23); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_S0); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __pyx_t_16 = PyNumber_Add(__pyx_t_4, __pyx_t_23); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  if (PyDict_SetItem(__pyx_d, __pyx_n_s_e, __pyx_t_16) < 0) __PYX_ERR(0, 208, __pyx_L53_error)
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                }
                __pyx_L71:;

                /* "chemeng/cementdata.pyx":209
 *                 else:
 *                     e = float(row[13])*4.184 - ( a*math.log(Tmin) + b*Tmin - c/(2.0*Tmin**2)) + S0
 *                 with open(os.path.join(chemeng.config.datadir,'Cement_New_Tests.csv'), 'rb') as Testfile:             # <<<<<<<<<<<<<<
 *                     Testreader = csv.reader(filter(lambda row: row[0]!='!', Testfile), delimiter=',', quotechar='"')
 *                     Testreader.next() #Skip 1st line
 */
                /*with:*/ {
                  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_os); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_join); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_chemeng); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_config); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_20);
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_datadir); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __pyx_t_20 = NULL;
                  __pyx_t_11 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_23))) {
                    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_23);
                    if (likely(__pyx_t_20)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_23);
                      __Pyx_INCREF(__pyx_t_20);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_23, function);
                      __pyx_t_11 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[3] = {__pyx_t_20, __pyx_t_4, __pyx_kp_s_Cement_New_Tests_csv};
                    __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_23, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 209, __pyx_L53_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  }
                  __pyx_t_23 = PyTuple_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_GIVEREF(__pyx_t_16);
                  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_16)) __PYX_ERR(0, 209, __pyx_L53_error);
                  __Pyx_INCREF(__pyx_n_s_rb);
                  __Pyx_GIVEREF(__pyx_n_s_rb);
                  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_n_s_rb)) __PYX_ERR(0, 209, __pyx_L53_error);
                  __pyx_t_16 = 0;
                  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_23, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __pyx_t_21 = __Pyx_PyObject_LookupSpecial(__pyx_t_16, __pyx_n_s_exit); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 209, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_21);
                  __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_16, __pyx_n_s_enter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L72_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __pyx_t_20 = NULL;
                  __pyx_t_11 = 0;
                  #if CYTHON_UNPACK_METHODS
                  if (likely(PyMethod_Check(__pyx_t_4))) {
                    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_4);
                    if (likely(__pyx_t_20)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                      __Pyx_INCREF(__pyx_t_20);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_4, function);
                      __pyx_t_11 = 1;
                    }
                  }
                  #endif
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_20, NULL};
                    __pyx_t_23 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 209, __pyx_L72_error)
                    __Pyx_GOTREF(__pyx_t_23);
                    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  }
                  __pyx_t_4 = __pyx_t_23;
                  __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  /*try:*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_25, &__pyx_t_26, &__pyx_t_27);
                      __Pyx_XGOTREF(__pyx_t_25);
                      __Pyx_XGOTREF(__pyx_t_26);
                      __Pyx_XGOTREF(__pyx_t_27);
                      /*try:*/ {
                        if (PyDict_SetItem(__pyx_d, __pyx_n_s_Testfile, __pyx_t_4) < 0) __PYX_ERR(0, 209, __pyx_L78_error)
                        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                        /* "chemeng/cementdata.pyx":210
 *                     e = float(row[13])*4.184 - ( a*math.log(Tmin) + b*Tmin - c/(2.0*Tmin**2)) + S0
 *                 with open(os.path.join(chemeng.config.datadir,'Cement_New_Tests.csv'), 'rb') as Testfile:
 *                     Testreader = csv.reader(filter(lambda row: row[0]!='!', Testfile), delimiter=',', quotechar='"')             # <<<<<<<<<<<<<<
 *                     Testreader.next() #Skip 1st line
 *                     for Testrow in Testreader:
 */
                        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_csv); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_4);
                        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_reader); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_16);
                        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                        __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_7lambda3, 0, __pyx_n_s_lambda, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_4);
                        __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Testfile); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_23);
                        __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_20);
                        __Pyx_GIVEREF(__pyx_t_4);
                        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_4)) __PYX_ERR(0, 210, __pyx_L78_error);
                        __Pyx_GIVEREF(__pyx_t_23);
                        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_23)) __PYX_ERR(0, 210, __pyx_L78_error);
                        __pyx_t_4 = 0;
                        __pyx_t_23 = 0;
                        __pyx_t_23 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_20, NULL); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_23);
                        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                        __pyx_t_20 = PyTuple_New(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_20);
                        __Pyx_GIVEREF(__pyx_t_23);
                        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_23)) __PYX_ERR(0, 210, __pyx_L78_error);
                        __pyx_t_23 = 0;
                        __pyx_t_23 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_23);
                        if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_delimiter, __pyx_kp_s__22) < 0) __PYX_ERR(0, 210, __pyx_L78_error)
                        if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_quotechar, __pyx_kp_s__23) < 0) __PYX_ERR(0, 210, __pyx_L78_error)
                        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, __pyx_t_23); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_4);
                        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                        if (PyDict_SetItem(__pyx_d, __pyx_n_s_Testreader, __pyx_t_4) < 0) __PYX_ERR(0, 210, __pyx_L78_error)
                        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                        /* "chemeng/cementdata.pyx":211
 *                 with open(os.path.join(chemeng.config.datadir,'Cement_New_Tests.csv'), 'rb') as Testfile:
 *                     Testreader = csv.reader(filter(lambda row: row[0]!='!', Testfile), delimiter=',', quotechar='"')
 *                     Testreader.next() #Skip 1st line             # <<<<<<<<<<<<<<
 *                     for Testrow in Testreader:
 *                         if Testrow[0] == species and Testrow[1] == phase:
 */
                        __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_Testreader); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 211, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_23);
                        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_next); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 211, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_20);
                        __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                        __pyx_t_23 = NULL;
                        __pyx_t_11 = 0;
                        #if CYTHON_UNPACK_METHODS
                        if (unlikely(PyMethod_Check(__pyx_t_20))) {
                          __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_20);
                          if (likely(__pyx_t_23)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
                            __Pyx_INCREF(__pyx_t_23);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_20, function);
                            __pyx_t_11 = 1;
                          }
                        }
                        #endif
                        {
                          PyObject *__pyx_callargs[2] = {__pyx_t_23, NULL};
                          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
                          __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 211, __pyx_L78_error)
                          __Pyx_GOTREF(__pyx_t_4);
                          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                        }
                        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                        /* "chemeng/cementdata.pyx":212
 *                     Testreader = csv.reader(filter(lambda row: row[0]!='!', Testfile), delimiter=',', quotechar='"')
 *                     Testreader.next() #Skip 1st line
 *                     for Testrow in Testreader:             # <<<<<<<<<<<<<<
 *                         if Testrow[0] == species and Testrow[1] == phase:
 *                             Validate_Cem(species,phase,[a,b,c,d,e],Hf0,S0,float(Testrow[2]),0.03,float(Testrow[3])*4.184,float(Testrow[4])*4.184)
 */
                        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Testreader); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L78_error)
                        __Pyx_GOTREF(__pyx_t_4);
                        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
                          __pyx_t_20 = __pyx_t_4; __Pyx_INCREF(__pyx_t_20);
                          __pyx_t_12 = 0;
                          __pyx_t_28 = NULL;
                        } else {
                          __pyx_t_12 = -1; __pyx_t_20 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 212, __pyx_L78_error)
                          __Pyx_GOTREF(__pyx_t_20);
                          __pyx_t_28 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_20); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 212, __pyx_L78_error)
                        }
                        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                        for (;;) {
                          if (likely(!__pyx_t_28)) {
                            if (likely(PyList_CheckExact(__pyx_t_20))) {
                              {
                                Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_20);
                                #if !CYTHON_ASSUME_SAFE_MACROS
                                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 212, __pyx_L78_error)
                                #endif
                                if (__pyx_t_12 >= __pyx_temp) break;
                              }
                              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_20, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 212, __pyx_L78_error)
                              #else
                              __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_20, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L78_error)
                              __Pyx_GOTREF(__pyx_t_4);
                              #endif
                            } else {
                              {
                                Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_20);
                                #if !CYTHON_ASSUME_SAFE_MACROS
                                if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 212, __pyx_L78_error)
                                #endif
                                if (__pyx_t_12 >= __pyx_temp) break;
                              }
                              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_20, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely((0 < 0))) __PYX_ERR(0, 212, __pyx_L78_error)
                              #else
                              __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_20, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L78_error)
                              __Pyx_GOTREF(__pyx_t_4);
                              #endif
                            }
                          } else {
                            __pyx_t_4 = __pyx_t_28(__pyx_t_20);
                            if (unlikely(!__pyx_t_4)) {
                              PyObject* exc_type = PyErr_Occurred();
                              if (exc_type) {
                                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                                else __PYX_ERR(0, 212, __pyx_L78_error)
                              }
                              break;
                            }
                            __Pyx_GOTREF(__pyx_t_4);
                          }
                          if (PyDict_SetItem(__pyx_d, __pyx_n_s_Testrow, __pyx_t_4) < 0) __PYX_ERR(0, 212, __pyx_L78_error)
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                          /* "chemeng/cementdata.pyx":213
 *                     Testreader.next() #Skip 1st line
 *                     for Testrow in Testreader:
 *                         if Testrow[0] == species and Testrow[1] == phase:             # <<<<<<<<<<<<<<
 *                             Validate_Cem(species,phase,[a,b,c,d,e],Hf0,S0,float(Testrow[2]),0.03,float(Testrow[3])*4.184,float(Testrow[4])*4.184)
 *                 speciesData[species].registerPhase(phase)
 */
                          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Testrow); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_GOTREF(__pyx_t_4);
                          __pyx_t_23 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_GOTREF(__pyx_t_23);
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_GOTREF(__pyx_t_4);
                          __pyx_t_16 = PyObject_RichCompare(__pyx_t_23, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                          __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                          if (__pyx_t_22) {
                          } else {
                            __pyx_t_13 = __pyx_t_22;
                            goto __pyx_L89_bool_binop_done;
                          }
                          __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Testrow); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_GOTREF(__pyx_t_16);
                          __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_16, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_GOTREF(__pyx_t_4);
                          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                          __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_phase); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_GOTREF(__pyx_t_16);
                          __pyx_t_23 = PyObject_RichCompare(__pyx_t_4, __pyx_t_16, Py_EQ); __Pyx_XGOTREF(__pyx_t_23); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                          __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_23); if (unlikely((__pyx_t_22 < 0))) __PYX_ERR(0, 213, __pyx_L78_error)
                          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                          __pyx_t_13 = __pyx_t_22;
                          __pyx_L89_bool_binop_done:;
                          if (__pyx_t_13) {

                            /* "chemeng/cementdata.pyx":214
 *                     for Testrow in Testreader:
 *                         if Testrow[0] == species and Testrow[1] == phase:
 *                             Validate_Cem(species,phase,[a,b,c,d,e],Hf0,S0,float(Testrow[2]),0.03,float(Testrow[3])*4.184,float(Testrow[4])*4.184)             # <<<<<<<<<<<<<<
 *                 speciesData[species].registerPhase(phase)
 *                 speciesData[species].registerPhaseCoeffs(CemThermoData(Tmin, Tmax, [a,b,c,d,e], notes), phase)
 */
                            __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Validate_Cem); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_16);
                            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_species); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_4);
                            __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_phase); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_15);
                            __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_a); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_17);
                            __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_b); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_18);
                            __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_c); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_19);
                            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_3);
                            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_e); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_2);
                            __pyx_t_24 = PyList_New(5); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_24);
                            __Pyx_GIVEREF(__pyx_t_17);
                            if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 0, __pyx_t_17)) __PYX_ERR(0, 214, __pyx_L78_error);
                            __Pyx_GIVEREF(__pyx_t_18);
                            if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 1, __pyx_t_18)) __PYX_ERR(0, 214, __pyx_L78_error);
                            __Pyx_GIVEREF(__pyx_t_19);
                            if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 2, __pyx_t_19)) __PYX_ERR(0, 214, __pyx_L78_error);
                            __Pyx_GIVEREF(__pyx_t_3);
                            if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 3, __pyx_t_3)) __PYX_ERR(0, 214, __pyx_L78_error);
                            __Pyx_GIVEREF(__pyx_t_2);
                            if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 4, __pyx_t_2)) __PYX_ERR(0, 214, __pyx_L78_error);
                            __pyx_t_17 = 0;
                            __pyx_t_18 = 0;
                            __pyx_t_19 = 0;
                            __pyx_t_3 = 0;
                            __pyx_t_2 = 0;
                            __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Hf0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_2);
                            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_S0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_3);
                            __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_Testrow); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_19);
                            __pyx_t_18 = __Pyx_GetItemInt(__pyx_t_19, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_18);
                            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                            __pyx_t_19 = __Pyx_PyNumber_Float(__pyx_t_18); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_19);
                            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                            __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_Testrow); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_18);
                            __pyx_t_17 = __Pyx_GetItemInt(__pyx_t_18, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_17);
                            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                            __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_17); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                            __pyx_t_17 = PyFloat_FromDouble((__pyx_t_14 * 4.184)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_17);
                            __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_Testrow); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_18);
                            __pyx_t_29 = __Pyx_GetItemInt(__pyx_t_18, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_29);
                            __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                            __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_29); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                            __pyx_t_29 = PyFloat_FromDouble((__pyx_t_14 * 4.184)); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 214, __pyx_L78_error)
                            __Pyx_GOTREF(__pyx_t_29);
                            __pyx_t_18 = NULL;
                            __pyx_t_11 = 0;
                            #if CYTHON_UNPACK_METHODS
                            if (unlikely(PyMethod_Check(__pyx_t_16))) {
                              __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_16);
                              if (likely(__pyx_t_18)) {
                                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                                __Pyx_INCREF(__pyx_t_18);
                                __Pyx_INCREF(function);
                                __Pyx_DECREF_SET(__pyx_t_16, function);
                                __pyx_t_11 = 1;
                              }
                            }
                            #endif
                            {
                              PyObject *__pyx_callargs[10] = {__pyx_t_18, __pyx_t_4, __pyx_t_15, __pyx_t_24, __pyx_t_2, __pyx_t_3, __pyx_t_19, __pyx_float_0_03, __pyx_t_17, __pyx_t_29};
                              __pyx_t_23 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_11, 9+__pyx_t_11);
                              __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                              __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                              if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 214, __pyx_L78_error)
                              __Pyx_GOTREF(__pyx_t_23);
                              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                            }
                            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

                            /* "chemeng/cementdata.pyx":213
 *                     Testreader.next() #Skip 1st line
 *                     for Testrow in Testreader:
 *                         if Testrow[0] == species and Testrow[1] == phase:             # <<<<<<<<<<<<<<
 *                             Validate_Cem(species,phase,[a,b,c,d,e],Hf0,S0,float(Testrow[2]),0.03,float(Testrow[3])*4.184,float(Testrow[4])*4.184)
 *                 speciesData[species].registerPhase(phase)
 */
                          }

                          /* "chemeng/cementdata.pyx":212
 *                     Testreader = csv.reader(filter(lambda row: row[0]!='!', Testfile), delimiter=',', quotechar='"')
 *                     Testreader.next() #Skip 1st line
 *                     for Testrow in Testreader:             # <<<<<<<<<<<<<<
 *                         if Testrow[0] == species and Testrow[1] == phase:
 *                             Validate_Cem(species,phase,[a,b,c,d,e],Hf0,S0,float(Testrow[2]),0.03,float(Testrow[3])*4.184,float(Testrow[4])*4.184)
 */
                        }
                        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

                        /* "chemeng/cementdata.pyx":209
 *                 else:
 *                     e = float(row[13])*4.184 - ( a*math.log(Tmin) + b*Tmin - c/(2.0*Tmin**2)) + S0
 *                 with open(os.path.join(chemeng.config.datadir,'Cement_New_Tests.csv'), 'rb') as Testfile:             # <<<<<<<<<<<<<<
 *                     Testreader = csv.reader(filter(lambda row: row[0]!='!', Testfile), delimiter=',', quotechar='"')
 *                     Testreader.next() #Skip 1st line
 */
                      }
                      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
                      __Pyx_XDECREF(__pyx_t_26); __pyx_t_26 = 0;
                      __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
                      goto __pyx_L85_try_end;
                      __pyx_L78_error:;
                      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
                      __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                      /*except:*/ {
                        __Pyx_AddTraceback("chemeng.cementdata", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_20, &__pyx_t_23, &__pyx_t_16) < 0) __PYX_ERR(0, 209, __pyx_L80_except_error)
                        __Pyx_XGOTREF(__pyx_t_20);
                        __Pyx_XGOTREF(__pyx_t_23);
                        __Pyx_XGOTREF(__pyx_t_16);
                        __pyx_t_29 = PyTuple_Pack(3, __pyx_t_20, __pyx_t_23, __pyx_t_16); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 209, __pyx_L80_except_error)
                        __Pyx_GOTREF(__pyx_t_29);
                        __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_t_29, NULL);
                        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                        if (unlikely(!__pyx_t_30)) __PYX_ERR(0, 209, __pyx_L80_except_error)
                        __Pyx_GOTREF(__pyx_t_30);
                        __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_30);
                        __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
                        if (__pyx_t_13 < 0) __PYX_ERR(0, 209, __pyx_L80_except_error)
                        __pyx_t_22 = (!__pyx_t_13);
                        if (unlikely(__pyx_t_22)) {
                          __Pyx_GIVEREF(__pyx_t_20);
                          __Pyx_GIVEREF(__pyx_t_23);
                          __Pyx_XGIVEREF(__pyx_t_16);
                          __Pyx_ErrRestoreWithState(__pyx_t_20, __pyx_t_23, __pyx_t_16);
                          __pyx_t_20 = 0; __pyx_t_23 = 0; __pyx_t_16 = 0; 
                          __PYX_ERR(0, 209, __pyx_L80_except_error)
                        }
                        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                        goto __pyx_L79_exception_handled;
                      }
                      __pyx_L80_except_error:;
                      __Pyx_XGIVEREF(__pyx_t_25);
                      __Pyx_XGIVEREF(__pyx_t_26);
                      __Pyx_XGIVEREF(__pyx_t_27);
                      __Pyx_ExceptionReset(__pyx_t_25, __pyx_t_26, __pyx_t_27);
                      goto __pyx_L53_error;
                      __pyx_L79_exception_handled:;
                      __Pyx_XGIVEREF(__pyx_t_25);
                      __Pyx_XGIVEREF(__pyx_t_26);
                      __Pyx_XGIVEREF(__pyx_t_27);
                      __Pyx_ExceptionReset(__pyx_t_25, __pyx_t_26, __pyx_t_27);
                      __pyx_L85_try_end:;
                    }
                  }
                  /*finally:*/ {
                    /*normal exit:*/{
                      if (__pyx_t_21) {
                        __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_tuple__25, NULL);
                        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                        if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 209, __pyx_L53_error)
                        __Pyx_GOTREF(__pyx_t_27);
                        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                      }
                      goto __pyx_L77;
                    }
                    __pyx_L77:;
                  }
                  goto __pyx_L95;
                  __pyx_L72_error:;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  goto __pyx_L53_error;
                  __pyx_L95:;
                }

                /* "chemeng/cementdata.pyx":215
 *                         if Testrow[0] == species and Testrow[1] == phase:
 *                             Validate_Cem(species,phase,[a,b,c,d,e],Hf0,S0,float(Testrow[2]),0.03,float(Testrow[3])*4.184,float(Testrow[4])*4.184)
 *                 speciesData[species].registerPhase(phase)             # <<<<<<<<<<<<<<
 *                 speciesData[species].registerPhaseCoeffs(CemThermoData(Tmin, Tmax, [a,b,c,d,e], notes), phase)
 * 
 */
                __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 215, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_species); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 215, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_20);
                __pyx_t_29 = __Pyx_PyObject_GetItem(__pyx_t_23, __pyx_t_20); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 215, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_29);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 215, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_20);
                __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_phase); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 215, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_29);
                __pyx_t_23 = NULL;
                __pyx_t_11 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_20))) {
                  __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_20);
                  if (likely(__pyx_t_23)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
                    __Pyx_INCREF(__pyx_t_23);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_20, function);
                    __pyx_t_11 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_23, __pyx_t_29};
                  __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
                  __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                  if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 215, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                }
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

                /* "chemeng/cementdata.pyx":216
 *                             Validate_Cem(species,phase,[a,b,c,d,e],Hf0,S0,float(Testrow[2]),0.03,float(Testrow[3])*4.184,float(Testrow[4])*4.184)
 *                 speciesData[species].registerPhase(phase)
 *                 speciesData[species].registerPhaseCoeffs(CemThermoData(Tmin, Tmax, [a,b,c,d,e], notes), phase)             # <<<<<<<<<<<<<<
 * 
 * 
 */
                __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_20);
                __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_species); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_29);
                __pyx_t_23 = __Pyx_PyObject_GetItem(__pyx_t_20, __pyx_t_29); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_29);
                __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_CemThermoData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_20);
                __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_Tmin); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_Tmax); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_19);
                __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_a); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_GetModuleGlobalName(__pyx_t_24, __pyx_n_s_c); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_24);
                __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_d); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_e); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_18 = PyList_New(5); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_18);
                __Pyx_GIVEREF(__pyx_t_3);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_t_3)) __PYX_ERR(0, 216, __pyx_L53_error);
                __Pyx_GIVEREF(__pyx_t_2);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_t_2)) __PYX_ERR(0, 216, __pyx_L53_error);
                __Pyx_GIVEREF(__pyx_t_24);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_t_24)) __PYX_ERR(0, 216, __pyx_L53_error);
                __Pyx_GIVEREF(__pyx_t_15);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 3, __pyx_t_15)) __PYX_ERR(0, 216, __pyx_L53_error);
                __Pyx_GIVEREF(__pyx_t_4);
                if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 4, __pyx_t_4)) __PYX_ERR(0, 216, __pyx_L53_error);
                __pyx_t_3 = 0;
                __pyx_t_2 = 0;
                __pyx_t_24 = 0;
                __pyx_t_15 = 0;
                __pyx_t_4 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_notes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_4);
                __pyx_t_15 = NULL;
                __pyx_t_11 = 0;
                #if CYTHON_UNPACK_METHODS
                if (unlikely(PyMethod_Check(__pyx_t_20))) {
                  __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_20);
                  if (likely(__pyx_t_15)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
                    __Pyx_INCREF(__pyx_t_15);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_20, function);
                    __pyx_t_11 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[5] = {__pyx_t_15, __pyx_t_17, __pyx_t_19, __pyx_t_18, __pyx_t_4};
                  __pyx_t_23 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+1-__pyx_t_11, 4+__pyx_t_11);
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                  if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 216, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_23);
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                }
                __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_phase); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 216, __pyx_L53_error)
                __Pyx_GOTREF(__pyx_t_20);
                __pyx_t_4 = NULL;
                __pyx_t_11 = 0;
                #if CYTHON_UNPACK_METHODS
                if (likely(PyMethod_Check(__pyx_t_29))) {
                  __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_29);
                  if (likely(__pyx_t_4)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_29);
                    __Pyx_INCREF(__pyx_t_4);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_29, function);
                    __pyx_t_11 = 1;
                  }
                }
                #endif
                {
                  PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_23, __pyx_t_20};
                  __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_29, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
                  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 216, __pyx_L53_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                }
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

                /* "chemeng/cementdata.pyx":192
 *             break
 *         else:
 *             if row[2] and row[4] and row[6] and row[7] and row[8] and row[9] and row[10] and row[11]:             # <<<<<<<<<<<<<<
 *                 #Load data
 *                 species = row[0]
 */
              }
            }

            /* "chemeng/cementdata.pyx":188
 *     reader.next() #Skip 1st line
 *     reader.next() #Skip 2nd line
 *     for row in reader:             # <<<<<<<<<<<<<<
 *         if row[0] == "Exit":
 *             break
 */
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L96_for_end;
          __pyx_L60_break:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L96_for_end;
          __pyx_L96_for_end:;

          /* "chemeng/cementdata.pyx":184
 * 
 * 
 * with open(os.path.join(chemeng.config.datadir,'Cement_Therm_New2.csv'), 'rb') as datafile:             # <<<<<<<<<<<<<<
 *     reader = csv.reader(filter(lambda row: row[0]!='!', datafile), delimiter=',', quotechar='"')
 *     reader.next() #Skip 1st line
 */
        }
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L58_try_end;
        __pyx_L53_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
        __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
        __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("chemeng.cementdata", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_16, &__pyx_t_29) < 0) __PYX_ERR(0, 184, __pyx_L55_except_error)
          __Pyx_XGOTREF(__pyx_t_5);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_29);
          __pyx_t_20 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_16, __pyx_t_29); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 184, __pyx_L55_except_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_20, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 184, __pyx_L55_except_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          if (__pyx_t_22 < 0) __PYX_ERR(0, 184, __pyx_L55_except_error)
          __pyx_t_13 = (!__pyx_t_22);
          if (unlikely(__pyx_t_13)) {
            __Pyx_GIVEREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_29);
            __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_16, __pyx_t_29);
            __pyx_t_5 = 0; __pyx_t_16 = 0; __pyx_t_29 = 0; 
            __PYX_ERR(0, 184, __pyx_L55_except_error)
          }
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
          goto __pyx_L54_exception_handled;
        }
        __pyx_L55_except_error:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        goto __pyx_L1_error;
        __pyx_L54_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        __pyx_L58_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_1) {
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__25, NULL);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 184, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        goto __pyx_L52;
      }
      __pyx_L52:;
    }
    goto __pyx_L100;
    __pyx_L49_error:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L1_error;
    __pyx_L100:;
  }

  /* "chemeng/cementdata.pyx":220
 * 
 * ############# Holland, T. J. B., and R. Powell. "An improved and extended internally consistent thermodynamic dataset for phases of petrological interest, involving a new equation of state for solids." Journal of Metamorphic Geology 29.3 (2011): 333-383.
 * registerSpecies("Ca5Si2CO11", Components({'Ca':5, 'Si':2, 'C':1, 'O':11}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaMgC2O6", Components({'Ca':1, 'Mg':1, 'C':2, 'O':6}))
 * registerSpecies("Ca5Si2C2O13", Components({'Ca':5, 'Si':2, 'C':2, 'O':13}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Components); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ca, __pyx_int_5) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_C, __pyx_int_1) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_11) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_t_20 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_5); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Ca5Si2CO11);
  __Pyx_GIVEREF(__pyx_n_s_Ca5Si2CO11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Ca5Si2CO11)) __PYX_ERR(0, 220, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_20)) __PYX_ERR(0, 220, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":221
 * ############# Holland, T. J. B., and R. Powell. "An improved and extended internally consistent thermodynamic dataset for phases of petrological interest, involving a new equation of state for solids." Journal of Metamorphic Geology 29.3 (2011): 333-383.
 * registerSpecies("Ca5Si2CO11", Components({'Ca':5, 'Si':2, 'C':1, 'O':11}))
 * registerSpecies("CaMgC2O6", Components({'Ca':1, 'Mg':1, 'C':2, 'O':6}))             # <<<<<<<<<<<<<<
 * registerSpecies("Ca5Si2C2O13", Components({'Ca':5, 'Si':2, 'C':2, 'O':13}))
 * registerSpecies("NaAlSi3O8", Components({'Na':1, 'Al':1, 'Si':3, 'O':8}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_29 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_Mg, __pyx_int_1) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_C, __pyx_int_2) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_29); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_n_s_CaMgC2O6);
  __Pyx_GIVEREF(__pyx_n_s_CaMgC2O6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_n_s_CaMgC2O6)) __PYX_ERR(0, 221, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_t_16)) __PYX_ERR(0, 221, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_29, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":222
 * registerSpecies("Ca5Si2CO11", Components({'Ca':5, 'Si':2, 'C':1, 'O':11}))
 * registerSpecies("CaMgC2O6", Components({'Ca':1, 'Mg':1, 'C':2, 'O':6}))
 * registerSpecies("Ca5Si2C2O13", Components({'Ca':5, 'Si':2, 'C':2, 'O':13}))             # <<<<<<<<<<<<<<
 * registerSpecies("NaAlSi3O8", Components({'Na':1, 'Al':1, 'Si':3, 'O':8}))
 * registerSpecies("CaMgSi2O6", Components({'Ca':1, 'Mg':1, 'Si':2, 'O':6}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_Components); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_Ca, __pyx_int_5) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_C, __pyx_int_2) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_O, __pyx_int_13) < 0) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_29, __pyx_t_20); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_n_s_Ca5Si2C2O13);
  __Pyx_GIVEREF(__pyx_n_s_Ca5Si2C2O13);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_n_s_Ca5Si2C2O13)) __PYX_ERR(0, 222, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_5)) __PYX_ERR(0, 222, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":223
 * registerSpecies("CaMgC2O6", Components({'Ca':1, 'Mg':1, 'C':2, 'O':6}))
 * registerSpecies("Ca5Si2C2O13", Components({'Ca':5, 'Si':2, 'C':2, 'O':13}))
 * registerSpecies("NaAlSi3O8", Components({'Na':1, 'Al':1, 'Si':3, 'O':8}))             # <<<<<<<<<<<<<<
 * registerSpecies("CaMgSi2O6", Components({'Ca':1, 'Mg':1, 'Si':2, 'O':6}))
 * registerSpecies("Mg2Si2O6", Components({ 'Mg':2, 'Si':2, 'O':6}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_Components); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Na, __pyx_int_1) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Al, __pyx_int_1) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Si, __pyx_int_3) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_O, __pyx_int_8) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_t_29 = __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_16); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_n_s_NaAlSi3O8);
  __Pyx_GIVEREF(__pyx_n_s_NaAlSi3O8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_NaAlSi3O8)) __PYX_ERR(0, 223, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_29)) __PYX_ERR(0, 223, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_16, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":224
 * registerSpecies("Ca5Si2C2O13", Components({'Ca':5, 'Si':2, 'C':2, 'O':13}))
 * registerSpecies("NaAlSi3O8", Components({'Na':1, 'Al':1, 'Si':3, 'O':8}))
 * registerSpecies("CaMgSi2O6", Components({'Ca':1, 'Mg':1, 'Si':2, 'O':6}))             # <<<<<<<<<<<<<<
 * registerSpecies("Mg2Si2O6", Components({ 'Mg':2, 'Si':2, 'O':6}))
 * registerSpecies("Fe2SiO4", Components({ 'Fe':2, 'Si':1, 'O':4}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Components); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Ca, __pyx_int_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Mg, __pyx_int_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_t_20 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_5); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_CaMgSi2O6);
  __Pyx_GIVEREF(__pyx_n_s_CaMgSi2O6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_CaMgSi2O6)) __PYX_ERR(0, 224, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_20)) __PYX_ERR(0, 224, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":225
 * registerSpecies("NaAlSi3O8", Components({'Na':1, 'Al':1, 'Si':3, 'O':8}))
 * registerSpecies("CaMgSi2O6", Components({'Ca':1, 'Mg':1, 'Si':2, 'O':6}))
 * registerSpecies("Mg2Si2O6", Components({ 'Mg':2, 'Si':2, 'O':6}))             # <<<<<<<<<<<<<<
 * registerSpecies("Fe2SiO4", Components({ 'Fe':2, 'Si':1, 'O':4}))
 * registerSpecies("K3Fe0.5Al4Si19.5O47", Components({ 'K':3.0,'Fe':0.5, 'Si':19.5, 'O':47,'Al':4.0}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_29 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_Mg, __pyx_int_2) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_29); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_n_s_Mg2Si2O6);
  __Pyx_GIVEREF(__pyx_n_s_Mg2Si2O6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_n_s_Mg2Si2O6)) __PYX_ERR(0, 225, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_t_16)) __PYX_ERR(0, 225, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_29, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":226
 * registerSpecies("CaMgSi2O6", Components({'Ca':1, 'Mg':1, 'Si':2, 'O':6}))
 * registerSpecies("Mg2Si2O6", Components({ 'Mg':2, 'Si':2, 'O':6}))
 * registerSpecies("Fe2SiO4", Components({ 'Fe':2, 'Si':1, 'O':4}))             # <<<<<<<<<<<<<<
 * registerSpecies("K3Fe0.5Al4Si19.5O47", Components({ 'K':3.0,'Fe':0.5, 'Si':19.5, 'O':47,'Al':4.0}))
 * registerSpecies("KAlSi3O8", Components({ 'K':1, 'Si':3, 'O':8,'Al':1.0}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_Components); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_Fe, __pyx_int_2) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_Si, __pyx_int_1) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_O, __pyx_int_4) < 0) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_29, __pyx_t_20); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_n_s_Fe2SiO4);
  __Pyx_GIVEREF(__pyx_n_s_Fe2SiO4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_n_s_Fe2SiO4)) __PYX_ERR(0, 226, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":227
 * registerSpecies("Mg2Si2O6", Components({ 'Mg':2, 'Si':2, 'O':6}))
 * registerSpecies("Fe2SiO4", Components({ 'Fe':2, 'Si':1, 'O':4}))
 * registerSpecies("K3Fe0.5Al4Si19.5O47", Components({ 'K':3.0,'Fe':0.5, 'Si':19.5, 'O':47,'Al':4.0}))             # <<<<<<<<<<<<<<
 * registerSpecies("KAlSi3O8", Components({ 'K':1, 'Si':3, 'O':8,'Al':1.0}))
 * registerSpecies("K3Mg0.5Al4Si19.5O47", Components({ 'K':3.0,'Mg':0.5, 'Si':19.5, 'O':47,'Al':4.0}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_Components); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_K, __pyx_float_3_0) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Fe, __pyx_float_0_5) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Si, __pyx_float_19_5) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_O, __pyx_int_47) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Al, __pyx_float_4_0) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_t_29 = __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_16); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_kp_s_K3Fe0_5Al4Si19_5O47);
  __Pyx_GIVEREF(__pyx_kp_s_K3Fe0_5Al4Si19_5O47);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_s_K3Fe0_5Al4Si19_5O47)) __PYX_ERR(0, 227, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_29)) __PYX_ERR(0, 227, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_16, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":228
 * registerSpecies("Fe2SiO4", Components({ 'Fe':2, 'Si':1, 'O':4}))
 * registerSpecies("K3Fe0.5Al4Si19.5O47", Components({ 'K':3.0,'Fe':0.5, 'Si':19.5, 'O':47,'Al':4.0}))
 * registerSpecies("KAlSi3O8", Components({ 'K':1, 'Si':3, 'O':8,'Al':1.0}))             # <<<<<<<<<<<<<<
 * registerSpecies("K3Mg0.5Al4Si19.5O47", Components({ 'K':3.0,'Mg':0.5, 'Si':19.5, 'O':47,'Al':4.0}))
 * registerSpecies("NaFeSi2O6", Components({ 'Na':1, 'Fe':1, 'Si':2,'O':6}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Components); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_K, __pyx_int_1) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Si, __pyx_int_3) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_8) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Al, __pyx_float_1_0) < 0) __PYX_ERR(0, 228, __pyx_L1_error)
  __pyx_t_20 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_5); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_KAlSi3O8);
  __Pyx_GIVEREF(__pyx_n_s_KAlSi3O8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_KAlSi3O8)) __PYX_ERR(0, 228, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_20)) __PYX_ERR(0, 228, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":229
 * registerSpecies("K3Fe0.5Al4Si19.5O47", Components({ 'K':3.0,'Fe':0.5, 'Si':19.5, 'O':47,'Al':4.0}))
 * registerSpecies("KAlSi3O8", Components({ 'K':1, 'Si':3, 'O':8,'Al':1.0}))
 * registerSpecies("K3Mg0.5Al4Si19.5O47", Components({ 'K':3.0,'Mg':0.5, 'Si':19.5, 'O':47,'Al':4.0}))             # <<<<<<<<<<<<<<
 * registerSpecies("NaFeSi2O6", Components({ 'Na':1, 'Fe':1, 'Si':2,'O':6}))
 * registerSpecies("NaAlSi2O6", Components({'Na':1, 'Al':1, 'Si':2, 'O':6}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Components); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_29 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_K, __pyx_float_3_0) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_Mg, __pyx_float_0_5) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_Si, __pyx_float_19_5) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_O, __pyx_int_47) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_29, __pyx_n_s_Al, __pyx_float_4_0) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_29); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_kp_s_K3Mg0_5Al4Si19_5O47);
  __Pyx_GIVEREF(__pyx_kp_s_K3Mg0_5Al4Si19_5O47);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_kp_s_K3Mg0_5Al4Si19_5O47)) __PYX_ERR(0, 229, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_t_16)) __PYX_ERR(0, 229, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_29, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":230
 * registerSpecies("KAlSi3O8", Components({ 'K':1, 'Si':3, 'O':8,'Al':1.0}))
 * registerSpecies("K3Mg0.5Al4Si19.5O47", Components({ 'K':3.0,'Mg':0.5, 'Si':19.5, 'O':47,'Al':4.0}))
 * registerSpecies("NaFeSi2O6", Components({ 'Na':1, 'Fe':1, 'Si':2,'O':6}))             # <<<<<<<<<<<<<<
 * registerSpecies("NaAlSi2O6", Components({'Na':1, 'Al':1, 'Si':2, 'O':6}))
 * registerSpecies("Fe2Si2O6", Components({'Fe':2, 'Si':2, 'O':6}))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_Components); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_Na, __pyx_int_1) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_Fe, __pyx_int_1) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_29, __pyx_t_20); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_n_s_NaFeSi2O6);
  __Pyx_GIVEREF(__pyx_n_s_NaFeSi2O6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_n_s_NaFeSi2O6)) __PYX_ERR(0, 230, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_t_5)) __PYX_ERR(0, 230, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":231
 * registerSpecies("K3Mg0.5Al4Si19.5O47", Components({ 'K':3.0,'Mg':0.5, 'Si':19.5, 'O':47,'Al':4.0}))
 * registerSpecies("NaFeSi2O6", Components({ 'Na':1, 'Fe':1, 'Si':2,'O':6}))
 * registerSpecies("NaAlSi2O6", Components({'Na':1, 'Al':1, 'Si':2, 'O':6}))             # <<<<<<<<<<<<<<
 * registerSpecies("Fe2Si2O6", Components({'Fe':2, 'Si':2, 'O':6}))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_Components); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Na, __pyx_int_1) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Al, __pyx_int_1) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_29 = __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_16); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_n_s_NaAlSi2O6);
  __Pyx_GIVEREF(__pyx_n_s_NaAlSi2O6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_n_s_NaAlSi2O6)) __PYX_ERR(0, 231, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_29)) __PYX_ERR(0, 231, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_16, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":232
 * registerSpecies("NaFeSi2O6", Components({ 'Na':1, 'Fe':1, 'Si':2,'O':6}))
 * registerSpecies("NaAlSi2O6", Components({'Na':1, 'Al':1, 'Si':2, 'O':6}))
 * registerSpecies("Fe2Si2O6", Components({'Fe':2, 'Si':2, 'O':6}))             # <<<<<<<<<<<<<<
 * 
 * class HPThermoData(ThermoConstantsType):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Components); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Fe, __pyx_int_2) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_6) < 0) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_t_20 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_5); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Fe2Si2O6);
  __Pyx_GIVEREF(__pyx_n_s_Fe2Si2O6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Fe2Si2O6)) __PYX_ERR(0, 232, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_20)) __PYX_ERR(0, 232, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":234
 * registerSpecies("Fe2Si2O6", Components({'Fe':2, 'Si':2, 'O':6}))
 * 
 * class HPThermoData(ThermoConstantsType):             # <<<<<<<<<<<<<<
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_ThermoConstantsType); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_20)) __PYX_ERR(0, 234, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PEP560_update_bases(__pyx_t_5); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_CalculateMetaclass(NULL, __pyx_t_20); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_16 = __Pyx_Py3MetaclassPrepare(__pyx_t_29, __pyx_t_20, __pyx_n_s_HPThermoData, __pyx_n_s_HPThermoData, (PyObject *) NULL, __pyx_n_s_chemeng_cementdata, (PyObject *) NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (__pyx_t_20 != __pyx_t_5) {
    if (unlikely((PyDict_SetItemString(__pyx_t_16, "__orig_bases__", __pyx_t_5) < 0))) __PYX_ERR(0, 234, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":235
 * 
 * class HPThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, a, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = a
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_12HPThermoData_1__init__, 0, __pyx_n_s_HPThermoData___init, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__12);
  if (__Pyx_SetNameInClass(__pyx_t_16, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":239
 *         self.a = a
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_12HPThermoData_3Cp0, 0, __pyx_n_s_HPThermoData_Cp0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_16, __pyx_n_s_Cp0, __pyx_t_5) < 0) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":242
 *         return self.a[0] + self.a[1] * T + self.a[2]/(T**2) + self.a[3]/(T**0.5)
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_12HPThermoData_5Hf0, 0, __pyx_n_s_HPThermoData_Hf0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_16, __pyx_n_s_Hf0, __pyx_t_5) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":245
 *         return self.a[0]*T + 0.5*self.a[1]*T**2.0 - self.a[2]/T + 2.0*self.a[3]*T**0.5 + self.a[4]
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_12HPThermoData_7S0, 0, __pyx_n_s_HPThermoData_S0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_16, __pyx_n_s_S0, __pyx_t_5) < 0) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":248
 *         return self.a[0]*math.log(T) + self.a[1]*T - 0.5*self.a[2]/(T**2.0) - 2.0*self.a[3]/(T**0.5) + self.a[5]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(6):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_12HPThermoData_9__str__, 0, __pyx_n_s_HPThermoData___str, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_16, __pyx_n_s_str, __pyx_t_5) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":255
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_12HPThermoData_11__repr__, 0, __pyx_n_s_HPThermoData___repr, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_16, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":234
 * registerSpecies("Fe2Si2O6", Components({'Fe':2, 'Si':2, 'O':6}))
 * 
 * class HPThermoData(ThermoConstantsType):             # <<<<<<<<<<<<<<
 *     def __init__(self, Tmin, Tmax, a, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_29, __pyx_n_s_HPThermoData, __pyx_t_20, __pyx_t_16, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HPThermoData, __pyx_t_5) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":258
 *         return self.__str__()
 * 
 * speciesData["Ca5Si2CO11"].registerPhase("Spurrite")             # <<<<<<<<<<<<<<
 * speciesData["Ca5Si2CO11"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[614.1,-0.003508,-2493100.0,-4168.0,-5897053.0,-3664.64123237], "37"), "Spurrite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_Ca5Si2CO11); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":259
 * 
 * speciesData["Ca5Si2CO11"].registerPhase("Spurrite")
 * speciesData["Ca5Si2CO11"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[614.1,-0.003508,-2493100.0,-4168.0,-5897053.0,-3664.64123237], "37"), "Spurrite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["CaMgC2O6"].registerPhase("Dolomite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_Ca5Si2CO11); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = PyList_New(6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_614_1);
  __Pyx_GIVEREF(__pyx_float_614_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_614_1)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_0_003508);
  __Pyx_GIVEREF(__pyx_float_neg_0_003508);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_neg_0_003508)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2493100_0);
  __Pyx_GIVEREF(__pyx_float_neg_2493100_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_neg_2493100_0)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_4168_0);
  __Pyx_GIVEREF(__pyx_float_neg_4168_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_float_neg_4168_0)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_5897053_0);
  __Pyx_GIVEREF(__pyx_float_neg_5897053_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 4, __pyx_float_neg_5897053_0)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3664_64123237);
  __Pyx_GIVEREF(__pyx_float_neg_3664_64123237);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 5, __pyx_float_neg_3664_64123237)) __PYX_ERR(0, 259, __pyx_L1_error);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_float_298_0)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_float_2000_0)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_16)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_s_37)) __PYX_ERR(0, 259, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_16)) __PYX_ERR(0, 259, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Spurrite);
  __Pyx_GIVEREF(__pyx_n_s_Spurrite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_Spurrite)) __PYX_ERR(0, 259, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":261
 * speciesData["Ca5Si2CO11"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[614.1,-0.003508,-2493100.0,-4168.0,-5897053.0,-3664.64123237], "37"), "Spurrite")
 * 
 * speciesData["CaMgC2O6"].registerPhase("Dolomite")             # <<<<<<<<<<<<<<
 * speciesData["CaMgC2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.9,-0.004905,0.0,-3456.2,-2311991.47077,-2287.7288762], "37"), "Dolomite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_CaMgC2O6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":262
 * 
 * speciesData["CaMgC2O6"].registerPhase("Dolomite")
 * speciesData["CaMgC2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.9,-0.004905,0.0,-3456.2,-2311991.47077,-2287.7288762], "37"), "Dolomite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["Ca5Si2C2O13"].registerPhase("Tilleyite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_CaMgC2O6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = PyList_New(6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_358_9);
  __Pyx_GIVEREF(__pyx_float_358_9);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_358_9)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_0_004905);
  __Pyx_GIVEREF(__pyx_float_neg_0_004905);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_neg_0_004905)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_0)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3456_2);
  __Pyx_GIVEREF(__pyx_float_neg_3456_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 3, __pyx_float_neg_3456_2)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2311991_47077);
  __Pyx_GIVEREF(__pyx_float_neg_2311991_47077);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 4, __pyx_float_neg_2311991_47077)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2287_7288762);
  __Pyx_GIVEREF(__pyx_float_neg_2287_7288762);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 5, __pyx_float_neg_2287_7288762)) __PYX_ERR(0, 262, __pyx_L1_error);
  __pyx_t_20 = PyTuple_New(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_float_298_0)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_float_2000_0)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 2, __pyx_t_29)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 3, __pyx_kp_s_37)) __PYX_ERR(0, 262, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_29)) __PYX_ERR(0, 262, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Dolomite);
  __Pyx_GIVEREF(__pyx_n_s_Dolomite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_n_s_Dolomite)) __PYX_ERR(0, 262, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":264
 * speciesData["CaMgC2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.9,-0.004905,0.0,-3456.2,-2311991.47077,-2287.7288762], "37"), "Dolomite")
 * 
 * speciesData["Ca5Si2C2O13"].registerPhase("Tilleyite")             # <<<<<<<<<<<<<<
 * speciesData["Ca5Si2C2O13"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[741.7,-0.005345,-1434600,-5878.5,-6391033.598,-4523.276465], "37"), "Tilleyite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_Ca5Si2C2O13); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":265
 * 
 * speciesData["Ca5Si2C2O13"].registerPhase("Tilleyite")
 * speciesData["Ca5Si2C2O13"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[741.7,-0.005345,-1434600,-5878.5,-6391033.598,-4523.276465], "37"), "Tilleyite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["NaAlSi3O8"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_Ca5Si2C2O13); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_5 = PyList_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_741_7);
  __Pyx_GIVEREF(__pyx_float_741_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_741_7)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_0_005345);
  __Pyx_GIVEREF(__pyx_float_neg_0_005345);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_neg_0_005345)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_neg_1434600);
  __Pyx_GIVEREF(__pyx_int_neg_1434600);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_int_neg_1434600)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_5878_5);
  __Pyx_GIVEREF(__pyx_float_neg_5878_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, __pyx_float_neg_5878_5)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_6391033_598);
  __Pyx_GIVEREF(__pyx_float_neg_6391033_598);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 4, __pyx_float_neg_6391033_598)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_4523_276465);
  __Pyx_GIVEREF(__pyx_float_neg_4523_276465);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 5, __pyx_float_neg_4523_276465)) __PYX_ERR(0, 265, __pyx_L1_error);
  __pyx_t_16 = PyTuple_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_float_298_0)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_float_2000_0)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_5)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_kp_s_37)) __PYX_ERR(0, 265, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(0, 265, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Tilleyite);
  __Pyx_GIVEREF(__pyx_n_s_Tilleyite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_Tilleyite)) __PYX_ERR(0, 265, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":267
 * speciesData["Ca5Si2C2O13"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[741.7,-0.005345,-1434600,-5878.5,-6391033.598,-4523.276465], "37"), "Tilleyite")
 * 
 * speciesData["NaAlSi3O8"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.5,0.0,0.0,0.0,-4031406.775,-1890.58842253], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_NaAlSi3O8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":268
 * 
 * speciesData["NaAlSi3O8"].registerPhase("Liquid")
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.5,0.0,0.0,0.0,-4031406.775,-1890.58842253], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["NaAlSi3O8"].registerPhase("Albite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_NaAlSi3O8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_20 = PyList_New(6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_358_5);
  __Pyx_GIVEREF(__pyx_float_358_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_358_5)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_0)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_0)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 3, __pyx_float_0_0)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_4031406_775);
  __Pyx_GIVEREF(__pyx_float_neg_4031406_775);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 4, __pyx_float_neg_4031406_775)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1890_58842253);
  __Pyx_GIVEREF(__pyx_float_neg_1890_58842253);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 5, __pyx_float_neg_1890_58842253)) __PYX_ERR(0, 268, __pyx_L1_error);
  __pyx_t_29 = PyTuple_New(4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_float_298_0)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_float_2000_0)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_t_20)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 3, __pyx_kp_s_37)) __PYX_ERR(0, 268, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_20)) __PYX_ERR(0, 268, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 268, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":270
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[358.5,0.0,0.0,0.0,-4031406.775,-1890.58842253], "37"), "Liquid")
 * 
 * speciesData["NaAlSi3O8"].registerPhase("Albite")             # <<<<<<<<<<<<<<
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3936515.41852,-2826.44236975], "37"), "Albite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_NaAlSi3O8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":271
 * 
 * speciesData["NaAlSi3O8"].registerPhase("Albite")
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3936515.41852,-2826.44236975], "37"), "Albite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["NaAlSi3O8"].registerPhase("highAlbite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_NaAlSi3O8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = PyList_New(6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_452_0);
  __Pyx_GIVEREF(__pyx_float_452_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_452_0)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_0_013364);
  __Pyx_GIVEREF(__pyx_float_neg_0_013364);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_neg_0_013364)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1275900_0);
  __Pyx_GIVEREF(__pyx_float_neg_1275900_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_neg_1275900_0)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3953_6);
  __Pyx_GIVEREF(__pyx_float_neg_3953_6);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_float_neg_3953_6)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3936515_41852);
  __Pyx_GIVEREF(__pyx_float_neg_3936515_41852);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 4, __pyx_float_neg_3936515_41852)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2826_44236975);
  __Pyx_GIVEREF(__pyx_float_neg_2826_44236975);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 5, __pyx_float_neg_2826_44236975)) __PYX_ERR(0, 271, __pyx_L1_error);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_float_298_0)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_float_2000_0)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_16)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_s_37)) __PYX_ERR(0, 271, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_16)) __PYX_ERR(0, 271, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Albite);
  __Pyx_GIVEREF(__pyx_n_s_Albite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_Albite)) __PYX_ERR(0, 271, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":273
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3936515.41852,-2826.44236975], "37"), "Albite")
 * 
 * speciesData["NaAlSi3O8"].registerPhase("highAlbite")             # <<<<<<<<<<<<<<
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3926755.41852,-2813.04236975], "37"), "highAlbite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_NaAlSi3O8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":274
 * 
 * speciesData["NaAlSi3O8"].registerPhase("highAlbite")
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3926755.41852,-2813.04236975], "37"), "highAlbite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["CaAl2Si2O8"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_NaAlSi3O8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = PyList_New(6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_452_0);
  __Pyx_GIVEREF(__pyx_float_452_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_452_0)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_0_013364);
  __Pyx_GIVEREF(__pyx_float_neg_0_013364);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_neg_0_013364)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1275900_0);
  __Pyx_GIVEREF(__pyx_float_neg_1275900_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_neg_1275900_0)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3953_6);
  __Pyx_GIVEREF(__pyx_float_neg_3953_6);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 3, __pyx_float_neg_3953_6)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3926755_41852);
  __Pyx_GIVEREF(__pyx_float_neg_3926755_41852);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 4, __pyx_float_neg_3926755_41852)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2813_04236975);
  __Pyx_GIVEREF(__pyx_float_neg_2813_04236975);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 5, __pyx_float_neg_2813_04236975)) __PYX_ERR(0, 274, __pyx_L1_error);
  __pyx_t_20 = PyTuple_New(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_float_298_0)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_float_2000_0)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 2, __pyx_t_29)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 3, __pyx_kp_s_37)) __PYX_ERR(0, 274, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_29)) __PYX_ERR(0, 274, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_highAlbite);
  __Pyx_GIVEREF(__pyx_n_s_highAlbite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_n_s_highAlbite)) __PYX_ERR(0, 274, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":276
 * speciesData["NaAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[452.0,-0.013364,-1275900.0,-3953.6,-3926755.41852,-2813.04236975], "37"), "highAlbite")
 * 
 * speciesData["CaAl2Si2O8"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["CaAl2Si2O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[417.5,0.0,0.0,0.0,-4406117.625,-2339.74662875], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_CaAl2Si2O8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":277
 * 
 * speciesData["CaAl2Si2O8"].registerPhase("Liquid")
 * speciesData["CaAl2Si2O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[417.5,0.0,0.0,0.0,-4406117.625,-2339.74662875], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["CaMgSi2O6"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_CaAl2Si2O8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_5 = PyList_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_417_5);
  __Pyx_GIVEREF(__pyx_float_417_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_417_5)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_0)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_0)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, __pyx_float_0_0)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_4406117_625);
  __Pyx_GIVEREF(__pyx_float_neg_4406117_625);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 4, __pyx_float_neg_4406117_625)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2339_74662875);
  __Pyx_GIVEREF(__pyx_float_neg_2339_74662875);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 5, __pyx_float_neg_2339_74662875)) __PYX_ERR(0, 277, __pyx_L1_error);
  __pyx_t_16 = PyTuple_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_float_298_0)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_float_2000_0)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_kp_s_37)) __PYX_ERR(0, 277, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 277, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":279
 * speciesData["CaAl2Si2O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[417.5,0.0,0.0,0.0,-4406117.625,-2339.74662875], "37"), "Liquid")
 * 
 * speciesData["CaMgSi2O6"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["CaMgSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[345.3,0.0,0.0,0.0,-3312281.195,-1944.38014589], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_CaMgSi2O6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":280
 * 
 * speciesData["CaMgSi2O6"].registerPhase("Liquid")
 * speciesData["CaMgSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[345.3,0.0,0.0,0.0,-3312281.195,-1944.38014589], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["CaMgSi2O6"].registerPhase("Diopside")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_CaMgSi2O6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_20 = PyList_New(6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_345_3);
  __Pyx_GIVEREF(__pyx_float_345_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_345_3)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_0)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_0)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 3, __pyx_float_0_0)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3312281_195);
  __Pyx_GIVEREF(__pyx_float_neg_3312281_195);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 4, __pyx_float_neg_3312281_195)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1944_38014589);
  __Pyx_GIVEREF(__pyx_float_neg_1944_38014589);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 5, __pyx_float_neg_1944_38014589)) __PYX_ERR(0, 280, __pyx_L1_error);
  __pyx_t_29 = PyTuple_New(4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_float_298_0)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_float_2000_0)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_t_20)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 3, __pyx_kp_s_37)) __PYX_ERR(0, 280, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_20)) __PYX_ERR(0, 280, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 280, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":282
 * speciesData["CaMgSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[345.3,0.0,0.0,0.0,-3312281.195,-1944.38014589], "37"), "Liquid")
 * 
 * speciesData["CaMgSi2O6"].registerPhase("Diopside")             # <<<<<<<<<<<<<<
 * speciesData["CaMgSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[314.5,0.000041,-2745900,-2020.1,-3235757.57446,-1898.63491189], "37"), "Diopside")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_CaMgSi2O6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":283
 * 
 * speciesData["CaMgSi2O6"].registerPhase("Diopside")
 * speciesData["CaMgSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[314.5,0.000041,-2745900,-2020.1,-3235757.57446,-1898.63491189], "37"), "Diopside")             # <<<<<<<<<<<<<<
 * 
 * speciesData["Mg2Si2O6"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_CaMgSi2O6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = PyList_New(6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_314_5);
  __Pyx_GIVEREF(__pyx_float_314_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_314_5)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_000041);
  __Pyx_GIVEREF(__pyx_float_0_000041);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_000041)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_neg_2745900);
  __Pyx_GIVEREF(__pyx_int_neg_2745900);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_int_neg_2745900)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2020_1);
  __Pyx_GIVEREF(__pyx_float_neg_2020_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_float_neg_2020_1)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3235757_57446);
  __Pyx_GIVEREF(__pyx_float_neg_3235757_57446);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 4, __pyx_float_neg_3235757_57446)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1898_63491189);
  __Pyx_GIVEREF(__pyx_float_neg_1898_63491189);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 5, __pyx_float_neg_1898_63491189)) __PYX_ERR(0, 283, __pyx_L1_error);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_float_298_0)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_float_2000_0)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_16)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_s_37)) __PYX_ERR(0, 283, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_16)) __PYX_ERR(0, 283, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Diopside);
  __Pyx_GIVEREF(__pyx_n_s_Diopside);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_Diopside)) __PYX_ERR(0, 283, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":285
 * speciesData["CaMgSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[314.5,0.000041,-2745900,-2020.1,-3235757.57446,-1898.63491189], "37"), "Diopside")
 * 
 * speciesData["Mg2Si2O6"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["Mg2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[354.9,0.0,0.0,0.0,-3191463.435,-2021.07707436], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_Mg2Si2O6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":286
 * 
 * speciesData["Mg2Si2O6"].registerPhase("Liquid")
 * speciesData["Mg2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[354.9,0.0,0.0,0.0,-3191463.435,-2021.07707436], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["Mg2Si2O6"].registerPhase("Enstatite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_Mg2Si2O6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = PyList_New(6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_354_9);
  __Pyx_GIVEREF(__pyx_float_354_9);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_354_9)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_0)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_0)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 3, __pyx_float_0_0)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3191463_435);
  __Pyx_GIVEREF(__pyx_float_neg_3191463_435);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 4, __pyx_float_neg_3191463_435)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2021_07707436);
  __Pyx_GIVEREF(__pyx_float_neg_2021_07707436);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 5, __pyx_float_neg_2021_07707436)) __PYX_ERR(0, 286, __pyx_L1_error);
  __pyx_t_20 = PyTuple_New(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_float_298_0)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_float_2000_0)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 2, __pyx_t_29)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 3, __pyx_kp_s_37)) __PYX_ERR(0, 286, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_29)) __PYX_ERR(0, 286, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 286, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":288
 * speciesData["Mg2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[354.9,0.0,0.0,0.0,-3191463.435,-2021.07707436], "37"), "Liquid")
 * 
 * speciesData["Mg2Si2O6"].registerPhase("Enstatite")             # <<<<<<<<<<<<<<
 * speciesData["Mg2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[356.2,-0.002990,-596900.0,-3185.3,-3088328.86538,-2268.39597837], "37"), "Enstatite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_Mg2Si2O6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":289
 * 
 * speciesData["Mg2Si2O6"].registerPhase("Enstatite")
 * speciesData["Mg2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[356.2,-0.002990,-596900.0,-3185.3,-3088328.86538,-2268.39597837], "37"), "Enstatite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["Fe2SiO4"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_Mg2Si2O6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_5 = PyList_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_356_2);
  __Pyx_GIVEREF(__pyx_float_356_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_356_2)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_0_002990);
  __Pyx_GIVEREF(__pyx_float_neg_0_002990);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_neg_0_002990)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_596900_0);
  __Pyx_GIVEREF(__pyx_float_neg_596900_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_neg_596900_0)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3185_3);
  __Pyx_GIVEREF(__pyx_float_neg_3185_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, __pyx_float_neg_3185_3)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3088328_86538);
  __Pyx_GIVEREF(__pyx_float_neg_3088328_86538);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 4, __pyx_float_neg_3088328_86538)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2268_39597837);
  __Pyx_GIVEREF(__pyx_float_neg_2268_39597837);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 5, __pyx_float_neg_2268_39597837)) __PYX_ERR(0, 289, __pyx_L1_error);
  __pyx_t_16 = PyTuple_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_float_298_0)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_float_2000_0)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_kp_s_37)) __PYX_ERR(0, 289, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Enstatite);
  __Pyx_GIVEREF(__pyx_n_s_Enstatite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_Enstatite)) __PYX_ERR(0, 289, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":291
 * speciesData["Mg2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[356.2,-0.002990,-596900.0,-3185.3,-3088328.86538,-2268.39597837], "37"), "Enstatite")
 * 
 * speciesData["Fe2SiO4"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["Fe2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[239.7,0.0,0.0,0.0,-1506736.555,-1247.71393272], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_Fe2SiO4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":292
 * 
 * speciesData["Fe2SiO4"].registerPhase("Liquid")
 * speciesData["Fe2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[239.7,0.0,0.0,0.0,-1506736.555,-1247.71393272], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["Mg2SiO4"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_Fe2SiO4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_20 = PyList_New(6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_239_7);
  __Pyx_GIVEREF(__pyx_float_239_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_239_7)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_0)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_0)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 3, __pyx_float_0_0)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1506736_555);
  __Pyx_GIVEREF(__pyx_float_neg_1506736_555);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 4, __pyx_float_neg_1506736_555)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1247_71393272);
  __Pyx_GIVEREF(__pyx_float_neg_1247_71393272);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 5, __pyx_float_neg_1247_71393272)) __PYX_ERR(0, 292, __pyx_L1_error);
  __pyx_t_29 = PyTuple_New(4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_float_298_0)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_float_2000_0)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_t_20)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 3, __pyx_kp_s_37)) __PYX_ERR(0, 292, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_20)) __PYX_ERR(0, 292, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 292, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":294
 * speciesData["Fe2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[239.7,0.0,0.0,0.0,-1506736.555,-1247.71393272], "37"), "Liquid")
 * 
 * speciesData["Mg2SiO4"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["Mg2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[267.9,0.0,0.0,0.0,-2242104.385,-1552.3861601], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_Mg2SiO4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":295
 * 
 * speciesData["Mg2SiO4"].registerPhase("Liquid")
 * speciesData["Mg2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[267.9,0.0,0.0,0.0,-2242104.385,-1552.3861601], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["K3Fe0.5Al4Si19.5O47"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_Mg2SiO4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = PyList_New(6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_267_9);
  __Pyx_GIVEREF(__pyx_float_267_9);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_267_9)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_0)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_0)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_float_0_0)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2242104_385);
  __Pyx_GIVEREF(__pyx_float_neg_2242104_385);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 4, __pyx_float_neg_2242104_385)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1552_3861601);
  __Pyx_GIVEREF(__pyx_float_neg_1552_3861601);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 5, __pyx_float_neg_1552_3861601)) __PYX_ERR(0, 295, __pyx_L1_error);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_float_298_0)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_float_2000_0)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_16)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_s_37)) __PYX_ERR(0, 295, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_16)) __PYX_ERR(0, 295, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 295, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":297
 * speciesData["Mg2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[267.9,0.0,0.0,0.0,-2242104.385,-1552.3861601], "37"), "Liquid")
 * 
 * speciesData["K3Fe0.5Al4Si19.5O47"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["K3Fe0.5Al4Si19.5O47"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[2375.0,0.0,0.0,0.0,-23632876.25,-13311.7921995], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_kp_s_K3Fe0_5Al4Si19_5O47); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":298
 * 
 * speciesData["K3Fe0.5Al4Si19.5O47"].registerPhase("Liquid")
 * speciesData["K3Fe0.5Al4Si19.5O47"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[2375.0,0.0,0.0,0.0,-23632876.25,-13311.7921995], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["K3Mg0.5Al4Si19.5O47"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_kp_s_K3Fe0_5Al4Si19_5O47); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = PyList_New(6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_2375_0);
  __Pyx_GIVEREF(__pyx_float_2375_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_2375_0)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_0)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_0)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 3, __pyx_float_0_0)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_23632876_25);
  __Pyx_GIVEREF(__pyx_float_neg_23632876_25);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 4, __pyx_float_neg_23632876_25)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_13311_7921995);
  __Pyx_GIVEREF(__pyx_float_neg_13311_7921995);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 5, __pyx_float_neg_13311_7921995)) __PYX_ERR(0, 298, __pyx_L1_error);
  __pyx_t_20 = PyTuple_New(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_float_298_0)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_float_2000_0)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 2, __pyx_t_29)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 3, __pyx_kp_s_37)) __PYX_ERR(0, 298, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_29)) __PYX_ERR(0, 298, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 298, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":300
 * speciesData["K3Fe0.5Al4Si19.5O47"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[2375.0,0.0,0.0,0.0,-23632876.25,-13311.7921995], "37"), "Liquid")
 * 
 * speciesData["K3Mg0.5Al4Si19.5O47"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["K3Mg0.5Al4Si19.5O47"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[2386.0,0.0,0.0,0.0,-23819995.9,-13410.4657633], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_kp_s_K3Mg0_5Al4Si19_5O47); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":301
 * 
 * speciesData["K3Mg0.5Al4Si19.5O47"].registerPhase("Liquid")
 * speciesData["K3Mg0.5Al4Si19.5O47"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[2386.0,0.0,0.0,0.0,-23819995.9,-13410.4657633], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["KAlSi3O8"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_kp_s_K3Mg0_5Al4Si19_5O47); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_5 = PyList_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_2386_0);
  __Pyx_GIVEREF(__pyx_float_2386_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_2386_0)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_0)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_0)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, __pyx_float_0_0)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_23819995_9);
  __Pyx_GIVEREF(__pyx_float_neg_23819995_9);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 4, __pyx_float_neg_23819995_9)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_13410_4657633);
  __Pyx_GIVEREF(__pyx_float_neg_13410_4657633);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 5, __pyx_float_neg_13410_4657633)) __PYX_ERR(0, 301, __pyx_L1_error);
  __pyx_t_16 = PyTuple_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_float_298_0)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_float_2000_0)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_kp_s_37)) __PYX_ERR(0, 301, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 301, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":303
 * speciesData["K3Mg0.5Al4Si19.5O47"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[2386.0,0.0,0.0,0.0,-23819995.9,-13410.4657633], "37"), "Liquid")
 * 
 * speciesData["KAlSi3O8"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["KAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[367.3,0.0,0.0,0.0,-4081390.495,-1949.72727363], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_KAlSi3O8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":304
 * 
 * speciesData["KAlSi3O8"].registerPhase("Liquid")
 * speciesData["KAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[367.3,0.0,0.0,0.0,-4081390.495,-1949.72727363], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["KAlSi3O8"].registerPhase("Sanidine")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_KAlSi3O8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_20 = PyList_New(6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_367_3);
  __Pyx_GIVEREF(__pyx_float_367_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_367_3)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_0)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_0)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 3, __pyx_float_0_0)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_4081390_495);
  __Pyx_GIVEREF(__pyx_float_neg_4081390_495);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 4, __pyx_float_neg_4081390_495)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1949_72727363);
  __Pyx_GIVEREF(__pyx_float_neg_1949_72727363);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 5, __pyx_float_neg_1949_72727363)) __PYX_ERR(0, 304, __pyx_L1_error);
  __pyx_t_29 = PyTuple_New(4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_float_298_0)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_float_2000_0)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_t_20)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 3, __pyx_kp_s_37)) __PYX_ERR(0, 304, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_20)) __PYX_ERR(0, 304, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 304, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":306
 * speciesData["KAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[367.3,0.0,0.0,0.0,-4081390.495,-1949.72727363], "37"), "Liquid")
 * 
 * speciesData["KAlSi3O8"].registerPhase("Sanidine")             # <<<<<<<<<<<<<<
 * speciesData["KAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[448.8,-0.010075,-1007300.0,-3973.1,-3964433.22114,-2789.93851863], "37"), "Sanidine")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_KAlSi3O8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":307
 * 
 * speciesData["KAlSi3O8"].registerPhase("Sanidine")
 * speciesData["KAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[448.8,-0.010075,-1007300.0,-3973.1,-3964433.22114,-2789.93851863], "37"), "Sanidine")             # <<<<<<<<<<<<<<
 * 
 * speciesData["Al2SiO5"].registerPhase("Liquid")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_KAlSi3O8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = PyList_New(6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_448_8);
  __Pyx_GIVEREF(__pyx_float_448_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_448_8)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_0_010075);
  __Pyx_GIVEREF(__pyx_float_neg_0_010075);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_neg_0_010075)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1007300_0);
  __Pyx_GIVEREF(__pyx_float_neg_1007300_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_neg_1007300_0)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3973_1);
  __Pyx_GIVEREF(__pyx_float_neg_3973_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_float_neg_3973_1)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3964433_22114);
  __Pyx_GIVEREF(__pyx_float_neg_3964433_22114);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 4, __pyx_float_neg_3964433_22114)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2789_93851863);
  __Pyx_GIVEREF(__pyx_float_neg_2789_93851863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 5, __pyx_float_neg_2789_93851863)) __PYX_ERR(0, 307, __pyx_L1_error);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_float_298_0)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_float_2000_0)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_16)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_s_37)) __PYX_ERR(0, 307, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_16)) __PYX_ERR(0, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Sanidine);
  __Pyx_GIVEREF(__pyx_n_s_Sanidine);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_Sanidine)) __PYX_ERR(0, 307, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":309
 * speciesData["KAlSi3O8"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[448.8,-0.010075,-1007300.0,-3973.1,-3964433.22114,-2789.93851863], "37"), "Sanidine")
 * 
 * speciesData["Al2SiO5"].registerPhase("Liquid")             # <<<<<<<<<<<<<<
 * speciesData["Al2SiO5"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[237.6,0.0,0.0,0.0,-2576200.44,-1286.74897962], "37"), "Liquid")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_Al2SiO5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":310
 * 
 * speciesData["Al2SiO5"].registerPhase("Liquid")
 * speciesData["Al2SiO5"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[237.6,0.0,0.0,0.0,-2576200.44,-1286.74897962], "37"), "Liquid")             # <<<<<<<<<<<<<<
 * 
 * speciesData["NaAlSi2O6"].registerPhase("Jadeite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_Al2SiO5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = PyList_New(6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_237_6);
  __Pyx_GIVEREF(__pyx_float_237_6);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_237_6)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_0)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_0)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 3, __pyx_float_0_0)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2576200_44);
  __Pyx_GIVEREF(__pyx_float_neg_2576200_44);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 4, __pyx_float_neg_2576200_44)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1286_74897962);
  __Pyx_GIVEREF(__pyx_float_neg_1286_74897962);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 5, __pyx_float_neg_1286_74897962)) __PYX_ERR(0, 310, __pyx_L1_error);
  __pyx_t_20 = PyTuple_New(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_float_298_0)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_float_2000_0)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 2, __pyx_t_29)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 3, __pyx_kp_s_37)) __PYX_ERR(0, 310, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_29)) __PYX_ERR(0, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Liquid);
  __Pyx_GIVEREF(__pyx_n_s_Liquid);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_n_s_Liquid)) __PYX_ERR(0, 310, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":312
 * speciesData["Al2SiO5"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[237.6,0.0,0.0,0.0,-2576200.44,-1286.74897962], "37"), "Liquid")
 * 
 * speciesData["NaAlSi2O6"].registerPhase("Jadeite")             # <<<<<<<<<<<<<<
 * speciesData["NaAlSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[301.1,0.010143,-2239300.0,-2055.1,-3054593.52897,-1835.70351849], "37"), "Jadeite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_NaAlSi2O6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":313
 * 
 * speciesData["NaAlSi2O6"].registerPhase("Jadeite")
 * speciesData["NaAlSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[301.1,0.010143,-2239300.0,-2055.1,-3054593.52897,-1835.70351849], "37"), "Jadeite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["NaFeSi2O6"].registerPhase("Acmite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_NaAlSi2O6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_5 = PyList_New(6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_301_1);
  __Pyx_GIVEREF(__pyx_float_301_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_301_1)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_010143);
  __Pyx_GIVEREF(__pyx_float_0_010143);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_010143)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2239300_0);
  __Pyx_GIVEREF(__pyx_float_neg_2239300_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_neg_2239300_0)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2055_1);
  __Pyx_GIVEREF(__pyx_float_neg_2055_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, __pyx_float_neg_2055_1)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_3054593_52897);
  __Pyx_GIVEREF(__pyx_float_neg_3054593_52897);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 4, __pyx_float_neg_3054593_52897)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1835_70351849);
  __Pyx_GIVEREF(__pyx_float_neg_1835_70351849);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 5, __pyx_float_neg_1835_70351849)) __PYX_ERR(0, 313, __pyx_L1_error);
  __pyx_t_16 = PyTuple_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_float_298_0)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_float_2000_0)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_kp_s_37)) __PYX_ERR(0, 313, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Jadeite);
  __Pyx_GIVEREF(__pyx_n_s_Jadeite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_Jadeite)) __PYX_ERR(0, 313, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":315
 * speciesData["NaAlSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[301.1,0.010143,-2239300.0,-2055.1,-3054593.52897,-1835.70351849], "37"), "Jadeite")
 * 
 * speciesData["NaFeSi2O6"].registerPhase("Acmite")             # <<<<<<<<<<<<<<
 * speciesData["NaFeSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[307.1,0.016758,-1685500.0,-2125.8,-2611237.43295,-1839.83541625], "37"), "Acmite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_NaFeSi2O6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":316
 * 
 * speciesData["NaFeSi2O6"].registerPhase("Acmite")
 * speciesData["NaFeSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[307.1,0.016758,-1685500.0,-2125.8,-2611237.43295,-1839.83541625], "37"), "Acmite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["Fe2SiO4"].registerPhase("Fayalite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_NaFeSi2O6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_20 = PyList_New(6); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_307_1);
  __Pyx_GIVEREF(__pyx_float_307_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_307_1)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_016758);
  __Pyx_GIVEREF(__pyx_float_0_016758);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_016758)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1685500_0);
  __Pyx_GIVEREF(__pyx_float_neg_1685500_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_neg_1685500_0)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2125_8);
  __Pyx_GIVEREF(__pyx_float_neg_2125_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 3, __pyx_float_neg_2125_8)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2611237_43295);
  __Pyx_GIVEREF(__pyx_float_neg_2611237_43295);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 4, __pyx_float_neg_2611237_43295)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1839_83541625);
  __Pyx_GIVEREF(__pyx_float_neg_1839_83541625);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 5, __pyx_float_neg_1839_83541625)) __PYX_ERR(0, 316, __pyx_L1_error);
  __pyx_t_29 = PyTuple_New(4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_float_298_0)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_float_2000_0)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_t_20)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 3, __pyx_kp_s_37)) __PYX_ERR(0, 316, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = PyTuple_New(2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_20)) __PYX_ERR(0, 316, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Acmite);
  __Pyx_GIVEREF(__pyx_n_s_Acmite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_n_s_Acmite)) __PYX_ERR(0, 316, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_29, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":318
 * speciesData["NaFeSi2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[307.1,0.016758,-1685500.0,-2125.8,-2611237.43295,-1839.83541625], "37"), "Acmite")
 * 
 * speciesData["Fe2SiO4"].registerPhase("Fayalite")             # <<<<<<<<<<<<<<
 * speciesData["Fe2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[201.1,0.01733,-1960600.0,-900.9,-1514412.39343,-1115.33066401], "37"), "Fayalite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_20, __pyx_n_s_Fe2SiO4); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":319
 * 
 * speciesData["Fe2SiO4"].registerPhase("Fayalite")
 * speciesData["Fe2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[201.1,0.01733,-1960600.0,-900.9,-1514412.39343,-1115.33066401], "37"), "Fayalite")             # <<<<<<<<<<<<<<
 * 
 * speciesData["Fe2Si2O6"].registerPhase("Ferrosilite")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_Fe2SiO4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_16 = PyList_New(6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_201_1);
  __Pyx_GIVEREF(__pyx_float_201_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_201_1)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_01733);
  __Pyx_GIVEREF(__pyx_float_0_01733);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_01733)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1960600_0);
  __Pyx_GIVEREF(__pyx_float_neg_1960600_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_neg_1960600_0)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_900_9);
  __Pyx_GIVEREF(__pyx_float_neg_900_9);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_float_neg_900_9)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1514412_39343);
  __Pyx_GIVEREF(__pyx_float_neg_1514412_39343);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 4, __pyx_float_neg_1514412_39343)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_1115_33066401);
  __Pyx_GIVEREF(__pyx_float_neg_1115_33066401);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 5, __pyx_float_neg_1115_33066401)) __PYX_ERR(0, 319, __pyx_L1_error);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_float_298_0)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_float_2000_0)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_16)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_kp_s_37)) __PYX_ERR(0, 319, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_16)) __PYX_ERR(0, 319, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Fayalite);
  __Pyx_GIVEREF(__pyx_n_s_Fayalite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_Fayalite)) __PYX_ERR(0, 319, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":321
 * speciesData["Fe2SiO4"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[201.1,0.01733,-1960600.0,-900.9,-1514412.39343,-1115.33066401], "37"), "Fayalite")
 * 
 * speciesData["Fe2Si2O6"].registerPhase("Ferrosilite")             # <<<<<<<<<<<<<<
 * speciesData["Fe2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[398.7, -0.006579, 1290100.0, -4058.0,-2362863.83439,-2541.84281492], "37"), "Ferrosilite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_Fe2Si2O6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":322
 * 
 * speciesData["Fe2Si2O6"].registerPhase("Ferrosilite")
 * speciesData["Fe2Si2O6"].registerPhaseCoeffs(HPThermoData(298.0, 2000.0,[398.7, -0.006579, 1290100.0, -4058.0,-2362863.83439,-2541.84281492], "37"), "Ferrosilite")             # <<<<<<<<<<<<<<
 * 
 * ############## Mullite Thermo Data #Mullite data taken from Thermodynamic properties of mullite.... (Waldbaum) Harvard 1965
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_s_Fe2Si2O6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_HPThermoData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = PyList_New(6); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_398_7);
  __Pyx_GIVEREF(__pyx_float_398_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_398_7)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_0_006579);
  __Pyx_GIVEREF(__pyx_float_neg_0_006579);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_neg_0_006579)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1290100_0);
  __Pyx_GIVEREF(__pyx_float_1290100_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_1290100_0)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_4058_0);
  __Pyx_GIVEREF(__pyx_float_neg_4058_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 3, __pyx_float_neg_4058_0)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2362863_83439);
  __Pyx_GIVEREF(__pyx_float_neg_2362863_83439);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 4, __pyx_float_neg_2362863_83439)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_neg_2541_84281492);
  __Pyx_GIVEREF(__pyx_float_neg_2541_84281492);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 5, __pyx_float_neg_2541_84281492)) __PYX_ERR(0, 322, __pyx_L1_error);
  __pyx_t_20 = PyTuple_New(4); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_298_0);
  __Pyx_GIVEREF(__pyx_float_298_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_float_298_0)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_2000_0);
  __Pyx_GIVEREF(__pyx_float_2000_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_float_2000_0)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 2, __pyx_t_29)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_kp_s_37);
  __Pyx_GIVEREF(__pyx_kp_s_37);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 3, __pyx_kp_s_37)) __PYX_ERR(0, 322, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_29)) __PYX_ERR(0, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Ferrosilite);
  __Pyx_GIVEREF(__pyx_n_s_Ferrosilite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_n_s_Ferrosilite)) __PYX_ERR(0, 322, __pyx_L1_error);
  __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_20, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":325
 * 
 * ############## Mullite Thermo Data #Mullite data taken from Thermodynamic properties of mullite.... (Waldbaum) Harvard 1965
 * registerSpecies("Al6Si2O13", Components({'Al':6, 'Si':2, 'O':13}))             # <<<<<<<<<<<<<<
 * 
 * class MulliteThermoData(ThermoConstantsType):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_registerSpecies); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_Components); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Al, __pyx_int_6) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_Si, __pyx_int_2) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_O, __pyx_int_13) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
  __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_Al6Si2O13);
  __Pyx_GIVEREF(__pyx_n_s_Al6Si2O13);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_Al6Si2O13)) __PYX_ERR(0, 325, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_16)) __PYX_ERR(0, 325, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_5, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":327
 * registerSpecies("Al6Si2O13", Components({'Al':6, 'Si':2, 'O':13}))
 * 
 * class MulliteThermoData(ThermoConstantsType):             # <<<<<<<<<<<<<<
 *     def __init__(self, Tmin, Tmax, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_ThermoConstantsType); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_16)) __PYX_ERR(0, 327, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PEP560_update_bases(__pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = __Pyx_CalculateMetaclass(NULL, __pyx_t_16); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_20 = __Pyx_Py3MetaclassPrepare(__pyx_t_29, __pyx_t_16, __pyx_n_s_MulliteThermoData, __pyx_n_s_MulliteThermoData, (PyObject *) NULL, __pyx_n_s_chemeng_cementdata, (PyObject *) NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  if (__pyx_t_16 != __pyx_t_5) {
    if (unlikely((PyDict_SetItemString(__pyx_t_20, "__orig_bases__", __pyx_t_5) < 0))) __PYX_ERR(0, 327, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":328
 * 
 * class MulliteThermoData(ThermoConstantsType):
 *     def __init__(self, Tmin, Tmax, notes=""):             # <<<<<<<<<<<<<<
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_1__init__, 0, __pyx_n_s_MulliteThermoData___init, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_5, __pyx_tuple__12);
  if (__Pyx_SetNameInClass(__pyx_t_20, __pyx_n_s_init, __pyx_t_5) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":332
 *         self.a = [ -6.34719844e+06,  -6.96694385e+06,  -6.89076313e+02, -2.08446637e+03,   3.77248082e+02,   1.30438133e-01,-8.70793049e-05]
 * 
 *     def Cp0(self, T):             # <<<<<<<<<<<<<<
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_3Cp0, 0, __pyx_n_s_MulliteThermoData_Cp0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_20, __pyx_n_s_Cp0, __pyx_t_5) < 0) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":335
 *         return self.a[0] * T**(-2) + self.a[2] * T**(-0.5) + self.a[4] +2 * self.a[5] * T + self.a[6] * T ** 2
 * 
 *     def Hf0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_5Hf0, 0, __pyx_n_s_MulliteThermoData_Hf0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_20, __pyx_n_s_Hf0, __pyx_t_5) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":338
 *         return -self.a[0] / T + self.a[1] + 2 * self.a[2] * T**(0.5) + self.a[4] * T + self.a[5] * T**2 + self.a[6] * T ** 3 / 3
 * 
 *     def S0(self, T):             # <<<<<<<<<<<<<<
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_7S0, 0, __pyx_n_s_MulliteThermoData_S0, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_20, __pyx_n_s_S0, __pyx_t_5) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":341
 *         return -self.a[0] / (2 * T**2) - 2 * self.a[2] * T**(-0.5) + self.a[3] + self.a[4] * math.log(T)+ 2 *  self.a[5] * T + self.a[6] * T**(2) / 2
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         retval = "CementPolynomial{Tmin="+str(self.Tmin)+", Tmax="+str(self.Tmax)+", notes='"+self.comments+"', a=["
 *         for i in range(7):
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_9__str__, 0, __pyx_n_s_MulliteThermoData___str, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_20, __pyx_n_s_str, __pyx_t_5) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":348
 *         return retval
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.__str__()
 * 
 */
  __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_7chemeng_10cementdata_17MulliteThermoData_11__repr__, 0, __pyx_n_s_MulliteThermoData___repr, NULL, __pyx_n_s_chemeng_cementdata, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__Pyx_SetNameInClass(__pyx_t_20, __pyx_n_s_repr, __pyx_t_5) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "chemeng/cementdata.pyx":327
 * registerSpecies("Al6Si2O13", Components({'Al':6, 'Si':2, 'O':13}))
 * 
 * class MulliteThermoData(ThermoConstantsType):             # <<<<<<<<<<<<<<
 *     def __init__(self, Tmin, Tmax, notes=""):
 *         ThermoConstantsType.__init__(self, Tmin, Tmax, notes) #Required
 */
  __pyx_t_5 = __Pyx_Py3ClassCreate(__pyx_t_29, __pyx_n_s_MulliteThermoData, __pyx_t_16, __pyx_t_20, NULL, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MulliteThermoData, __pyx_t_5) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "chemeng/cementdata.pyx":351
 *         return self.__str__()
 * 
 * speciesData["Al6Si2O13"].registerPhase("Mullite")             # <<<<<<<<<<<<<<
 * speciesData["Al6Si2O13"].registerPhaseCoeffs(MulliteThermoData(298.0, 2000.0, ""), "Mullite")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = __Pyx_PyObject_Dict_GetItem(__pyx_t_16, __pyx_n_s_Al6Si2O13); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_registerPhase); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

  /* "chemeng/cementdata.pyx":352
 * 
 * speciesData["Al6Si2O13"].registerPhase("Mullite")
 * speciesData["Al6Si2O13"].registerPhaseCoeffs(MulliteThermoData(298.0, 2000.0, ""), "Mullite")             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_29, __pyx_n_s_speciesData); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_t_29, __pyx_n_s_Al6Si2O13); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_registerPhaseCoeffs); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_MulliteThermoData); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_20)) __PYX_ERR(0, 352, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_Mullite);
  __Pyx_GIVEREF(__pyx_n_s_Mullite);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_n_s_Mullite)) __PYX_ERR(0, 352, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_29, __pyx_t_16, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /* "chemeng/cementdata.pyx":1
 * # cython: language_level=2             # <<<<<<<<<<<<<<
 * #!/usr/bin/env python
 * from chemeng import *
 */
  __pyx_t_20 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_20) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_29);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init chemeng.cementdata", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init chemeng.cementdata");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long b = PyInt_AS_LONG(op2);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op2))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op2))) {
            b = __Pyx_PyLong_CompactValue(op2);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op2);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                CYTHON_UNUSED_VAR(a);
                CYTHON_UNUSED_VAR(b);
                #ifdef HAVE_LONG_LONG
                llb = b;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
#if PY_VERSION_HEX >= 0x030C00A7
    if (likely(__Pyx_PyLong_IsCompact(n))) {
        return PyLong_FromSize_t(__Pyx_PyLong_CompactValueUnsigned(n));
    }
#else
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromUnsignedLong(__Pyx_PyLong_Digits(n)[0]);
    }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            #if PY_VERSION_HEX >= 0x030C00A7
            ((PyLongObject*)copy)->long_value.lv_tag = ((PyLongObject*)copy)->long_value.lv_tag & ~_PyLong_SIGN_MASK;
            #else
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
            #endif
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static int __Pyx_PyFloat_BoolNeObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a;
    CYTHON_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    if (op1 == op2) {
        return 0;
    }
    if (likely(PyFloat_CheckExact(op1))) {
#if CYTHON_COMPILING_IN_LIMITED_API
        a = __pyx_PyFloat_AsDouble(op1);
#else
        a = PyFloat_AS_DOUBLE(op1);
#endif
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsZero(op1)) {
            a = 0.0;
            
        } else if (__Pyx_PyLong_IsCompact(op1)) {
            a = (double) __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                case 2:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                        a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -2)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                case 3:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                        a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -3)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                case 4:
                    if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                        a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -4)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                default:
        #endif
                    return __Pyx_PyObject_IsTrueAndDecref(
                        PyFloat_Type.tp_richcompare(op2, op1, Py_NE));
        #if CYTHON_USE_PYLONG_INTERNALS
            }
        }
        #endif
    } else {
        return __Pyx_PyObject_IsTrueAndDecref(
            PyObject_RichCompare(op1, op2, Py_NE));
    }
        if (a != b) {
            return 1;
        } else {
            return 0;
        }
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    CYTHON_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    if (likely(PyFloat_CheckExact(op1))) {
#if CYTHON_COMPILING_IN_LIMITED_API
        a = __pyx_PyFloat_AsDouble(op1);
#else
        a = PyFloat_AS_DOUBLE(op1);
#endif
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsZero(op1)) {
            a = 0.0;
            
        } else if (__Pyx_PyLong_IsCompact(op1)) {
            a = (double) __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                case 2:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                        a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -2)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                case 3:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                        a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -3)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                case 4:
                    if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                        a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                            if (size == -4)
                                a = -a;
                            break;
                        }
                    }
                    CYTHON_FALLTHROUGH;
                default:
        #endif
                    a = PyLong_AsDouble(op1);
                    if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        #if CYTHON_USE_PYLONG_INTERNALS
            }
        }
        #endif
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__8;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportDottedModuleRelFirst */
static PyObject *__Pyx_ImportDottedModuleRelFirst(PyObject *name, PyObject *parts_tuple) {
    PyObject *module;
    PyObject *from_list = NULL;
#if PY_MAJOR_VERSION < 3
    PyObject *star = __pyx_n_s__8;
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
#endif
    module = __Pyx_Import(name, from_list, -1);
    Py_XDECREF(from_list);
    if (module) {
        #if PY_MAJOR_VERSION >= 3
        if (parts_tuple) {
            module = __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
        }
        #endif
        return module;
    }
    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
        return NULL;
    PyErr_Clear();
    return __Pyx_ImportDottedModule(name, parts_tuple);
}

/* Py3UpdateBases */
static PyObject*
__Pyx_PEP560_update_bases(PyObject *bases)
{
    Py_ssize_t i, j, size_bases;
    PyObject *base, *meth, *new_base, *result, *new_bases = NULL;
    size_bases = PyTuple_GET_SIZE(bases);
    for (i = 0; i < size_bases; i++) {
        base  = PyTuple_GET_ITEM(bases, i);
        if (PyType_Check(base)) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        meth = __Pyx_PyObject_GetAttrStrNoError(base, __pyx_n_s_mro_entries);
        if (!meth && PyErr_Occurred()) {
            goto error;
        }
        if (!meth) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        new_base = __Pyx_PyObject_CallOneArg(meth, bases);
        Py_DECREF(meth);
        if (!new_base) {
            goto error;
        }
        if (!PyTuple_Check(new_base)) {
            PyErr_SetString(PyExc_TypeError,
                            "__mro_entries__ must return a tuple");
            Py_DECREF(new_base);
            goto error;
        }
        if (!new_bases) {
            if (!(new_bases = PyList_New(i))) {
                goto error;
            }
            for (j = 0; j < i; j++) {
                base = PyTuple_GET_ITEM(bases, j);
                PyList_SET_ITEM(new_bases, j, base);
                Py_INCREF(base);
            }
        }
        j = PyList_GET_SIZE(new_bases);
        if (PyList_SetSlice(new_bases, j, j, new_base) < 0) {
            goto error;
        }
        Py_DECREF(new_base);
    }
    if (!new_bases) {
        Py_INCREF(bases);
        return bases;
    }
    result = PyList_AsTuple(new_bases);
    Py_DECREF(new_bases);
    return result;
error:
    Py_XDECREF(new_bases);
    return NULL;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;
#if CYTHON_ASSUME_SAFE_MACROS
    nbases = PyTuple_GET_SIZE(bases);
#else
    nbases = PyTuple_Size(bases);
    if (nbases < 0) return NULL;
#endif
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
#if CYTHON_ASSUME_SAFE_MACROS
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *tmp = PyTuple_GetItem(bases, i);
        if (!tmp) return NULL;
#endif
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if PY_VERSION_HEX >= 0x030d00A4
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
#if CYTHON_ASSUME_SAFE_MACROS
        double value = PyFloat_AS_DOUBLE(float_value);
#else
        double value = PyFloat_AsDouble(float_value);
#endif
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
CYTHON_UNUSED static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pynumber_float */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj) {
    double val;
    if (PyLong_CheckExact(obj)) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (likely(__Pyx_PyLong_IsCompact(obj))) {
            val = (double) __Pyx_PyLong_CompactValue(obj);
            goto no_error;
        }
#endif
        val = PyLong_AsDouble(obj);
    } else if (PyUnicode_CheckExact(obj)) {
        val = __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        val = __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        val = __Pyx_PyByteArray_AsDouble(obj);
    } else {
        return PyNumber_Float(obj);
    }
    if (unlikely(val == -1 && PyErr_Occurred())) {
        return NULL;
    }
#if CYTHON_USE_PYLONG_INTERNALS
no_error:
#endif
    return PyFloat_FromDouble(val);
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    if (PyUnicode_CheckExact(obj)) {
        return __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        return __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        return __Pyx_PyByteArray_AsDouble(obj);
    } else {
        PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
        float_value = PyNumber_Float(obj);  if ((0)) goto bad;
        (void)__Pyx_PyObject_CallOneArg;
#else
        PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
        if (likely(nb) && likely(nb->nb_float)) {
            float_value = nb->nb_float(obj);
            if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
                __Pyx_TypeName float_value_type_name = __Pyx_PyType_GetName(Py_TYPE(float_value));
                PyErr_Format(PyExc_TypeError,
                    "__float__ returned non-float (type " __Pyx_FMT_TYPENAME ")",
                    float_value_type_name);
                __Pyx_DECREF_TypeName(float_value_type_name);
                Py_DECREF(float_value);
                goto bad;
            }
        } else {
            float_value = __Pyx_PyObject_CallOneArg((PyObject*)&PyFloat_Type, obj);
        }
#endif
        if (likely(float_value)) {
            double value = PyFloat_AS_DOUBLE(float_value);
            Py_DECREF(float_value);
            return value;
        }
    }
bad:
    return (double)-1;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Print */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* PrintOne */
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__64);
    }
    return name;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CStringEquals */
static CYTHON_INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    return *s1 == *s2;
}

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
